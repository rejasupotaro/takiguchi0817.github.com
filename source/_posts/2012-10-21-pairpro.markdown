---
layout: post
title: "ペアプログラミングについて学ぶ"
date: 2012-10-21 11:57
comments: false
categories: Agile PairProgramming
---

## プロローグ
僕の所属しているチームではスクラムで開発していますが、今まで  

- レビュー時に設計の間違いが発見されてかなりの手戻りが発生した
- 仕様の細かいところをその開発者自身しか把握していない
- レビューにとても時間がかかり、レビュワーにとっての大きな負担になる

といった問題がありました。  
そこで、品質を保ったまま開発スピードを上げるための施策として、試験的にペアプロを導入してみることにしました。  

## ペアプロやってみました
試しに1スプリントの期間、すべてペアプロで作業してみました。  

そうしたら、  

- レビューをしなくてよくなった
- 見積もりの半分の時間ですべてのタスクが終わった
- IDEやデバッガの効果的な使い方をパートナーから学ぶことができた
- メンバーと仲良くなった

ということがあり、ペアプロは僕らが抱えている問題の解決になるかもしれないと思いました。  

ただ今回やったのはペアプロというよりペア作業みたいな感じで、PCを2台並べて雑談しながらプログラムを書いていました。  
まだ社内でペアプロをやっているチームはいないしノウハウもないので、やり方がよく分かりませんでした。  
そこで、もっとペアプロについて学ぶことにしました。  

(以下、「ペアプログラミング―エンジニアとしての指南書」という本の読んで勉強した内容と経験の話になります)

## ペアプロの基本

- ドライバー：プログラムを書く人  
- ナビゲーター：設計を考える人  

ドライバーとナビゲーターの役割を適度に交代しながらタスクを遂行します。

## ペアプロをするための環境(物理)
![一般的なペアプログラミングの光景](http://dl.dropbox.com/u/54255753/blog/201210/pairpro.jpeg)  
ペアプログラミングをするにはまず、大きなテーブルと大きなディスプレイが必要です。  
ナビゲーターが適切にモニターが見えてドライバーに手が貸せるように物を配置した方が良いです。  
かと言って、ナビゲーターがドライバーの首に息がかかるような位置に座るのは、理想とはほど遠いです。  

![Be Gentle...](http://dl.dropbox.com/u/54255753/blog/201210/begentle.jpg)  
[「ペアプログラミング」における「コミュニケーション問題」](http://developers.slashdot.jp/story/12/08/30/0933235/%E3%80%8C%E3%83%9A%E3%82%A2%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%80%8D%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%80%8C%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E5%95%8F%E9%A1%8C%E3%80%8D)  

クルーズ＆アトラスは快適ですが、二人の距離が少し遠くなってしまいます。  
そこで、もっとコミュニケーションが取りやすいように、ディスプレイを2枚用意した横並びのペアプロ専用席を新たに用意しました。  
また、チームには男性しかおらず、お互いにあまり近付きたくないとのことで、画面をクロスするようにミラーリングして適度な距離を保てるように配慮しました。  

![イメージ図](http://dl.dropbox.com/u/54255753/blog/201210/pairproseat.jpg)

## ペアプロをするための環境(物理じゃない方)
たとえばエディタ、ドライバーがvimmerでナビゲーターがemacserだと、ナビゲーターはドライバーの作業に割り込みづらくなってしまいます。
それに同じ流派の人であってもショートカットが奇妙なキーに割り当てられていたり、職人芸的キーバインドに設定されていることもあるでしょう。  
エンジニアは、開発環境やデバッガに強いこだわりを持っていることがあり、開発者を無理に他人の環境に合わせようとすると、ペアプロに嫌悪感を持つようになるかもしれないので、強制的に環境を統一するのはあまり良くないかもしれません。  

## ペアプロのパターン
専門家、新人、外交的、内向的、男女…と、プログラマを分類していくと、さまざまなタイプの組み合わせが考えられます。  
プログラマのタイプによってペアプロのやり方は変わってきますが、とりあえず「専門家-新人」と「専門家-専門家」について取り上げます。  

### 専門家-新人
- 目的：新人プログラマをトレーニングしながら、比較的用意な作業を成し遂げる  
(新人プログラマとは僕のことです。)  

- 感じている問題点  
ドライバーとナビゲーターは数十分ごとに交代するものだが、新人(僕)から専門家に対してナビゲートするのがむずかしい。
新人(僕)は教えてもらうばかりで、専門家は退屈になってしまうような気がする。  

というところで悩んでいましたが、「ペアプロをした方が新人の成長速度は早く、また専門家は他人に教えることでより一層理解が深まる」らしいので、それを信じて頑張ります。  

### 専門家-専門家
- 目的：最も複雑な作業を成功させる  

- 感じている問題点  
ペアプロするより各々で作業する方が効率が良いような気がする。  
どちらもプロフェッショナルなので、思想の違いから設計で揉めることがある。  

本には「もし、そういう問題を感じたら、もっと心を開いてみましょう。リラックスして、自尊心をドアの外に置いて、偉大になるための知的旅行を楽しんでください。」と書いてありました。  

## まとめ
ペアプロのやり方といっても、「どんなタスク」を「どんなペア」でやるかによって様々なパターンがあるのでむずかしいのですが、  

- 複雑なタスクはペアプロを行う  
- ペアプロで書いたコードはレビューを行わなくても良い  
- スプリントの最初にペアプロを行うタスクを決める  

これくらいのルールを決めて、もう少し様子を見ようと思います。  

しかしペアプログラミングは数十年前から提唱されているにもかかわらず、あまり普及している感じがしません。  
グーグルで「ペアプロ」と検索窓にいれると「合コン」がサジェストされるのが現代です。  
![ペアプロ 合コン](http://dl.dropbox.com/u/54255753/blog/201210/ppgoogle.png)
ペアプロ自体に問題があるのでしょうか。  

ペアプロをしている方、いらっしゃいましたらノウハウなどを共有したいです。  

----
## 追記：ク社の人と話した
r7kamuraくんとちょっと話しました。  

[ペアプロ - ✘╹◡╹✘](http://r7kamura.hatenablog.com/entry/2012/10/10/205927)  

「あるタスクに対して詳しい人と詳しくない人でペアプロをすると効率が上がった。」  
「あるタスクに対して同じくらいの詳しさの人とやると、あまり意味がなかった。」  
とのことです。  
本には「専門家同士のペアはIQが40上昇〜〜」と書いてありましたが、タスク次第ですかね。

