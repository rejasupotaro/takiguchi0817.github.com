---
layout: post
title: "SICP 4.11 - 4.15"
date: 2012-10-21 07:24
comments: fakse
categories: Lisp SICP
---

    (define apply-in-underlying-scheme apply)

    ;; bool
    (define true #t)
    (define false #f)

    ;; apply
    (define (apply procedure arguments)
      (cond ((primitive-procedure? procedure)
             (apply-primitive-procedure procedure arguments))
            ((compound-procedure? procedure)
             (eval-sequence
               (procedure-body procedure)
               (extend-environment
                 (procedure-parameters procedure)
                 arguments
                 (procedure-environment procedure))))
            (else
              (error
                "Unknown procedure type -- APPLY" procedure))))
    
    ;; eval
    (define (eval exp env)
      (cond ((self-evaluating? exp) exp)
            ((variable? exp) (lookup-variable-value exp env))
            ((quoted? exp) (text-of-quotation exp))
            ((assignment? exp) (eval-assignment exp env))
            ((definition? exp) (eval-definition exp env))
            ((if? exp) (eval-if exp env))
            ((lambda? exp)
             (make-procedure (lambda-parameters exp)
                             (lambda-body exp)
                             env))
            ((begin? exp)
             (eval-sequence (begin-actions exp) env))
            ((cond? exp) (eval (cond->if exp) env))
            ((application? exp)
             (apply (eval (operator exp) env)
                    (list-of-values (operands exp) env)))
            (else
              (error "Unknown expression type -- EVAL" exp))))
    
    (define (list-of-values exps env)
      (if (no-operands? exps)
          '()
          (cons (eval (first-operand exps) env)
                (list-of-values (rest-operands exps) env))))
    
    ;; if
    (define (eval-if exp env)
      (if (true? (eval (if-predicate exp) env))
          (eval (if-consequent exp) env)
          (eval (if-alternative exp) env)))
    
    ;; begin
    (define (eval-sequence exps env)
      (cond ((last-exp? exps) (eval (first-exp exps) env))
            (else (eval (first-exp exps) env)
                  (eval-sequence (rest-exps exps) env))))
    
    ;; assginment and definition
    (define (eval-assignment exp env)
      (set-variable-value! (assignment-variable exp)
                           (eval (assignment-value exp) env)
                           env)
      'ok)
    (define (eval-definition exp env)
      (define-variable! (definition-variable exp)
                        (eval (definition-value exp) env)
                        env)
      'ok)
    
    ;; number or string?
    (define (self-evaluating? exp)
      (cond ((number? exp) true)
            ((string? exp) true)
            (else false)))
    
    ;; symbol?
    (define (variable? exp) (symbol? exp))
    
    ;; quote?
    (define (quoted? exp)
      (tagged-list? exp 'quote))
    (define (text-of-quotation exp) (cadr exp))
    
    ;; cadr is tag?
    (define (tagged-list? exp tag)
      (if (pair? exp)
          (eq? (car exp) tag)
          false))
    
    ;; assignment
    (define (assignment? exp)
      (tagged-list? exp 'set!))
    (define (assignment-variable exp) (cadr exp))
    (define (assignment-value exp) (caddr exp))
    
    ;; definition
    (define (definition? exp)
      (tagged-list? exp 'define))
    (define (definition-variable exp)
      (if (symbol? (cadr exp))
          (cadr exp)
          (caadr exp)))
    (define (definition-value exp)
      (if (symbol? (cadr exp))
          (caddr exp)
          (make-lambda (cdadr exp)
                       (cddr exp))))
    
    ;; lambda
    (define (lambda? exp) (tagged-list? exp 'lambda))
    (define (lambda-parameters exp) (cadr exp))
    (define (lambda-body exp) (cddr exp))
    (define (make-lambda parameters body)
      (cons 'lambda (cons parameters body)))
    
    ;; if
    (define (if? exp) (tagged-list? exp 'if))
    (define (if-predicate exp) (cadr exp))
    (define (if-consequent exp) (caddr exp))
    (define (if-alternative exp)
      (if (not (null? (cdddr exp)))
          (cadddr exp)
          false))
    (define (make-if predicate consequent alternative)
      (list 'if predicate consequent alternative))
    
    ;; begin
    (define (begin? exp) (tagged-list? exp 'begin))
    (define (begin-actions exp) (cdr exp))
    (define (last-exp? seq) (null? (cdr seq)))
    (define (first-exp seq) (car seq))
    (define (rest-exps seq) (cdr seq))
    (define (sequence->exp seq)
      (cond ((null? seq) seq)
            ((last-exp? seq) (first-exp seq))
            (else (make-begin seq))))
    (define (make-begin seq) (cons 'begin seq))
    
    ;; application
    (define (application? exp) (pair? exp))
    (define (operator exp) (car exp))
    (define (operands exp) (cdr exp))
    (define (no-operands? ops) (null? ops))
    (define (first-operand ops) (car ops))
    (define (rest-operands ops) (cdr ops))
    
    ;; cond
    (define (cond? exp) (tagged-list? exp 'cond))
    (define (cond-clauses exp) (cdr exp))
    (define (cond-else-clause? clause)
      (eq? (cond-predicate clause) 'else))
    (define (cond-predicate clause) (car clause))
    (define (cond-actions clause) (cdr clause))
    (define (cond->if exp)
      (expand-clauses (cond-clauses exp)))
    (define (expand-clauses clauses)
      (if (null? clauses)
          false
          (let ((first (car clauses))
                (rest (cdr clauses)))
               (if (cond-else-clause? first)
                   (if (null? rest)
                       (sequence->exp (cond-actions first))
                       (error "ELSE clause isn't last -- COND->IF"
                              clauses))
                   (make-if (cond-predicate first)
                            (sequence->exp (cond-actions first))
                            (expand-clauses rest))))))
    
    ;; test of predicate
    (define (true? x)
      (not (eq? x false)))
    (define (false? x)
      (eq? x false))
    
    ;; procedure
    (define (make-procedure parameters body env)
      (list 'procedure parameters body env))
    (define (compound-procedure? p)
      (tagged-list? p 'procedure))
    (define (procedure-parameters p) (cadr p))
    (define (procedure-body p) (caddr p))
    (define (procedure-environment p) (cadddr p))
    
    ;; env
    (define (enclosing-environment env) (cdr env))
    (define (first-frame env) (car env))
    (define the-empty-environment '())
    
    ;; frame
    (define (make-frame variables values)
      (cons variables values))
    (define (frame-variables frame) (car frame))
    (define (frame-values frame) (cdr frame))
    (define (add-binding-to-frame! var val frame)
      (set-car! frame (cons var (car frame)))
      (set-cdr! frame (cons val (cdr frame))))
    (define (extend-environment vars vals base-env)
      (if (= (length vars) (length vals))
          (cons (make-frame vars vals) base-env)
          (if (< (length vars) (length vals))
              (error "Too many arguments supplied" vars vals)
              (error "Too few arguments supplied" vars vals))))
    
    (define (lookup-variable-value var env)
      (define (env-loop env)
        (define (scan vars vals)
          (cond ((null? vars)
                 (env-loop (enclosing-environment env)))
                ((eq? var (car vars))
                 (car vals))
                (else (scan (cdr vars) (cdr vals)))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable" var)
            (let ((frame (first-frame env)))
                 (scan (frame-variables frame)
                       (frame-values frame)))))
      (env-loop env))
    
    (define (set-variable-value! var val env)
      (define (env-loop env)
        (define (scan vars vals)
          (cond ((null? vars)
                 (env-loop (enclosing-environment env)))
                ((eq? var (car vars))
                 (set-car! vals val))
                (else (scan (cdr vars) (cdr vals)))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable -- SET!" var)
            (let ((frame (first-frame env)))
                 (scan (frame-variables frame)
                       (frame-values frame)))))
      (env-loop env))
    
    (define (define-variable! var val env)
      (let ((frame (first-frame env)))
           (define (scan vars vals)
             (cond ((null? vars)
                    (add-binding-to-frame! var val frame))
                   ((eq? var (car vars))
                    (set-car! vals val))
                   (else (scan (cdr vars) (cdr vals)))))
           (scan (frame-variables frame)
                 (frame-values frame))))
    
    
    ;; 問題4.11
    ;; 各束縛が名前-値の対であるような束縛のリストで
    ;; フレームを表現せよ
    
    #|
    ; フレームをリストの対で表現
    (define (make-frame variables values)
      (cons variables values))
    (define (frame-variables frame) (car frame))
    (define (frame-values frame) (cdr frame))
    (define (add-binding-to-frame! var val frame)
       (set-car! frame (cons var (car frame)))
       (set-cdr! frame (cons val (cdr frame))))
    (define (extend-environment vars vals base-env)
      (if (= (length vars) (length vals))
          (cons (make-frame vars vals) base-env)
          (if (< (length vars) (length vals))
              (error "Too many arguments supplied" vars vals)
              (error "Too few arguments supplied" vars vals))))
    
    (define frame (make-frame '(a b c) '(1 2 3)))
    (print frame)
    (add-binding-to-frame! 'd 4 frame)
    (print frame)
    |#
    
    #|
    ; 名前-値の対のリストで表現
    (define (make-frame variables values)
    	(map cons variables values))
    (define (frame-variables frame)
    	(map car frame))
    (define (frame-values frame)
    	(map cdr frame))
    (define (add-binding-to-frame! var val frame)
    	(set-cdr! frame (cons (cons var val) (cdr frame))))
    	;(set-cdr! frame (cons (cdr frame) (cons var val))))
    
    (define frame (make-frame '(a b c) '(1 2 3)))
    (print frame)
    (add-binding-to-frame! 'd 4 frame)
    (print frame)
    |#
    
    ;; 問題4.12
    ;; 抽象を使って三つの手続きを再定義せよ
    
    #|
    ; frame-variablesを舐めてvarと一致したらvalをセットする
    ; 一致しなかったらerrorを出す
    (define (set-variable-value! var val env)
      (define (env-loop env)
        (define (scan vars vals)
          (cond ((null? vars)
                 (env-loop (enclosing-environment env)))
                ((eq? var (car vars))
                 (set-car! vals val))
                (else (scan (cdr vars) (cdr vals)))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable - SET!" var)
            (let ((frame (first-frame env)))
              (scan (frame-variables frame)
                    (frame-values frame)))))
      (env-loop env))
    
    ; frame-variablesを舐めてvarと一致したらvalを上書きする
    ; 一致しなかったら新しく加える
    (define (define-variable! var val env)
      (let ((frame (first-frame env)))
        (define (scan vars vals)
          (cond ((null? vars)
                 (add-binding-to-frame! var val frame))
                ((eq? var (car vars))
                 (set-car! vals val))
                (else (scan (cdr vars) (cdr vals)))))
        (scan (frame-variables frame)
              (frame-values frame))))
    
    ; frame-variablesを舐めてvarと一致したらvalを返す
    (define (lookup-variable-value var env)
      (define (env-loop env)
        (define (scan vars vals)
          (cond ((null? vars)
                 (env-loop (enclosing-environment env)))
                ((eq? var (car vars))
                 (car vals))
                (else (scan (cdr vars) (cdr vals)))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable" var)
            (let ((frame (first-frame env)))
              (scan (frame-variables frame)
                    (frame-values frame)))))
      (env-loop env))
    
    (print "環境を作ってみる")
    (define frame1 (make-frame '(a b c) '(1 2 3)))
    (define frame2 (make-frame '(d e f) '(4 5 6)))
    (define env (list frame1 frame2))
    (print env)
    (print "set-variable-value!でeに7をセットしてみる")
    (set-variable-value! 'e 7 env)
    (print env)
    ;(print "set-variable-value!で定義されていない値をセットしてみる")
    ;(set-variable-value! 'g 8 env)
    (print "define-variable!でgを定義してみる")
    (define-variable! 'g 7 env)
    (print env)
    (print "define-variable!ですでに定義されている変数を定義してみる")
    (define-variable! 'a 9 env)
    (print env)
    (print "lookup-variable-valueでaの値を見てみる")
    (print (lookup-variable-value 'a env))
    |#
    
    ; "frame-variablesを舐めて" <- 抽象的に出来るのでは
    
    #|
    ; 環境を渡る手続きを定義する
    (define (env-loop var found-proc not-found-proc env)
    	(define (scan vars vals)
    		(cond ((null? vars)
    					 (not-found-proc env))
    					((eq? var (car vars))
    					 (found-proc vals))
    					(else (scan (cdr vars) (cdr vals)))))
    	(if (eq? env the-empty-environment)
    		(error "Unbound variable" var)
    		(let ((frame (first-frame env)))
    			(scan (frame-variables frame)
    						(frame-values frame)))))
    
    ; env-loopを切り出した
    (define (set-variable-value! var val env)
    	(env-loop
    		var
    		(lambda (values)
    			(set-car! values val))
    		(lambda (env)
    			(set-variable-value! var val (enclosing-environment env)))
    		env))
    
    ; env-loopを切り出した
    (define (define-variable! var val env)
    	(env-loop
    		var
    		(lambda (values) (set-car! values val))
    		(lambda (env) (add-binding-to-frame! var val (enclosing-environment env)))
    		env))
    
    ; env-loopを切り出した
    (define (lookup-variable-value var env)
    	(env-loop
    		var
    		(lambda (values) (car values))
    		(lambda (env) (lookup-variable-value var (enclosing-environment env)))
    		env))
    
    (print "環境を作ってみる")
    (define frame1 (make-frame '(a b c) '(1 2 3)))
    (define frame2 (make-frame '(d e f) '(4 5 6)))
    (define env (list frame1 frame2))
    (print env)
    (print "set-variable-value!でeに7をセットしてみる")
    (set-variable-value! 'e 7 env)
    (print env)
    ;(print "set-variable-value!で定義されていない値をセットしてみる")
    ;(set-variable-value! 'g 8 env)
    (print "define-variable!でgを定義してみる")
    (define-variable! 'g 7 env)
    (print env)
    (print "define-variable!ですでに定義されている変数を定義してみる")
    (define-variable! 'a 9 env)
    (print env)
    (print "lookup-variable-valueでaの値を見てみる")
    (print (lookup-variable-value 'a env))
    |#
    
    ;; 問題4.13
    ;; 変数の束縛を除去するunbind!を実装せよ
    
    #|
    ; frame-variablesを舐めてvarと一致したらvalを返す
    (define (unbind! var env)
      (define (env-loop env)
        (define (scan vars vals)
          (cond ((null? vars)
                 (env-loop (enclosing-environment env)))
                ((eq? var (car vars))
                 (set-car! vars '())
                 (set-car! vals '())
    						 )
                (else (scan (cdr vars) (cdr vals)))))
        (if (eq? env the-empty-environment)
            (error "Unbound variable" var)
            (let ((frame (first-frame env)))
              (scan (frame-variables frame)
                    (frame-values frame)))))
      (env-loop env))
    
    (print "環境を作ってみる")
    (define frame1 (make-frame '(a b c) '(1 2 3)))
    (define frame2 (make-frame '(d e f) '(4 5 6)))
    (define env (list frame1 frame2))
    (print env)
    (print "unbind!でeの束縛を除去してみる")
    (unbind! 'e env)
    (print env)
    |#
    
    (define primitive-procedures
      (list (list 'car car)
            (list 'cdr cdr)
            (list 'cons cons)
            (list 'null? null?)
    				(list '+ +)
    				;(list 'map map)
            ; more primitives
            ))
    (define (primitive-procedure-names)
      (map car
           primitive-procedures))
    (define (primitive-procedure-objects)
      (map (lambda (proc) (list 'primitive (cadr proc)))
           primitive-procedures))
    (define (setup-environment)
      (let ((initial-env
              (extend-environment (primitive-procedure-names)
                                  (primitive-procedure-objects)
                                  the-empty-environment)))
           (define-variable! 'true true initial-env)
           (define-variable! 'false false initial-env)
           initial-env))
    (define the-global-environment (setup-environment))
    (define (primitive-procedure? proc)
      (tagged-list? proc 'primitive))
    (define (primitive-implementation proc) (cadr proc))
    (define (apply-primitive-procedure proc args)
      (apply-in-underlying-scheme
        (primitive-implementation proc) args))
    
    ;; util
    (define input-prompt ";;; M-Eval input:")
    (define output-prompt ";;; M-Eval value:")
    (define (driver-loop)
      (prompt-for-input input-prompt)
      (let ((input (read)))
           (let ((output (eval input the-global-environment)))
                (announce-output output-prompt)
                (user-print output)))
      (driver-loop))
    (define (prompt-for-input string)
      (newline) (newline) (display string) (newline))
    (define (announce-output string)
      (newline) (display string) (newline))
    (define (user-print object)
      (if (compound-procedure? object)
          (display (list 'compound-procedure
                         (procedure-parameters object)
                         (procedure-body object)
                         '<procedure-env>))
          (display object)))
    
    ;; 問題4.14
    ;; mapを定義するのとprimitive-proceduresに登録したとに動作の違い
    
    ; それぞれの動作を比べてみる
    
    #|
    ;; 対話する
    (define the-global-environment (setup-environment))                     
    (driver-loop)
    |#
    
    ;(define (map p lst) (if (null? lst) '() (cons (p (car lst)) (map p (cdr lst)))))
    ;(map (lambda (x) (+ 1 x)) '(1 2 3 4 5))
    
    
    ;; 問題4.15
    ;; (try try)の評価が矛盾していることを示せ
    
    #;(define (run-forever) (run-forever))
    #;(define (try p)
    	(if (halts? p p)
    		(run-forever)
    		'halted))
