---
layout: post
title: "イスコン各位のパフォーマンスチューニング"
date: 2012-11-06 23:59
comments: false
categories: Server Isucon
---

[#isucon2](http://blog.livedoor.jp/techblog/archives/67726806.html)、周りでも結構話題になった。  
「同期でもやりたいねー。」みたいな話になって、僕はパフォーマンスチューニングとかよくわからなかったので、各チームが何をしたのか調べた。  

## 言語
- 「なんとなくはやそう」みたいな曖昧な理由でnodeは選ばない。  
- 使い慣れた言語(RubyとかPerlとか)でやった方が良い。  

## デプロイ
- コードはGitHubに置いて、Capistranoでデプロイ出来るようにしたら良かった。  

## データベース
- スロークエリのチェックと設定パラメータを見た。  
- インデックス張ったりクエリを試行錯誤した。  
- サーバーのメモリサイズが16GBだったのに、innodb_buffer_pool_size 2Gだったので、メモリを増やそうと思ったけど、データサイズが小さかったので、DBサーバーでAPPを動かした。  
- Redisを使うように書き直した。  

## アプリケーション
- http_loadでベンチ。各リクエストのレスポンスタイムを確認した。  
- 最適なワーカー数を二分探索で調べた。  
- リバースプロキシ先をHostnameからIPアドレスに変えた(DNSルックアップが遅い罠を警戒)  
- Rubyのあるパッチを当てたらRailsアプリが20〜30％高速化するらしいと聞いて、Rubyをビルドし直してみたらスコアが上がった。  
- nginxで静的ファイルを配信した。  
- VarnishでESIを使った。  
- リバースプロキシやDBにもAPP入れた。  
- ページ数が少ないので事前にHTMLを書き出して、1秒以内にすべて更新するようにしたら速くなる。  
- 配信時にgzip圧縮をするのでは遅いので、事前にgzipで圧縮しておくと速くなる。  

## プロファイリング
- PerlならDevel::KYTProfで丸裸にできる。  
- Text::Xslate->renderを計測したら、テンプレートのレンダリングで50〜100ms程度かかることが分かった。  
- 負荷はテンプレートレンダリングのCPU boundだった。そこでworkerにレンダリング処理を独立した。  

## まとめ
1. とりあえず環境を整えて、ベンチマークを取ること。  
2. まずSQLチューニングして、負荷がAPPに移ったらそっちに取りかかる。  
3. キャッシュとかリバースプロキシをいじってみる。  

これらをうまく分担して行う、みたいな？  
