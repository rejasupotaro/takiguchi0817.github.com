---
layout: post
title: "仕事納め"
date: 2012-12-29 02:38
comments: false
categories: Android DI
---

### 年の瀬とディペンデンシーインジェクション

穏便に2012年の仕事を終わらせたかったけど、ディペンデンシーフレームワークで殴り合いになった。  

本体のコードはインジェクトで書いてるのに、テストではモックをインジェクトで書けるようにしてなかったので // for test と書いてsetterを作っていたということで、某氏がコンストラクタインジェクションを使って書き直したことが発端となって、そのあとインジェクトされるオブジェクトのスコープの話にまで広がって、たいへんなことになった。  
　  
　  
### どこに依存性を注入すべきか

ProGuardでコンストラクタを消されないような設定を書く必要があるとか、設定をコンストラクタに書くようにするとラージコンストラクタになるので嫌だとか、そういう理由であまりコンストラクタインジェクションは使わないようにしていた。  

<p style="background-color:#FFFFFF;border:1px solid #999999;padding:5px;font-size:14px">
A:なぜコンストラクタインジェクションを使ってテストを書き直したのですか？<br>
B:テストのためにsetterを付けるのは間違ってると思う。本体の実装にテストのためのコードを入れるのも良くない。<br>
A:setterはProGuardで消されるし、ラージコンストラクタになることは避けたいです。<br>
B:ProGuardで消されるからってテストのためのコードを書いていい理由にはなりませんよね？本体のコードがテストがある前提で書かれるのはおかしいと思います。<br>
A:僕はおかしいとは思いません。そもそもテストコードがないという状態はありえませんし。コンストラクタインジェクションだと、ProGuardに消されないように設定を書く必要がありますよね。<br>
B:いや、しかし…<br>
</p>

〜20分経過〜  

### 結論

<p style="background-color:#FFFFFF;border:1px solid #999999;padding:5px;font-size:14px">
A:分かりました。じゃあセッターインジェクションにしましょう。それなら僕も大丈夫です。<br>
B:それも完全には良いと思わないですけどね。<br>
</p>
　  
　  
### オブジェクトのスコープをどうするか

<span style="color:red">Androidのコンテキストのライフサイクルに合わせてオブジェクトを保持したいので、デフォルトのスコープをコンテキストシングルトンにしたい</span> VS <span style="color:blue">すべてのオブジェクトがコンテキストのライフサイクルに結びついているわけじゃないのでその都度生成するようにしたい</span>

<p style="background-color:#FFFFFF;border:1px solid #999999;padding:5px;font-size:14px">
A:コンテキストシングルトンで生成されたオブジェクトはDIコンテナが持ってるのでアクティビティが消えると消えます。結局入出力なので、ユーザーでもフレームワークでもコンテキストが一意に定まって、その中で動くからコンテキストシングルトンが良いんじゃないですかね。<br>
B:まず、コンテキストシングルトンは事故を少なくするものじゃなくて、無駄をなくそうってものという認識は合ってますか？<br>
A:アプリケーションシングルトンとコンテキストシングルトンだったら、コンテキストシングルトンを使おうっていうのはいいですよね。<br>
B:それも場合によると思います。<br>
A:都度生成だと、アクティビティとアクティビティのヘルパーでモデルを操作するときに、そのモデルが別のオブジェクトになって事故が起こったりしますよね。<br>
B:事故るってなんですか？事故が起こると思わない。都度生成が一番事故が起こらないんですよね？<br>
A:僕はそうは思わない。データの不整合が起こるケースと、どういったメリット・デメリットがあるか整理されてますかね。永続化するかどうかの話が混ざってますよね。<br>
B:永続化するかではないです。<br>
C:コンテキストシングルトンとノースコープが混ざっても事故は起こりませんっていうのは大丈夫ですか？<br>
B:さっきの話とちがって、アプリケーションシングルトンが混ざると変わってくるんですよね。<br>
C:ステートフルなものが混ざってくると変わってきますね。<br>
A:全部がステートレスならいいのですが、それはありえませんよね。モデルが都度生成されてオブジェクトが変わってしまうと困りますよね。<br>
B:でもモデルはDBなりファイルなりに入ってるので大丈夫ですよね。<br>
A:モデルはキャッシュとかクライアントの接続とかを持ってます。そいつらのリソースをディプリケートして整合性を持たせるのは難しいですよね。だったらコンテキストシングルトンにしましょうよ。<br>
B:キャッシュはコンテキストに依存してないですよね。コンテキストに依存してないものは…<br>
A:ちょっと今モデル層にあるものを見てみてくださいよ。<br>
B:クライアントってステートフルですか？<br>
A:モデルはステーフルにならざるを得ない。<br>
B:そのケースだけではない。<br>
</p>

〜議論が白熱〜

<p style="background-color:#FFFFFF;border:1px solid #999999;padding:5px;font-size:14px">
A:アクティビティとヘルパーで保持するステートフルなモデルが違うオブジェクトだと困りますよね？<br>
B:DBからとってくるときはだいじょうぶですよね。あとサーバーから取ってきたり。<br>
A:キャッシュに関してはキャッシュ機構の話ですよね。キャッシュ機構を変えるべきですが、現実問題として今それはできません。<br>
B:でもデフォルトでコンテキストスコープなのは良くない。<br>
A:だから…<br>
B:デフォルトでコンテキストシングルトンはふさわしくない。<br>
C:スコープが混ざると広い方のスコープが適用されてオブジェクトを保持し続けてメモリリークが起こったりカオスになるので、デフォルトはコンテキストシングルトンにしてそれ以外のスコープを定義するときは話し合うようにしませんか？禁止じゃなくてやるなら話し合いましょうということです。<br>
B:でもデフォルトはコンテキストシングルトンにするんですよね。<br>
A:すべてのケースをカバー出来るスコープなんてありません。なので一番マジョリティなケースに合わせましょう。<br>
B:ケースを考えないでデフォルトを設定するのは「publicにしとけばどこからでもアクセスできるし値を書き換えなきゃ安全なのでとりあえずpublicにしましょう」みたいなものじゃないですか？<br>
A:でもべつにコンテキストシングルトンだったらメモリ使用量も節約できるし、悪いことないじゃないですか。<br>
B:デフォルトでコンテキストシングルトンはない。Guiceではgetterより生成のコストが低いと書いてあったし、わざわざコンテキストシングルトンにはしたくない。<br>
A:それに関して言うとGuiceはサーバーサイドで使われていたので、getterより生成のコストが低いっていうのは、何千ものリクエストが同時に走るような状況では、リクエストシングルトン、つまりリクエストごとにオブジェクトを生成した方が速いということではないですか？<br>
B:Guiceはサーバーサイドを前提に作られたわけではない。<br>
C:ではなにをデフォルトにしますか？<br>
B:デフォルトをとりあえず動くものにするのは良くない。どっちでも動けば問題ないということにはしたくない。ステートのスコープに合わせてオブジェクトを定義しないといけない。<br>
C:ステートフルのときは考えないといけないよねって話ですよね。<br>
B:大多数でルールを決めるのはあほらしい。青信号の時間が長いので確認しないで渡りましょうみたいなものじゃないですか。<br>
A:コンテキストシングルトンは自分の判断で使っていいけど、それ以外は話そうで良いんじゃないですか。<br>
</p>

〜さらに議論が白熱〜
　  
　  
### 結論

う、うーん…。  
　  
　  
### 僕は思った

デフォルトをどちらのスコープにしても、レビューを通して適切なスコープでオブジェクトが管理されるようになると思ったけど、それとは別に開発のしやすさでいうと、  

- デフォルトでコンテキストシングルトン ＞ その都度生成

ってなって、事故の起こりやすさが

- デフォルトでコンテキストシングルトン ＜ その都度生成

となるのかなとって思った。なのでみんなの意識が高まっている状態ならば、デフォルトはコンテキストシングルトンでいいんじゃないかって思った。  

{% oembed https://twitter.com/rejasupotaro/status/284507403934896128 %}

そんな、2012年の最終出社日でした。  
　  
　  
　  

そのあとなぜかピープパポの忘年会行ってた。  
![](http://dl.dropbox.com/u/54255753/blog/201212/party.gif)
