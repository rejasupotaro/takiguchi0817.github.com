<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-09-06T23:49:11+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Genymotion速かった]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/06/genymotion/"/>
    <updated>2013-09-06T23:31:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/06/genymotion</id>
    <content type="html"><![CDATA[<p>AndroVMがいつの間にかGenymotionに名前変わってました。</p>

<h3><a href="http://www.genymotion.com/">Genymotion</a> - BOOST YOUR APP TESTING! Simple, practical and effective.</h3>

<p><img src="http://www.genymotion.com/assets/genymotion-fits-in-your-developping-environment-.png" alt="" /></p>

<p>「x86エミュレータとそんなに変わらないんでしょ」と思っていましたが、これを機にインストールして動かしてみたらサックサクのヌルヌルで驚きました。<br/>
もしかして、実機より速いのでは？と思って2、3000行の比較的小規模なライブラリでconnectedInstrumentTestを実行して、その実行時間を比較してみました。
結果は環境によって結構変わると思うので、あくまで目安で。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/genybench.png" alt="" /></p>

<h3>実機よりも速かった</h3>

<p>しかもエミュレータだとGoogle Playのアプリが落とせなかったりするのですが、Googleアカウントを登録して同期することもできるし、アプリを落として実機より軽快な環境で遊ぶこともできます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/download.png" alt="" /></p>

<p>ポチポチ押すだけで5分くらいあればインストールできるので、面倒くさがりな僕でもインストールできました。</p>

<p>今回のケースだとそんなにですが、1回のテストで20分かかる環境だとテストが速く終わると相当嬉しみがあるので、
しばらく使ってみて良さそうだったら、本番環境のJenkinsのAndroidエミュレータをGenymotionに置き換えるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Casual Talks #1]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/08/31/android-casual-talks-1/"/>
    <updated>2013-08-31T17:44:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/08/31/android-casual-talks-1</id>
    <content type="html"><![CDATA[<h1>はじめに</h1>

<p>Androidの開発をしていて、</p>

<ul>
<li>WebとiOSとAndroidで足並み揃えるのどうするんだろう</li>
<li>プラットフォーム間のUIの統一についてはどう考えたらいいんだろう</li>
<li>他のアプリではA/Bテストとかやってるのかな</li>
<li>PCからスマホウェブでは全機能を移植するけど、その流れでアプリでも全機能使えるようにって会社やユーザから言われるけどどうしたらいいのか</li>
<li>PCからネイティブアプリでは機能を削ってシンプルにってアプリ開発者は言うけど、削られた機能はどこにいくのか</li>
<li>多くのサービスでスマホやタブレットのUUが伸びてその分PCのPVが下がってると思うけど、スマホ時代の広告のうまい組み込み方とか売り方について話を聞きたい</li>
<li>WebViewでアプリを組むとステートが複雑になったり標準的なユーザ体験を提供するのが難しい</li>
<li>ブランチ管理でgit-flowを導入しようかと思ったけど、管理するコストと考えるとあれかなと思ったのでGitHub Flowでやっているけど、他社ではどうしてるのか</li>
<li>大規模でも破綻しない設計とは(「MVCを意識して書く」だと個人の技量に左右されるしスケールしない感じがする)</li>
<li>効果的なテストとメトリクス計測(取るだけじゃなくて改善するところも含めて)ってどうするのがいいんだろう</li>
<li>継続的にパフォーマンス計測をしたいけど、Jenkinsでどう実現したらいいのだろう</li>
<li>レビューで叩かれるとへこむ</li>
<li>デザイナーがみんなiPhoneユーザだ</li>
<li>むしろエンジニアもMacとiPhoneを使っている人が多くて、Androidは現代のIEって言われる</li>
</ul>


<p>など、悩むことが多いです。</p>

<p>こういう技術書にのっていない話は人に聞くのが一番早いかなと思っていますが、今までAndroid界隈では集まってこういう話をする場がなかったように思います。(僕が知らないだけであったのかもしれませんが)<br/>
それでこの度、カジュアルに情報交換をしたいなと思って、<a href="http://atnd.org/events/41600">Android Casual Talks #1</a>を開きました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual0.png" width="600px"></p>

<p>内容については「ぶっちゃけ過ぎてるんであんまりツイートしないでください」っていうのもあったので、さらっと概要だけまとめました。</p>

<h1>1. クックパッドの開発環境について</h1>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual4.jpg" width="600px"></p>

<p>僕はAndroid Studio + Gradleの導入とか、リポジトリ管理とか、ビルドの設定とか、人が増えてもスケールしそうな開発の話をしました。</p>

<h1>2. 品質を保つための組織的な取り組みと人に依存しないテスト</h1>

<p>メーカーの開発の品質は高いと伺っていたので、品質への取り組みについてお話いただきました。<br/>
いわゆるウォーターフォールモデルだけど、1週間のイテレーションを回して目標値への達成度の確認と是正を行っていて、さすがにしっかり管理をしているなと思いました。<br/>
メトリクスを細かく取っていたのも印象的でした。</p>

<h1>3. グリーにJenkinsを導入して2年半でおこった事</h1>

<p>Jenkinsの運用の話＆エモ枠としてお話いただきました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25716362" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/okazaki/2013-0829-jenkins-for-cookpad-android" title="2013 08-29 jenkins for cookpad android" target="_blank">2013 08-29 jenkins for cookpad android</a> </strong> from <strong><a href="http://www.slideshare.net/okazaki" target="_blank">Takayuki Okazaki</a></strong> </div></p>

<ul>
<li><p>変えないことは大きなリスク</p>

<ul>
<li>変えないと、技術的負債激増</li>
<li>ある時点から技術的負債のために働くことになる</li>
</ul>
</li>
<li><p>変えるのはツールではなくワークフロー</p>

<ul>
<li>ツールの導入で解決 -> 仕組みの改善で解決</li>
<li>あるべき論、精神論 -> しくみ、制度化</li>
</ul>
</li>
</ul>


<p>いい話でした。詳しくはスライドを御覧ください。</p>

<h1>4. injectionの基礎（android編）</h1>

<p>イベント開催を知った師匠が話してくれました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual2.png" width="600px"></p>

<p>DIフレームワークの基礎ということで、依存性の注入や制御の反転について、あるチャットアプリの例を通して、仕様が変わっていく中でプログラムを綺麗な状態に保ちながらテストをしやすくする方法について話していただきました。</p>

<p>社内ではひっそりと<a href="https://github.com/roboguice/roboguice">RoboGuice</a>を使っていたのですが、パフォーマンスとかで<a href="http://square.github.io/dagger/">Dagger</a>の方が良いみたいな流れが最近あるので、そっちに移行したいなと思いました。</p>

<h1>5. 意外と役立つ？Android Open Source Projectのすすめ</h1>

<p>Androidアプリのデバッグ手法について話していただきました。</p>

<ul>
<li><p>アプリ開発で悩んだときはどうしますか？</p>

<ul>
<li>ググる</li>
<li>Android Developersで調べる</li>
<li>色々試す</li>
</ul>
</li>
<li><p>上の方法で解決できないときはどうしますか？</p>

<ul>
<li>他のアプリを逆コンパイル</li>
<li>明日考える</li>
<li>仕様をドロップ</li>
</ul>
</li>
</ul>


<p>でも仕様を諦めるのはエンジニアとして負けた気分になる。そこで、<a href="https://sites.google.com/site/devcollaboration/codesearch">{OpenGrok</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual3.png" width="600px"></p>

<p>OpenGrokは、Androidのソースコードを簡単に見るために作られた検索エンジンで、Full Search、Definition、Symbol、File Path、Historyなど絞り込んで検索をすることができるみたいです。<br/>
ちょっと調べ物をするのに便利そうでした。</p>

<h1>6. アプリのリニューアルとその効果測定について</h1>

<p>Android2系のデザインで作られた黒背景に白文字の「葬式UI」だったPixivアプリをリニューアルしたときの反響と効果測定についてお話いただきました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual5.png" width="600px"></p>

<p>リニューアルをしたときにはGoogle Playで☆1の嵐が吹き荒れて…</p>

<ul>
<li>「最悪。アップデート前の方がいいです。」</li>
<li>「凄まじいまでの改悪、なぜこれでゴーが出たのか」</li>
</ul>


<p><strong>開発者「もう許してくださいって思いました。」</strong></p>

<p>ただ定性的な意見だけではなく、定量的なデータからこのリニューアルはどうだったのかというと、操作性の向上を図ったことにより、</p>

<ul>
<li>ブックマークのイベント数：4.7倍</li>
<li>評価ボタンのイベント数：9.5倍</li>
</ul>


<p>となり、順調にユーザ数も増加しているそうです。<br/>
レビューと合わせて計測することの大切さを言っていました。</p>

<h1>おわりに</h1>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual1.png" width="600px"></p>

<p>タイ料理が美味しかったのと、各社のいい話が聞けたのと、イベントを通して多くのAndroidエンジニアと知り合えたのはとても良かったです。
一方で、一通りトークが終わったあと時間が押してて「すいません、あと12分で交流してください」となってしまったのが残念でした。</p>

<p>このイベントの定員50人だったんですけど、150人以上の登録があって、思っていたより人が集まって驚きました。
それなりに需要があれば#2, #3&#8230;とやるかもしれないので、やりたいとか、会場を提供できるよとか、そういうのがあればまたやりたいですね。
次やるのなら交流をメインにしたいので、20分くらいのトークは2本にして、あとは5分のLTを募集してたくさんの人に発表してもらったあとに、さっき◯◯の話をしていたあの人と話そう、みたいにすると良いかなと思いました。</p>

<p>Androidエンジニアに幸あれ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[どうすると気持ち良く感じるのか]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/08/21/ui-animations/"/>
    <updated>2013-08-21T21:56:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/08/21/ui-animations</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/t3u9Ucc.gif" alt="" /></p>

<p><img src="http://i.imgur.com/IoWbato.gif" alt="" /></p>

<p><img src="http://i.imgur.com/aUsHSCo.gif" alt="" /></p>

<p><img src="http://i.imgur.com/mQp4sYq.gif" alt="" /></p>

<p><img src="http://hyper-text.org/img/post/css_tumblr_mobile_app_ui_01.gif" alt="" /></p>

<p>アプリにアニメーションを取り入れるのってどうだろう。
って友人と話していたのだけど、過度なアニメーション？開発者がやりたくやったみたいなのは使う側からするとあんまり嬉しくなくて、
でも気持ちいいアニメーションはついアクションをしたくなるし、それによってコミュニケーションが活発になったりするんじゃないかなってなった。</p>

<p>アニメーションって結構意味が広いからむずかしいのだけど。</p>

<p><a href="http://gihyo.jp/design/serial/01/ui-ux/0001">気持ち良さはどこからくるのか～身体に近づくUIへ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aar dependency]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/27/aar-dependency/"/>
    <updated>2013-07-27T15:47:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/27/aar-dependency</id>
    <content type="html"><![CDATA[<p>Android StudioでLibrary Projectを参照するのにソースコードを修正するたびにjarで固めてlibsにポンしてもいいいのですが、
面倒だしバージョン管理もしたいので調べてたらGitHubをmavenrepoにしてbuild.gradleにdependencyを書いてaarを読み込めることが分かった。</p>

<p><a href="http://u1aryz.blogspot.jp/2013/06/githubmavenandroidaar.html">githubをMavenリポジトリとしてAndroidライブラリプロジェクト(aar)をデプロイして使用する</a></p>

<p>Library Projectの対象moduleのbuild.gradleを以下のように変更。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildscript {
</span><span class='line'>    repositories {
</span><span class='line'>        mavenCentral()
</span><span class='line'>    }
</span><span class='line'>    dependencies {
</span><span class='line'>        classpath 'com.android.tools.build:gradle:0.5.+'
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>apply plugin: 'android-library'
</span><span class='line'>
</span><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile 'com.android.support:support-v4:13.0.+'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>android {
</span><span class='line'>    compileSdkVersion 17
</span><span class='line'>    buildToolsVersion "17.0.0"
</span><span class='line'>
</span><span class='line'>    defaultConfig {
</span><span class='line'>        minSdkVersion 9
</span><span class='line'>        targetSdkVersion 16
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>apply plugin: 'maven'
</span><span class='line'>
</span><span class='line'>uploadArchives {
</span><span class='line'>    repositories {
</span><span class='line'>        mavenDeployer {
</span><span class='line'>            repository url: "file://${projectDir}/repository"
</span><span class='line'>            pom.groupId = 'com.rejasupotaro'
</span><span class='line'>            pom.artifactId = 'rejasupo-commons'
</span><span class='line'>            pom.version = '0.0.1'
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>参照するプロジェクトのbuild.gradleにdependencyを追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>    maven { url 'https://raw.github.com/takiguchi0817/rejasupo-commons/master/rejasupo-commons/repository' }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile 'com.rejasupotaro:rejasupo-commons:0.0.1'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Android Design?]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/26/modern-android-design/"/>
    <updated>2013-07-26T00:37:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/26/modern-android-design</id>
    <content type="html"><![CDATA[<h1>What&#8217;s Modern Android Design?</h1>

<h3>GitHub</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/github.png" alt="" /></p>

<h3>Ted</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/ted.png" alt="" /></p>

<h3>Twitter</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/twitter.png" alt="" /></p>

<h3>Evernote Food</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/evernotefood.png" alt="" /></p>

<h3>Flipboard</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/flipboard.png" alt="" /></p>

<h3>Gmail</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/gmail.png" alt="" /></p>

<h3>Google Music</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/googlemusic.png" alt="" /></p>

<h3>Google+</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/googleplus.png" alt="" /></p>

<h3>pixiv</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/pixiv.png" alt="" /></p>

<h3>recipes</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/recipes.png" alt="" /></p>

<h3>Trulia</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/trulia.png" alt="" /></p>

<h3>umano</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/umano.png" alt="" /></p>

<h3>YouTube</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/youtube.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Casual Talksやります]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/22/android-casual-talks/"/>
    <updated>2013-07-22T21:18:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/22/android-casual-talks</id>
    <content type="html"><![CDATA[<p>ワイワイしているルビーストの様子です。</p>

<p><img src="http://d3lrup5e12lrut.cloudfront.net/media/BAhbCVsHOgZmSSIzMjAxMy8wNi8xNi8wOS8wMy8xNC82MjUvaGlnaHJlc18yNDgyMjkzMTIuanBlZwY6BkVUWwg6BnA6DGNvbnZlcnRJIhEtYXV0by1vcmllbnQGOwZUWwg7BzoKdGh1bWJJIg04MjB4NDAwIwY7BlRbCDoGZToIanBnSSIXLXN0cmlwIC1xdWFsaXR5IDgwBjsGVA.jpg" alt="" />
<img src="http://d3lrup5e12lrut.cloudfront.net/media/BAhbCVsHOgZmSSIzMjAxMi8xMi8wNy8xNS8wMS8yNC8yOTUvaGlnaHJlc18xODU3MDc1MjIuanBlZwY6BkVUWwg6BnA6DGNvbnZlcnRJIhEtYXV0by1vcmllbnQGOwZUWwg7BzoKdGh1bWJJIg04MjB4NDAwIwY7BlRbCDoGZToIanBnSSIXLXN0cmlwIC1xdWFsaXR5IDgwBjsGVA.jpg" alt="" />
<img src="http://d3lrup5e12lrut.cloudfront.net/media/BAhbCVsHOgZmSSIzMjAxMy8wNS8wOS8xNy8wMS80Ni83MDUvaGlnaHJlc18yMzQxNzQ1MjIuanBlZwY6BkVUWwg6BnA6DGNvbnZlcnRJIhEtYXV0by1vcmllbnQGOwZUWwg7BzoKdGh1bWJJIg04MjB4NDAwIwY7BlRbCDoGZToIanBnSSIXLXN0cmlwIC1xdWFsaXR5IDgwBjsGVA.jpg" alt="" /></p>

<p>画像は<a href="http://www.tokyorails.org/ja">TOKYO RAILS</a>より。</p>

<p>ルビーストはいつもワイワイしてて楽しそうだなと思ってた。</p>

<p>開発の話するの基本好きなんだけど、Android開発者ってウェッブ系ほど人口がいないし、
エンタープライズの人らにはあれ(Android)はJavaではないと後ろ指をさされ、社内ではエンタープライズｗｗｗと煽られてつらたんだった。</p>

<blockquote class="twitter-tweet"><p>「さすがの包丁さばきだね！ジャバ書いてるもんね！エンタープライズだもんね！」ってmrknさんに煽られていた</p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/358065012734050307">July 19, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>なのでイベントを立てました -> <a href="http://atnd.org/events/41600">Android Casual Talks</a></p>

<p>Android Studio移行した？とかレビューどうしてる？とかテストちゃんと書いてる？とか効果測定どうしてる？とか、そういう話をカジュアルに出来ればなと思っています。</p>

<p>人が集まるか不安だったけど、イベントページを立ててその日のうちに定員になったし、トーク内容も幅広くいい内容が集まって良かったです。</p>

<p>この夏は勉強会ドリブンディベロップメントで開発環境の整備を頑張ります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Android Design]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/18/google-mobile-sessions/"/>
    <updated>2013-07-18T23:01:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/18/google-mobile-sessions</id>
    <content type="html"><![CDATA[<p>Google Mobile Sessionsにいってきた。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/gms1.jpg" alt="" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/gms2.jpg" alt="" /></p>

<p>色んなセッションがあったけど、Mobile Android Designが特に良かった。
たとえば、スマートフォンブラウザ、Androidアプリ、iPhoneアプリなど、マルチデバイスでサービスを出す場合のアプリのデザインについて、どこを統一すべきで、どこをカスタマイズすべきかなど。</p>

<p>Designについて意識が高まって、他のアプリではどんなパターンを適用しているのか眺めてみたりしていた。</p>

<h3>Google公式のデザインガイド</h3>

<ul>
<li><a href="http://developer.android.com/design/index.html">Android Design</a></li>
<li><a href="http://www.youtube.com/playlist?list=PLWz5rJ2EKKc8j2B95zGMb8muZvrIy-wcF">Android Design in Action</a></li>
</ul>


<h3>Googleが美しいと紹介していたアプリ</h3>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.thefancy.app&amp;hl=ja">Fancy</a>
: Cardsベースでさまざまな解像度に対応していて、コンテンツを綺麗に見せることに成功している。</li>
<li><a href="https://play.google.com/store/apps/details?id=com.expedia.bookings&amp;hl=ja">Expedia</a>
: 解像度別にデザインを細かく調整していて、どのデバイスからも快適に見ることができる。</li>
<li><a href="https://play.google.com/store/apps/details?id=com.ted.android&amp;hl=ja">Ted</a>
: コンテンツ中心にうまく見せている。プライマリーに赤、セカンダリーに白を使っていてとても見やすい。</li>
</ul>


<h3>美しいデザインを紹介しているサイト</h3>

<ul>
<li><a href="http://androidniceties.tumblr.com/">Android niceties</a></li>
<li><a href="http://www.slideshare.net/theresaneil/best-android-app-designs">The Best Android Apps 2012: A Designers Collection</a></li>
<li><a href="http://www.creativebloq.com/app-design/15-beautiful-android-app-ui-designs-11121271">15 beautiful Android app designs</a></li>
<li><a href="http://www.android-app-patterns.com/">Design inspiration for your Android app</a></li>
<li><a href="http://www.hongkiat.com/blog/android-apps-designer/">65 Useful Android Apps For Designers</a></li>
<li><a href="http://www.hongkiat.com/blog/cool-android-homescreens/">40 Really Cool Android Home Screens For Your Inspiration</a></li>
</ul>


<h3>Androidのテーマに従うということ</h3>

<blockquote><p>なぜAndroidのテーマでアプリを作らなければいけないのか？独自テーマはダメなのか？
たとえば、アプリを使っていて設定画面がバラバラに導線が置かれていたらイライラする。
Androidのガイドラインに従うということは、
ユーザー体験を統一するということであり、
そうすることでユーザーはストレスなく、
インストールした瞬間からそのアプリを使いこなすことができるようになる。
ユーザーはガイドラインに沿ったアプリを求めているし、
Androidのガイドラインに従うことでデベロッパーは時間と努力を節約することができる。</p></blockquote>

<p>これを聞いて、僕のアプリはちゃんと出来ているだろうかと考えさせられた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[altria-connected_instrument_test]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/11/altria-connected-instrument-test/"/>
    <updated>2013-07-11T22:03:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/11/altria-connected-instrument-test</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet"><p>何も作ってないけどLLでJenkins cloneつくってYAPCとかで発表したい</p>&mdash; 中村氏 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/340815292131311619">June 1, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins clone実験中に暴走して凍結とかが良い</p>&mdash; 片s (@hotchemi) <a href="https://twitter.com/hotchemi/statuses/346598875328557059">June 17, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins clone、最終的には独立して一人暮らしとか始めたらいい</p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/347316439113400320">June 19, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins cloneの名前どうするかという話してて、それより上の抽象概念を考えられないからプロダクトにクラス名のような名前を付けてしまう、初音ミクのような個の概念を与えよ、Jenkins同士が会話してるの見ておっさんがLike付けるという結論になりました</p>&mdash; 中村氏 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/347336070427451394">June 19, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins clone clone作って中村氏のaltriaと聖杯戦争したい</p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/352936007068422144">July 4, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ということで手始めに中村氏のAltriaことJenkins Cloneのプラグインを書きました。</p>

<p>AndroidのConnected Instrument Testの結果を表示します。</p>

<p><a href="https://github.com/takiguchi0817/altria-connected_instrument_test">altria-connected_instrument_test</a>
<img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/altria-connected_instrument_test.png" alt="" /></p>

<p>エミュレータのプラグインも欲しいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouteActivityを作ろう]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/06/18/route-activity/"/>
    <updated>2013-06-18T22:16:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/06/18/route-activity</id>
    <content type="html"><![CDATA[<h2>理由1. LauncherのActivityは太りやすい</h2>

<p>Androidのプロジェクトを作ると最初にMainActivityが作られます。
そのMainActivityを中心にアプリを作っていくと、認証の確認を行うロジックを入れたり、思わぬ初期化処理が必要になったりして、規模が大きくなるごとにどんどんActivityが太ってしまいます。
ユーザーから最初に見える画面は出来るだけ速く表示したいですし、分岐がたくさん入ると見通しが悪くなって変更がしづらくなる、という状態は避けたいです。</p>

<h2>理由2. アプリの起動の口が複数あるとコピペが発生しやすい</h2>

<p>Androidはショートカットや通知など、画面を起動するパスがたくさんあります。
素直な実装をすると、すべてのActivityのonCreateの中で、isAuthenticatedみたいなメソッドを生やしてログインしてなかったらログイン画面に飛ばしたり、どの経路からアプリが起動されたかログを取る処理などを書いたりして、コピペが発生してActivityの見通しが悪くなってしまいます。</p>

<p>かといって共通の親クラスを作るという方法は、あまりやりたくありません。</p>

<h2>RouteActivityを作ろう</h2>

<p>プロジェクトを作成したらまず最初にMainActivityをRouteActivityにリネームします。
そして、ショートカットやIntentFilterなどはすべてRouteActivityを起動するようにして、パラメータで遷移先を変えるようにします。
RouteActivityに認証の確認の処理や、初期化処理などを置いて、各Activityはそれぞれの責務を真っ当させたら、コードが綺麗になるのではないかと思いました。</p>

<p>RouteActivityという名前はRailsのconfig/routes.rbから来ています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テンプレートアプリ "katanuki" を作った]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/04/28/android-katanuki/"/>
    <updated>2013-04-28T16:47:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/04/28/android-katanuki</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/takiguchi0817/katanuki">Android Katanuki</a></h1>

<p>A template application that includes tons of great open source tools and frameworks.</p>

<p><img src="https://raw.github.com/takiguchi0817/katanuki/master/katanuki.png" width="640" height="480"></p>

<h1>経緯</h1>

<p>この前、<a href="http://androidkickstartr.com/">AndroidKickstartR</a>というプロジェクトを見つけました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201304/androidkickstartr.png" width="640" height="480"></p>

<p>これは自分が使いたいライブラリを選んでポチポチ選んで &#8220;Download it!&#8221; を押したらAndroidアプリのテンプレートが落とせるというものです。
ハッカソンとかで便利そう。
雛形を提供するプロジェクトは他にも
<a href="android%20katanuk://github.com/donnfelker/android-bootstrap">Android Bootstrap</a>
などもあります。</p>

<p>で、各々がサポートしているライブラリが以下になります。</p>

<h3>AndroidKickstartR</h3>

<ul>
<li>android-maven-plugin</li>
<li>AndroidAnnotations</li>
<li>ActionBarSherlock</li>
<li>Spring RESTTemplate</li>
<li>Android support v4</li>
<li>NineOldAndroid</li>
<li>ACRA</li>
<li>RoboGuice</li>
</ul>


<h3>Android Bootstrap</h3>

<ul>
<li>ActionBarSherlock</li>
<li>Dagger</li>
<li>Butterknife</li>
<li>Otto</li>
<li>Robotium</li>
<li>android-maven-plugin</li>
<li>http-request</li>
<li>google-gson</li>
</ul>


<p>新しいアプリを作るときのセットアップってほぼ作業だし、
毎回同じことをしてる気がしたので、自分用のアプリのテンプレートを作りました。
作ったというより設定を書いた、の方が近いですが。
（なぜわざわざ作ったかというと自分の使いたいライブラリや書き方が、上のテンプレートと微妙に合わなかったからです。）</p>

<h1>katanukiについて</h1>

<p>このテンプレートは、プロトタイプ作成や一日でアプリを組むハッカソンを想定して作りました。
今から数時間でそれっぽいアプリを作るぞ！と思ったときに、何をすれば良いか考えて、</p>

<ol>
<li>APIを叩く</li>
<li>データを保存する</li>
<li>かっこいいUIを作る</li>
</ol>


<p>と作業を分解して、APIを叩くのにhttp-request、レスポンスのjsonをオブジェクトに変換するのにgson、それらをAsyncTaskLoaderで呼び出すようにしました。</p>

<p>次にデータの保存はActiveAndroidを使いました。エンタープライズでは使わないと思いますが、面倒なDB周りのコードを書く時間をバッサリカットできるので便利です。</p>

<p>UIについては、入れようか迷ったのですが、中のロジックは一緒でも見せ方はケースバイケースかなと思ったので入れませんでした。
プロジェクトには含めてませんが、このあたりが便利そうです。</p>

<ul>
<li><a href="https://github.com/JakeWharton/ActionBarSherlock">ActionBarSherlock</a> : ActionBarのcompatibility library</li>
<li><a href="https://github.com/chrisbanes/Android-PullToRefresh">PullToRefresh</a> : 引っ張り更新</li>
<li><a href="https://github.com/Prototik/HoloEverywhere">HoloEverywhere</a> : Holoを2系でも使えるようにする</li>
<li><a href="https://github.com/SimonVT/android-menudrawer">MenuDrawer</a> : 横から出るメニューの実装</li>
</ul>


<p>OpenSource便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Otto 使ってみた]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/04/15/using-otto/"/>
    <updated>2013-04-15T21:25:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/04/15/using-otto</id>
    <content type="html"><![CDATA[<h1><a href="http://square.github.io/otto/">Otto - An event bus by Square</a></h1>

<p>画像のアップロード処理が終わったらActivityに通知するとか、
DBからデータを消したらViewに反映させるとかしたくなることってよくあると思います。</p>

<p>Interfaceでなんとかしようとするとコードが汚くなってやだなと思ってたので、前から気になってたevent busのライブラリ、Ottoを使ってみました。</p>

<h2>バッググラウンドで画像のアップロードが終わったらトーストを出す</h2>

<p>Busですが、インスタンスごとにregisterとunregisterが出来るのですが、通常はSingletonで良いでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">BusProvider</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Bus</span> <span class="n">BUS</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bus</span><span class="o">(</span><span class="n">ThreadEnforcer</span><span class="o">.</span><span class="na">ANY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Bus</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BUS</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">BusProvider</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// No instances.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Busのインスタンスの生成のときに実行するスレッドのチェックが出来るのですが、
event busを使うときってバックグラウンドスレッドからメインスレッドに通知するパターンが多そうなので、
ThreadEnforcer.ANYを指定しています。</p>

<p>イベントの発火。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImageUploaderService</span> <span class="kd">extends</span> <span class="n">ProtonIntentService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">ImageUploaderService</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">EXTRA_UPLOAD_ENTITY</span> <span class="o">=</span> <span class="s">&quot;extra_animation_entity&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Inject</span> <span class="n">MyNotificationManager</span> <span class="n">mNotificationManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ImageUploaderService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">TAG</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ImageUploaderService</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mNotificationManager</span><span class="o">.</span><span class="na">sendNotification</span><span class="o">();</span>
</span><span class='line'>        <span class="n">UploadEntity</span> <span class="n">uploadEntity</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="n">EXTRA_UPLOAD_ENTITY</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MyApiClient</span> <span class="n">apiClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyApiClient</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">uploadEntity</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="n">apiClient</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;upload result: &quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mNotificationManager</span><span class="o">.</span><span class="na">cancelNotification</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">UploadFinishedEvent</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>bus#postに定義したイベントのインスタンスを渡します。</p>

<p>イベントはなんでもいいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadFinishedEvent</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は特になにも渡すものがないので空です。</p>

<p>メソッドに@Subscribeを付けて定義したイベントを引数にすると受け取ることが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">unregister</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Subscribe</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onUploadFinished</span><span class="o">(</span><span class="n">UploadFinishedEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ToastUtils</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">AnimationComposeActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">upload_finished</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActivityではonResumeとonPauseでそれぞれregisterとunregisterをしてやる必要があります。</p>

<p>これだけでイベント通知のしくみが使えてとても便利。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Otto、シンプルだしコード綺麗だしパフォーマンスを考慮してtraverseしないのもいい / An enhanced Guava-based event bus with emphasis on Android support. <a href="http://t.co/2yHWQkejEd" title="http://square.github.io/otto/">square.github.io/otto/</a></p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/323451917235789824">2013年4月14日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クックパッド株式会社に入社しました]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/04/02/nyusya-entry/"/>
    <updated>2013-04-02T01:50:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/04/02/nyusya-entry</id>
    <content type="html"><![CDATA[<h3>はじめまして</h3>

<blockquote class="twitter-tweet" lang="ja"><p>新卒です</p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/318505403476488193">2013年3月31日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>新卒としてクックパッド株式会社に入社しました。
僕は今日初めて同期と顔を合わせたのですが、新卒入社なのに社歴がすでに4年目という人や、博士後期課程までがっつり研究をして「新卒ですがもうすぐ30です」という人がいたり、「前職では〜」「転職のきっかけは〜」と始まる自己紹介をする人(僕もですが)もいて、
新卒のみなさんとてもフレッシュで戦々恐々としていました。</p>

<p>全社員が集まる場での自己紹介で「なぜクックパッドに入ったか」と「クックパッドで実現したいこと」の二点について、話してくださいと言われたので話しました。</p>

<h4>なぜクックパッドに入ったか</h4>

<p>思い返すと、年末にコードが綺麗な<a href="http://r7kamura.hatenablog.com/entry/2012/11/30/223412">中村クン</a>と話したことがきっかけだったのかなと思います。
Androidアプリ開発どう？みたいな話をして、あまりリソースが割けていないという話を聞きました。良いサービスなのにもったいないと思ったのがとても記憶に残っています。
(気になってその日はうちに帰ってapkを逆コンパイルしてた気がします)</p>

<h4>クックパッドで実現したいこと</h4>

<p>「マーケットのレーティングで星4つ以上を目指します」と言いました。
スマートフォンアプリというのは単純に「PCのページのデザインを崩れないように表示できるようにしたもの」にとどまらず、そもそも使われるシーンが違う(たとえば献立を考えるときにはPCで検索して、買い物をするときにはスマートフォンでレシピの材料を見て、実際に料理をするときにはタブレットで閲覧するみたいな)ので、シーンに応じた求められる機能とは何か、最適な見せ方とは何かを突き詰めていきたいです。</p>

<p>という話をしました。</p>

<h3>その他</h3>

<p>クックパッドは2008年(2007年だったかも)というかなり早い時期からHadoopを導入したり、同じく2008年にColdFusionで書かれたサービスをRailsでフルリニューアルしたりして、導入後は最新のバージョンに追随するようにしてきました。
なぜ最新にこだわっているかというと、新しいバージョンでしか使えないものが使えないなんてディスアドバンテージを背負いたくないというのと、実は常にバージョンアップしていくのが一番コストが低いからだと言っていました。</p>

<p>そういう姿勢がクックパッドをテクノロジーカンパニーとして世間に認知させ、多くのエンジニアを引き寄せ、今のようなレールズモヒカンの巣窟の形成に至ったのだと思います。</p>

<p>僕はそれと同じことをスマートフォンでもやりたい、
クックパッドをレールズ以外にもスマートフォンアプリ開発も凄いって言われるようにしたいと思っています。</p>

<p>もちろんすべてはユーザーの問題解決のため。
新鮮な野菜とジャバと顧客に届け続けるオアダイという言葉を胸に頑張ります。</p>

<p>これからどうぞよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はじめてのRspec on Rails(コントローラ編)]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/03/28/rspec-on-rails/"/>
    <updated>2013-03-28T22:23:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/03/28/rspec-on-rails</id>
    <content type="html"><![CDATA[<p>はじめてのRspec on Rails</p>

<h2>セットアップ</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install rspec-rails
</span><span class='line'>
</span><span class='line'>$ rails g rspec:controller "テスト対象のコントローラ名"
</span><span class='line'>      create  spec/controllers/foo_controller_spec.rb
</span><span class='line'>
</span><span class='line'>$ rake spec</span></code></pre></td></tr></table></div></figure>


<p>Railsのコントローラやモデルをテストするためにrspec-railsを入れて、rake specするまで。
この時点では何も起こりません。</p>

<p>続いてDBの設定をします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim config/database.yml
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  adapter: mysql2
</span><span class='line'>  encoding: utf8
</span><span class='line'>  reconnect: false
</span><span class='line'>  database: app_database_test
</span><span class='line'>  pool: 5
</span><span class='line'>  username: username
</span><span class='line'>  password: password
</span><span class='line'>  host: localhost
</span><span class='line'>
</span><span class='line'>$ rake db:create RAILS_ENV=test</span></code></pre></td></tr></table></div></figure>


<h2>コントローラのテスト</h2>

<p>あまり良い例じゃありませんが</p>

<figure class='code'><figcaption><span>spec/controllers/images_controller_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">ImagesController</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">fixtures</span> <span class="ss">:images</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET #index&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;when access to route&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="ss">:index</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;responds successfully with an HTTP 200 status code&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;renders the index template&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;loads all of the images into @image_list&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">image1</span><span class="p">,</span> <span class="n">image2</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:image_list</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">match_array</span><span class="p">(</span><span class="o">[</span><span class="n">image1</span><span class="p">,</span> <span class="n">image2</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET #show&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;when access to exsting image id&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;responds successfully with an HTTP 200 status code&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_success</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;renders the show templage&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">&quot;show&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;when access to not exsting image id&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="mi">9999</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;renders the notfound template&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="n">render_template</span><span class="p">(</span><span class="s2">&quot;notfound&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえず expect(object).to あるいは not_to に</p>

<ul>
<li>be_success</li>
<li>eq</li>
<li>match_array</li>
<li>be_a_new</li>
<li>render_template</li>
<li>redirect_to</li>
<li>route_to</li>
<li>be_routable</li>
<li>have_selector</li>
<li>include</li>
<li>match</li>
</ul>


<p>などなど、期待する値を書いていく感じですね。
(ちなみにshouldはdeprecatedになったとのことです)</p>

<h2>link</h2>

<ul>
<li><a href="https://github.com/rspec/rspec-rails">rspec-rails</a></li>
<li><a href="https://github.com/rspec/rspec-expectations">rails-expectations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[退職しました]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/03/16/taisyoku/"/>
    <updated>2013-03-16T22:53:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/03/16/taisyoku</id>
    <content type="html"><![CDATA[<p>インターンの頃から一年半ほどお世話になった会社を退職しました。</p>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201303/seibo.gif" alt="" /></p>

<p>餞に聖母(3.5kg)とアランの幸福論という本を貰いました。</p>

<p>湿っぽい話はよそでしてきたので、ここではご報告だけ。
次はPerlでもLISPでもない会社に行く予定です。</p>

<p>顧客に価値を届け続けるために、これからもより一層の努力をしていきたい所存です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013年 Androidアプリ開発で使いたいライブラリ]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/03/10/android-libraries/"/>
    <updated>2013-03-10T22:35:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/03/10/android-libraries</id>
    <content type="html"><![CDATA[<p>30億のデバイスのみなさん、こんにちは、ジャバです。</p>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201303/javamonster.gif" alt="迫り来るジャバモンスター" /></p>

<p>何の前触れもなく、2013年 Androidアプリ開発で使いたいライブラリを発表します。</p>

<h2>JsonConverter => <a href="https://code.google.com/p/google-gson/">gson</a></h2>

<p>JSONRPCでサーバーサイドと通信を行うときに、毎回パーサーを書くのは面倒なので、JsonConverterを使いたくなります。
そこで開発ではgoogleが開発しているgsonを使っていました。
NamingPolicyやDeserializerの使い方を覚えれば、手でjsonのパーサーを書くより圧倒的に楽で、</p>

<pre><code>Person person = gson.fromJson(json, Person.class);
</code></pre>

<p>このように一行でjsonからオブジェクトに変換できるようになり、</p>

<pre><code>String json = gson.toJson(person);
</code></pre>

<p>一行でオブジェクトからStringに変換することも出来ます。
なので、preferenceに保存 => 復旧もすごく便利になります。もうSerializableはやめましょう！</p>

<p>ただ、gsonは各々の型の変換のためにTypeAdapterを保持しているというのと、変換にはリフレクションを使っているので、パフォーマンスはあまり良くないです。
また、レスポンスのjsonの構造がクラスになってしまうので、変換したクラスをそのままモデルとして使おうとすると柔軟性が下がってしまいます。なので、使うのであれば</p>

<pre><code>json =&gt; api entity =&gt; model
</code></pre>

<p>ってしたい感じです。</p>

<h2>ORM => <a href="https://www.activeandroid.com/">ActiveAndroid</a> or <a href="http://greendao-orm.com/">greenDAO</a></h2>

<p>SQL文をHelperに記述してるときは人間らしい心を失いそうになります。そして、人間はtypoする生き物なのでDBのバージョンアップで死んだりすることもあります。<br/>
そこでORMということになるのですが、AndroidのORMでは、RailsのAndroid版であるActiveAndroidというのがあります。
ただし、Active Recordパターンの欠点もそのままなので、&#8221;構築が容易であり理解もしやすい&#8221;代償としてそのままでは複雑なロジックを扱いづらくなります。
ドメイン層とパーシステンス層が一緒になったのがActive Recordパターンなので、Rubyみたいにmixinができる言語は良いけど、ジャバだとテストが書きづらくなるので、あまりオススメしない、って某氏が言ってました。
データアクセスに関しては <a href="http://www.oracle.com/technetwork/jp/articles/index-087873-ja.html">データアクセスことはじめ</a> が勉強になりました。</p>

<p>あまり規模が大きくないならActiveAndroidは記述量が減るし読みやすいしで、良い選択肢だと思います。
それ以上なら、ORMLiteを高速化したgreenDAOを使うのが良いかもしれません。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/12321475" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/droidcon/green-dao" title="Green dao" target="_blank">Green dao</a> </strong> from <strong><a href="http://www.slideshare.net/droidcon" target="_blank">Droidcon Berlin</a></strong> </div></p>

<h2>DI => <a href="https://github.com/roboguice/roboguice">RoboGuice</a> or <a href="https://github.com/hnakagawa/proton">Proton</a> or <a href="http://square.github.com/dagger/">Dagger</a></h2>

<p>Fragmentのイベントを別のFragmentで作用させたいときに、interfaceを定義してActivity経由でlistenerを登録とかするとすぐにlistener地獄になってしまってつらいです。
そういうときにContextSingletonなヘルパーをインジェクトして使うとめちゃ便利で、コードの見通しが良くなって仕様変更に強くなって心が豊かになってモテ始めたりすると思います。
他にもテスト実行時にインジェクトするオブジェクトを切り替えられるとか、記述が楽になる以外にもメリットはたくさんあると思います。</p>

<p>有名なのはRoboGuiceです。これはサーバーサイドのDIフレームワークのGuiceを、Androidでも使えるようにラップしたものです。
サーバーサイドを想定して作られたものなので、無駄が多かったりするのですが、それなりにドキュメントがあって実績もあります。</p>

<p>そんなRoboGuiceを見て後述のTriainaフレームワークの開発者の人が、
「RoboGuice無駄に大きしTypeListenerとかいらんし、もっと早くて軽いのをフルスクラッチで書く」
と言って作られたのがProtonです。いらない機能を削ってAndroidに最適化した結果、サイズもメモリ使用量も圧倒的に少なくなったとのことです。
ただドキュメントがないので使うならRoboGuiceの知識が必須で、ソースコードを読みながらになると思います。</p>

<p>RoboActivityとかProtonActivityとか継承したくない、かつコンテキストシングルトンとかいらない！というケースであれば、単純にインジェクトだけが出来るDagger良いです。</p>

<h1>おわりに</h1>

<p>もうちょっと書こうと思ったのですが意外と書くのがたいへんだったので突然ブログは終わります。他にも、</p>

<ul>
<li>event busの<a href="http://square.github.com/otto/">Otto</a></li>
<li>WebView Bridgeの<a href="https://github.com/mixi-inc/triaina">Triaina</a></li>
<li>Code Dietが出来る<a href="http://androidannotations.org/">AndroidAnnotations</a></li>
<li>jQueryのAndroid版の<a href="https://code.google.com/p/android-query/">android-query</a></li>
</ul>


<p>とかあるので、また検証をしたら個別に記事を書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[この前飲み会で話したS式の話]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/03/07/sicp-hanseikai/"/>
    <updated>2013-03-07T22:53:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/03/07/sicp-hanseikai</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="ja"><p>三四郎がちゃらい感じになってる件。 <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; Hitoshi ASAIさん (@hito_asa) <a href="https://twitter.com/hito_asa/status/309606049814560769">2013年3月7日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" lang="ja"><p>チャラいとは&#8230; <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; ねこはるさん (@halcat0x15a) <a href="https://twitter.com/halcat0x15a/status/309606266827862018">2013年3月7日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" lang="ja"><p>どきどきする。 <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; Kanda Taikiさん (@konnyakmannan) <a href="https://twitter.com/konnyakmannan/status/309606337178898432">2013年3月7日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" lang="ja"><p>これまでの人生の全てを反省します <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; ıɐɯɐu ıɥsoʇɐsさん (@ainame) <a href="https://twitter.com/ainame/status/309607801758560256">2013年3月7日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" lang="ja"><p>厳かな雰囲気で怖い <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/309606522273558529">2013年3月7日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet" lang="ja"><p>SICPを読むと年収が上がるらしい <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; Akihiro Okunoさん (@choplin) <a href="https://twitter.com/choplin/status/309613209743130624">2013年3月7日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><a href="http://www.zusaar.com/event/535003">SICP読書会大反省会</a>でした。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/17005410" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/rejasupotaro/s-17005410" title="この前飲み会で話したS式の話" target="_blank">この前飲み会で話したS式の話</a> </strong> from <strong><a href="http://www.slideshare.net/rejasupotaro" target="_blank">rejasupotaro</a></strong> </div></p>

<p>気がついたらLTをすることになってたのでLTをしました。渋谷近辺ではどの会社もだいたいSICP読書会をしているようですが、なかなか人が集まらなくて休止するところが多い中、一年で読み切った弊社はすごいんだなあと思いました。</p>

<p>ちょっと僕はお酒に弱くすでにヘロヘロな状態でこの記事を書くのも限界なのですが、SICP読書会に参加してきた感想としては、世間で思われてるほどLISPは怖くないし、LISPerの方々もみんな優しくていい人ばかりでした。</p>

<p>一年間ありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dislable Java]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/03/05/dislable-java/"/>
    <updated>2013-03-05T00:32:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/03/05/dislable-java</id>
    <content type="html"><![CDATA[<h3>若手なので、<a href="http://www.zusaar.com/event/521003">若手Webエンジニア交流会</a>に行ってきました。</h3>

<p>アプリケーション開発から言語、インフラまで幅広い話が聞けたのは良かったです。意識がちょっぴり高まりました。またWeb系、みんなイケイケなのであれをあれしないといけないなどと思いました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/16883585" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/rejasupotaro/dislable-java" title="Dislable java" target="_blank">Dislable java</a> </strong> from <strong><a href="http://www.slideshare.net/rejasupotaro" target="_blank">rejasupotaro</a></strong> </div></p>

<p>かくいう僕も若手なので、フレッシュな言語・ジャバについて発表してきました。</p>

<h3>言語のはなし</h3>

<p>ジャバの発表をした当日に、偶然にもdynamicおじさんが記事を公開して、</p>

<h4><a href="http://d.hatena.ne.jp/perlcodesample/20130227/1361928810">変数に型がないということの利点について考える</a></h4>

<p>これが連鎖的に型論争の呼んで、TLが地獄みたいになった。</p>

<ul>
<li><a href="http://bleis-tift.hatenablog.com/entry/2013/02/28/%E3%80%8C%E5%A4%89%E6%95%B0%E3%81%AB%E5%9E%8B%E3%81%8C%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%AE%E5%88%A9%E7%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88">「変数に型がないということの利点について考える」の問題について考える</a></li>
<li><a href="http://blog.practical-scheme.net/shiro/20130227-equibillium">型付けと変更の時定数</a></li>
<li><a href="http://d.hatena.ne.jp/Nagise/20130228/1362069158">言語機能としての型、概念としての型</a></li>
<li><a href="http://d.hatena.ne.jp/tt_clown/20130302/programming_languages">動的型付き言語と静的型付き言語</a></li>
<li><a href="http://blog.practical-scheme.net/shiro/20130302-why-do-you-wanna-do-it">型論争</a></li>
<li><a href="http://www.gembook.org/benefits_of_dynamic_typing.html">動的型言語の使いどころ</a></li>
<li><a href="http://d.hatena.ne.jp/mizchi/20130303/1362286050">動的型とか静的型の話の前に「作者の気持ち」を考えろ</a></li>
<li><a href="https://gist.github.com/taichi/5079626">「作者の気持ち」以前に、揚げ足とる相手の最新状況くらい調べろ</a></li>
</ul>


<blockquote class="twitter-tweet" lang="ja"><p>若手webでプログラミング言語の話をしたのでスライド上げようと思ったけど、同日にdynamicおじさんの記事が公開されて、それ以来みんな型の話してるし、このタイミングで公開するのこわいので様子をみてる</p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/307880537324929024">2013年3月2日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>正直これのおかげで、このスライドもアップするか迷ったけど、だいぶ収まってきた感じするので一応上げておきます。</p>

<p><a href="http://d.hatena.ne.jp/perlcodesample/20130227/1361928810">変数に型がないということの利点について考える</a>についてはまったく共感ができないけど、静的型付けか動的型付けかという問題、具体的にディスろうと思うとソースコードが必要になって、ソースコードを持ち出すともはやstaticかdynamicかに留まらず言語による殴り合いになってしまうし、かと言って具体的な内容に踏み込まないと思想とか宗教の話になってしまうので、穏健派の僕は遠くからその様子を眺めていたいという感じです。</p>

<p>あと言語って、長くやると愛着がわいてきて自分ではディスるわりに他人からディスられるとイラッとするみたいなところもあるので難しいですね、なんてふわっとしたまとめで閉めさせてもらいます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidアプリを作るときに気を付けること(セキュリティ)]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/01/15/android-security/"/>
    <updated>2013-01-15T23:28:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/01/15/android-security</id>
    <content type="html"><![CDATA[<h3>Androidセキュリティあるあるをまとめてみました。</h3>

<p>　</p>

<h4><input type="checkbox">アプリケーションデータディレクトリの外に個人情報を置いていないか？</h4>

<p>基本的に個人情報はSDカードや他のディレクトリに置いてはいけません。
どうしても置きたい場合は<a href="http://takiguchi0817.github.com/blog/2012/12/31/java-aes/">暗号化</a>します。</p>

<h4><input type="checkbox">WebViewでGETパラメータでCookieやトークンを渡していないか？</h4>

<p>LogCatに出てしまいます。ただし、Jelly Beanからは<a href="http://blog.2maru.com/archives/1700">LogCatが読めなくなりました</a>。</p>

<h4><input type="checkbox">WebViewで許可されたドメイン以外にJavaScriptInterfaceが公開されていないか？</h4>

<p>JavaScriptInterfaceからクラスローダーが取得できたりJNIが呼べたりしてしまうので<a href="https://www.google.co.jp/#hl=ja&amp;q=Android+WebView+%E5%8D%B1%E9%99%BA&amp;fp=1">たいへん危険</a>です。</p>

<h4><input type="checkbox">ContentProviderのパーミッションは適切か？</h4>

<p>コンテントプロバイダはデフォルトで公開されているので注意が必要です。
また2.2以前だと<a href="http://www.taosoftware.co.jp/blog/2011/10/android_contentproviderexport.html">exportedをfalseにしていても</a>外部アプリから情報が読めてしまいます。</p>

<h4><input type="checkbox">Broadcastのパーミッションは適切か？</h4>

<p>パーミッションを付け忘れると外に情報が出てしまいます。
またStickyブロードキャストはパーミッションが指定できないので個人情報を入れてはいけません。</p>

<h4><input type="checkbox">端末固有の識別子をサーバ側でIDとして使っていないか？</h4>

<p><a href="http://news.mynavi.jp/articles/2012/03/28/abc2012_06/index.html">怖い人</a>が飛んでくるおそれがあります。
　<br/>
　</p>

<h3>まとめ</h3>

<p>脆弱性のあるアプリを一度世に出してしまったら、いくらセキュリティパッチをあてたところで、ユーザにアップデートをしてもらえなければそれまでです。
ちょっとした注意で防げるものもあるので、外部からの攻撃ならまだしも、こちら側で防げるものは確実に防いでおきたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モヒートの飲み方]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/01/05/drink-mockito/"/>
    <updated>2013-01-05T12:41:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/01/05/drink-mockito</id>
    <content type="html"><![CDATA[<h1>mojito</h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mojito.jpg" alt="" />
モヒートは、キューバ・ハバナ発祥のカクテルの一つ。
ラムをベースにソーダ、ライム、砂糖、ミントを加えたもの。
ミントとソーダの清涼感が暑い夏にぴったりと、「夏と言えば」の定番カクテル。<br/>
アーネスト・ヘミングウェイが好んで飲んでいた話は有名である。</p>

<h1><a href="http://code.google.com/p/mockito/">mockito</a></h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mockito.jpg" alt="" />
Mockito is a mocking framework that tastes really good.</p>

<p>ジャバのモックライブラリ。
モックライブラリは他にもいろいろありますが<a href="http://code.google.com/p/mockito/wiki/MockitoVSEasyMock">EasyMockと比べても</a>、mockitoの方が簡潔に書けそう。
というわけで、モヒートを飲んだあとのようにスカッとモックしたいので、どんなものか調べてみた。
　<br/>
　</p>

<h2>導入</h2>

<p>mockito本体と、Androidで動かすためにdexmakerとdexmaker-mockitoのjarをlibsに追加する。</p>

<ul>
<li><a href="http://code.google.com/p/mockito/downloads/list">mockitoのダウンロードはここから</a></li>
<li><a href="http://code.google.com/p/dexmaker/downloads/list">dexmakerのダウンロードはここから</a></li>
</ul>


<p>またEclipseの設定に追加しておくとContent Assistが効くようになって良い。
<img src="http://dl.dropbox.com/u/54255753/blog/201301/static_import.png" alt="" />
　<br/>
　</p>

<h2>mockito使い方</h2>

<ul>
<li><a href="http://docs.mockito.googlecode.com/hg/org/mockito/Mockito.html">Mockito API</a></li>
</ul>


<p>良く使いそうなものだけをピックアップした。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDrinkMockito</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// mockでモックオブジェクトを作成する</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mockedList</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">ArrayList</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mockedList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// whenで引数ごとの返り値を決められる</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)).</span><span class="na">thenThrow</span><span class="o">(</span><span class="k">new</span> <span class="n">RuntimeException</span><span class="o">());</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">,</span> <span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="n">fail</span><span class="o">(</span><span class="s">&quot;RuntimeExceptionがthrowされていない&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// whenではanyInt()やanyString()やanyMap()のような指定の仕方もできる</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">anyInt</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;element&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;element&quot;</span><span class="o">,</span> <span class="n">mockedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">999</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// verifyでモックオブジェクトが対象のメソッドを実行したか確認できる</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// verifyはメソッドの実行回数も確認することができる</span>
</span><span class='line'>    <span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// mockedList.add(&quot;bar&quot;)が2回呼ばれたことを確認する</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">times</span><span class="o">(</span><span class="mi">2</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// mockedList.add(&quot;bar&quot;)は1回も呼ばれなかったことを確認する</span>
</span><span class='line'>    <span class="n">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">,</span> <span class="n">never</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;baz&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// verifyはメソッドの実行順序も確認することができる</span>
</span><span class='line'>    <span class="n">mockedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;baz&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mockedList</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>    <span class="n">InOrder</span> <span class="n">inOrder</span> <span class="o">=</span> <span class="n">inOrder</span><span class="o">(</span><span class="n">mockedList</span><span class="o">);</span>
</span><span class='line'>    <span class="n">inOrder</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;baz&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">inOrder</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">mockedList</span><span class="o">).</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// spyで部分的にメソッドを置き換えることもできる</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">spy</span> <span class="o">=</span> <span class="n">Mockito</span><span class="o">.</span><span class="na">spy</span><span class="o">(</span><span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;());</span>
</span><span class='line'>    <span class="n">doReturn</span><span class="o">(</span><span class="mi">100</span><span class="o">).</span><span class="na">when</span><span class="o">(</span><span class="n">spy</span><span class="o">).</span><span class="na">size</span><span class="o">();</span>
</span><span class='line'>    <span class="n">spy</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span> <span class="c1">// 実際のオブジェクトのメソッド呼び出し</span>
</span><span class='line'>    <span class="n">spy</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="c1">// =&gt; 100</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえずmock、when、verify、spyだけ覚えておけば大丈夫そう。
テスト対象のオブジェクトを継承してモックオブジェクトを作るのに比べてるとだいぶ楽だ。
　<br/>
　</p>

<h2>Mockitoによるビヘイビア駆動開発</h2>

<h3><a href="http://docs.mockito.googlecode.com/hg/org/mockito/BDDMockito.html">MockitoBDD API</a></h3>

<p>さらにMockitoBDDというもあって、それを使えばビヘイビアを先に記述してから開発するスペックファーストな実装ができる。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Seller</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// should implement</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Bread</span> <span class="nf">askForBread</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Shop</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Seller</span> <span class="n">mSeller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Shop</span><span class="o">(</span><span class="n">Seller</span> <span class="n">seller</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mSeller</span> <span class="o">=</span> <span class="n">seller</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// should implement</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Goods</span> <span class="nf">buyBread</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testShouldBuyBread</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Seller</span> <span class="n">seller</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Seller</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Shop</span> <span class="n">shop</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Shop</span><span class="o">(</span><span class="n">seller</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//given  </span>
</span><span class='line'>    <span class="n">given</span><span class="o">(</span><span class="n">seller</span><span class="o">.</span><span class="na">askForBread</span><span class="o">()).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">Bread</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//when</span>
</span><span class='line'>    <span class="n">Goods</span> <span class="n">goods</span> <span class="o">=</span> <span class="n">shop</span><span class="o">.</span><span class="na">buyBread</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">goods</span><span class="o">,</span> <span class="n">containBread</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[続・Androidの画像の暗号化]]></title>
    <link href="http://takiguchi0817.github.com/blog/2012/12/31/java-aes/"/>
    <updated>2012-12-31T23:30:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2012/12/31/java-aes</id>
    <content type="html"><![CDATA[<p>前にベンチ取ったときは遅くて使えないって思ったけど、「いやそんなに遅くないでしょう」と言われたので、一からやり直しました。</p>

<h2>AES暗号とは</h2>

<p>AES暗号はアメリカ合衆国の新暗号規格 (Advanced Encryption Standard) として規格化された共通鍵暗号方式である。1977年に発行された暗号規格DESの安全性が技術進歩により低下したため、新たな暗号方式の公募を行い、2001年3月に FIPS PUB 197 として公表され、米軍主導のネットワーク秘匿化オープンソースプロジェクトであるTorなどに採用された。 〜wikipediaより〜</p>

<p>とりあえずAESは、「ブロック暗号」で「ブロック長が128ビット」で「鍵長が128・192・256ビットの3つが利用できる」ということみたいです。</p>

<h2>AESによる暗号化・復号化</h2>

<p><a href="http://www.ne.jp/asahi/hishidama/home/tech/java/aes.html">AESによる暗号化・復号化</a><br/>
今回はAndroidで画像をストレージに保存する際の暗号化について考えます。</p>

<h4>コード</h4>

<p>ENCRYPT_ALGORYTHM_MODE が &#8220;AES/CTR/PKCS5Padding&#8221; となっていますが、
これはAESをCTRモードで<a href="http://pentan.info/doc/block_cipher.html#anc_padding">PKCS#5</a>というパディング方式で暗号化するということです。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/d/d3/Cbc_encryption.png" alt="CBC Encryption" /></p>

<ul>
<li>encrypt: 保存先のファイルと画像を引数にして、画像を暗号化して保存する</li>
<li>decrypt: ファイル名を引数にして、復号した画像を返す</li>
</ul>


<p>※追記：このコードはそのまま使えません！パスワードの生成については一番最後をお読みください。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">rejasupotaro</span><span class="o">.</span><span class="na">sampleapp</span><span class="o">.</span><span class="na">encrypt</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.InvalidAlgorithmParameterException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.InvalidKeyException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.Key</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.NoSuchAlgorithmException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.CipherInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.CipherOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.NoSuchPaddingException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.spec.IvParameterSpec</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.spec.SecretKeySpec</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.pm.PackageInfo</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.pm.PackageManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.pm.PackageManager.NameNotFoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Bitmap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Bitmap.CompressFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.BitmapFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.rejasupotaro.sampleapp.utils.CloseableUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImageEncryptor</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">ImageEncryptor</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ENCRYPT_ALGORYTHM</span> <span class="o">=</span> <span class="s">&quot;AES&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ENCRYPT_ALGORYTHM_MODE</span> <span class="o">=</span> <span class="n">ENCRYPT_ALGORYTHM</span> <span class="o">+</span> <span class="s">&quot;/CTR/PKCS5Padding&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_KEY_LENGTH</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">mPassword</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// アプリ固有の情報ということでアプリをインストールした時間をもとに、</span>
</span><span class='line'>    <span class="c1">// getByte()したときにデフォルトの鍵長の128ビットになるStringを返す</span>
</span><span class='line'>    <span class="c1">// !!!!このやり方には問題があります。追記を参照!!!!</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">mPassword</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">mPassword</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">PackageInfo</span> <span class="n">packageInfo</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">packageInfo</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getPackageManager</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">getPackageInfo</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getApplicationInfo</span><span class="o">().</span><span class="na">packageName</span><span class="o">,</span> <span class="n">PackageManager</span><span class="o">.</span><span class="na">GET_META_DATA</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NameNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">long</span> <span class="n">installTime</span> <span class="o">=</span> <span class="n">packageInfo</span><span class="o">.</span><span class="na">firstInstallTime</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mPassword</span> <span class="o">=</span> <span class="n">formatValidPassword</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">installTime</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mPassword</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">formatValidPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">DEFAULT_KEY_LENGTH</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span> <span class="o">+</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">encrypt</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">),</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ByteArrayOutputStream</span> <span class="n">baos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="n">bitmap</span><span class="o">.</span><span class="na">compress</span><span class="o">(</span><span class="n">CompressFormat</span><span class="o">.</span><span class="na">JPEG</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="n">baos</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">byte</span><span class="o">[]</span> <span class="n">bin</span> <span class="o">=</span> <span class="n">baos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">encrypt</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">bin</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">iv</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">content</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">encrypt</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">),</span> <span class="n">content</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">content</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span>
</span><span class='line'>            <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">ENCRYPT_ALGORYTHM</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">getKey</span><span class="o">(</span><span class="n">password</span><span class="o">),</span> <span class="k">new</span> <span class="n">IvParameterSpec</span><span class="o">(</span><span class="n">iv</span><span class="o">));</span>
</span><span class='line'>            <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">content</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidAlgorithmParameterException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalBlockSizeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">BadPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">CloseableUtils</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Bitmap</span> <span class="nf">decrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">CipherInputStream</span> <span class="n">cis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">filePath</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">ENCRYPT_ALGORYTHM_MODE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">IvParameterSpec</span> <span class="n">ivspec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IvParameterSpec</span><span class="o">(</span><span class="n">initialVector</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">getKey</span><span class="o">(</span><span class="n">password</span><span class="o">),</span> <span class="n">ivspec</span><span class="o">);</span>
</span><span class='line'>            <span class="n">cis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CipherInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">,</span> <span class="n">cipher</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeStream</span><span class="o">(</span><span class="n">cis</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidAlgorithmParameterException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">CloseableUtils</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class='line'>            <span class="n">CloseableUtils</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">cis</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Key</span> <span class="nf">getKey</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">SecretKeySpec</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">ENCRYPT_ALGORYTHM</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>_</p>

<p>動作モードについて補足すると、</p>

<ul>
<li>ECB(Electronic CodeBook)電子符号表モード

<ul>
<li>単純にブロックごとに暗号化する。安全でなく使うべきでない。</li>
</ul>
</li>
<li>CTR(Counter)カウンターモード

<ul>
<li>各ブロックを初期値から1ずつ増加するカウンタの暗号化との排他的論理和で暗号化する。各ブロックを並列に処理できる。</li>
</ul>
</li>
<li>CBC(Cipher Block Chaining)暗号ブロック連鎖モード

<ul>
<li>ブロックを前ブロックの暗号化結果と排他的論理和を取ってから暗号化する。最初のブロックは初期ベクタという乱数と排他的論理和を取る。</li>
</ul>
</li>
<li>CFB(Cipher Feed Back)暗号フィードバックモード

<ul>
<li>前ブロックを暗号化してブロックとの排他的論理和をとって暗号文とする。最初のブロックは初期ベクタの暗号化との排他的論理和で暗号化する。</li>
</ul>
</li>
<li>OFB(Output Feed Back)出力フィードバックモード

<ul>
<li>初期ベクタに繰り返し暗号化処理して乱数ストリームを作り、これと平文との排他的論理和を暗号文とする。</li>
</ul>
</li>
</ul>


<p>ということらしいです。詳しくは<a href="http://akademeia.info/index.php?%A5%D6%A5%ED%A5%C3%A5%AF%B0%C5%B9%E6%A4%CE%CD%F8%CD%D1%A5%E2%A1%BC%A5%C9#pdc05fdd">こちら</a></p>

<h2>ベンチマーク</h2>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201212/madoka.jpg" alt="" />
うちに届いた年賀状の画像の暗号化にどれくらい時間がかかるのか計測してみました。</p>

<ul>
<li>サイズ: 864px * 480px</li>
<li>端末スペック: Xperia arc

<ul>
<li>OS  Google Android 2.3</li>
<li>CPU: Snapdragon 1GHz(MSM8255)</li>
<li>RAM: 512MB</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span>検証コード  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'><span class="n">ImageEncryptor</span><span class="o">.</span><span class="na">encrypt</span><span class="o">(</span><span class="n">filePath</span><span class="o">,</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="n">ImageEncryptor</span><span class="o">.</span><span class="na">decrypt</span><span class="o">(</span><span class="n">filePath</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">stop</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;DEBUG&quot;</span><span class="o">,</span> <span class="s">&quot;実行にかかった時間は &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">stop</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; ミリ秒です。&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>結果  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">01</span><span class="o">-</span><span class="mi">02</span> <span class="mi">14</span><span class="o">:</span><span class="mi">41</span><span class="o">:</span><span class="mf">02.026</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">DEBUG</span><span class="o">(</span><span class="mi">26043</span><span class="o">):</span> <span class="err">実行にかかった時間は</span> <span class="mi">1177</span> <span class="err">ミリ秒です。</span>
</span><span class='line'><span class="mi">01</span><span class="o">-</span><span class="mi">02</span> <span class="mi">14</span><span class="o">:</span><span class="mi">40</span><span class="o">:</span><span class="mf">17.496</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">DEBUG</span><span class="o">(</span><span class="mi">26043</span><span class="o">):</span> <span class="err">実行にかかった時間は</span> <span class="mi">1149</span> <span class="err">ミリ秒です。</span>
</span><span class='line'><span class="mi">01</span><span class="o">-</span><span class="mi">02</span> <span class="mi">14</span><span class="o">:</span><span class="mi">40</span><span class="o">:</span><span class="mf">38.406</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">DEBUG</span><span class="o">(</span><span class="mi">26043</span><span class="o">):</span> <span class="err">実行にかかった時間は</span> <span class="mi">1233</span> <span class="err">ミリ秒です。</span>
</span></code></pre></td></tr></table></div></figure>


<p>traceviewでも確認</p>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201212/trace.png" alt="" /></p>

<p>AESFastEngine.encryptBlockが7割、AESFastEngine.decryptBlockが3割くらいですね。</p>

<h2>まとめ</h2>

<p>暗号化にどれくらい時間かかるのかなと思ったけど、あまりサイズが大きくなければわりと実用的っぽい！</p>

<h2>追記</h2>

<p>パスワードの生成でアプリのインストール時間を見ていましたが、firstInstallTimeがAPI level 9からだったので、Androidバージョン2.1と2.2で使えませんでした。
なので別の方法を考えようと思っていたら、<a href="http://d.hatena.ne.jp/ockeghem/20120213/p1">書籍「Android Security」の暗号鍵生成方法には課題がある</a> という記事を見つけました。
というわけでランダムなbyte列を16個生成して128bitにすることにした。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">16</span><span class="o">];</span>
</span><span class='line'><span class="n">SecureRandom</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecureRandom</span><span class="o">();</span>
</span><span class='line'><span class="n">rand</span><span class="o">.</span><span class="na">nextBytes</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>_</p>

<p>このようにパスワードを生成します。
RandomじゃなくてSecureRandomを使った方が良いです。
またパスワードはStringで持つのではなくbyte[]で持っていた方が良いです。
SQLiteに保存するならBLOBで、SharedPreferenceならbase64にエンコードして書き込むようにします。</p>

<p><link href="http://fonts.googleapis.com/css?family=Cantarell" rel="stylesheet" type="text/css"></p>
]]></content>
  </entry>
  
</feed>
