<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-10-08T00:02:06+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Narive UI]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/10/07/native-ui/"/>
    <updated>2013-10-07T23:55:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/10/07/native-ui</id>
    <content type="html"><![CDATA[<p>人は何を見てアプリっぽいと感じるのだろうか。</p>

<div>
<img src="http://gifzo.net/jTEl4YmZqD.gif" style="float:left">
<img src="http://gifzo.net/BHFQmyIfFHF.gif" style="float:left">
</div>




<div style="clear:both">
<img src="http://gifzo.net/BWvNCrQFYfF.gif" style="float:left">
<img src="http://gifzo.net/BGth4C1Ok64.gif" style="float:left">
</div>




<div style="clear:both">
<img src="http://gifzo.net/lSwyh4fg6P.gif" style="float:left">
<img src="http://gifzo.net/68NrYQW2tB.gif" style="float:left">
</div>




<div style="clear:both">
<img src="http://gifzo.net/OKyqq1D9yD.gif" style="float:left">
<img src="http://gifzo.net/mtHN4UIAMZ.gif" style="float:left">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feed UI Patterns]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/10/06/feed-ui-patterns/"/>
    <updated>2013-10-06T17:50:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/10/06/feed-ui-patterns</id>
    <content type="html"><![CDATA[<p>タイムラインとかフィードを見る系でいい感じのアプリない？と聞かれたのでアプリのUIを眺めていました。</p>

<h3>Feedly</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201310/feedly.png" width="300px"></p>

<h3>foursquare</h3>

<p><img src="http://img1.mobile-patterns.com/img/full/1363118152348-2013-03-03%2020.23.25.png" width="300px"></p>

<h3>YouTube</h3>

<p><img src="http://img3.mobile-patterns.com/img/full/1363118191519-2013-03-03%2022.46.46.png" width="300px"></p>

<h3>SocialCam</h3>

<p><img src="http://25.media.tumblr.com/tumblr_lyr31slYLr1r750h1o1_500.png" width="300px"></p>

<h3>Path</h3>

<p><img src="http://31.media.tumblr.com/tumblr_lvifhic1MU1r750h1o1_500.jpg" width="300px"></p>

<h3>Pinterest</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201310/pinterest.png" width="300px"></p>

<h3>Gunosy</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201310/gunosy.png" width="300px"></p>

<p>メールアプリとか、RSSリーダーとか、そういう系のサービスでは未読が何件っていうのがあるけど、それ以外ではコンテンツに対するフィードバックか、外部サービスへの共有が一覧にあります。</p>

<p>誰が投稿したか、誰が投稿に対して反応したか、何時に投稿されたか、とか、何を最初に知らせたいのか、とか、写真を良く見せたいとか、そのサービスにとって何が重要なのかによって見せ方が変わると感じました。
いい感じとは一体どんな感じなのか詳しく聞いてみないと分からないですが、そんな感じでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3でmavenリポジトリをホストしてGradleでアップロードする]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/30/upload-to-s3/"/>
    <updated>2013-09-30T22:52:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/30/upload-to-s3</id>
    <content type="html"><![CDATA[<p>bucket, key, secretは外部ファイルに定義しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">configurations</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">deployerJars</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">deployerJars</span> <span class="s1">&#39;org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">uploadArchives</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mavenDeployer</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">configuration</span> <span class="o">=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">deployerJars</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">repository</span><span class="o">(</span><span class="nl">url:</span> <span class="s2">&quot;s3://${project.s3Bucket}/release&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">authentication</span><span class="o">(</span><span class="nl">userName:</span> <span class="n">project</span><span class="o">.</span><span class="na">s3Key</span><span class="o">,</span> <span class="nl">passphrase:</span> <span class="n">project</span><span class="o">.</span><span class="na">s3Secret</span><span class="o">)</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">pom</span><span class="o">.</span><span class="na">groupId</span> <span class="o">=</span> <span class="s1">&#39;com.rejasupotaro&#39;</span>
</span><span class='line'>            <span class="n">pom</span><span class="o">.</span><span class="na">artifactId</span> <span class="o">=</span> <span class="s1">&#39;mylibrary&#39;</span>
</span><span class='line'>            <span class="n">pom</span><span class="o">.</span><span class="na">version</span> <span class="o">=</span> <span class="s1">&#39;1.0.0&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで gradle uploadArchives すればアップロードすることができます。</p>

<p>ライブラリを使う側は以下のようにします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">url</span> <span class="s2">&quot;https://${project.s3Bucket}.s3.amazonaws.com/release&quot;</span>
</span><span class='line'>        <span class="n">credentials</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">username</span> <span class="n">project</span><span class="o">.</span><span class="na">s3Key</span>
</span><span class='line'>            <span class="n">password</span> <span class="n">project</span><span class="o">.</span><span class="na">s3Secret</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">dependencies</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">compile</span> <span class="s1">&#39;com.rejasupotaro:mylibrary:1.0.0&#39;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android開発を始めたばかりの僕が読みたかった本]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/28/android-books/"/>
    <updated>2013-09-28T00:42:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/28/android-books</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/reading.png" alt="" /></p>

<p>最近、スマートフォンアプリ開発をやる人増えてきてオススメの本ある？って聞かれること多くなってきたのですが、その人のバックグラウンドによるところも大きいと思うので、自分がAndroidアプリ開発を始めたときに読んでて役に立った、あるいは読んでおきたかったという目線で、良かった本をいくつか挙げようと思います。</p>

<h2>Effective Java</h2>

<p>Java界隈では多くの人が読んでいると思いますが、AndroidからJavaに入った人だと読んだことがない人もいると思います。
Javaを書く上でのエッセンスが詰め込まれているので、まだ読んでいない方は読むことをおすすめします。</p>

<h2>JUnit実践入門</h2>

<p>Androidだとテストが書かれないことが多いです。しかし、書いた方がデバッグの時間が短くなる上に保守もしやすくなりますし、テストを書きやすい構造を意識するようになって、上達が早くなりますし、設計も綺麗になります。(と思います)
僕も最初はテストを書かなかったのですが、もっと早くからテストを書いていればなと思っています。</p>

<h2>現場で使える[逆引き+実践]Androidプログラミングテクニック</h2>

<p>逆引き系の本なのですが、それだけでなく <strong>SQLiteの処理を高速化したい</strong> であったり、<strong>OutMemoryErrorをなんとか回避したいとか</strong> や、<strong>複数のアクティビティで共通の処理を、Template Methodパターンで実装したい/移譲で実装したい/Strategyパターンで実装したい</strong> など、デザインパターンや実践的なノウハウが詰まっている良い本でした。</p>

<h2>SMASHING Android UI</h2>

<p><a href="http://www.androiduipatterns.com/">Android // UI PATTERNS</a> というブログで有名なJuhani Lehtimakiさんの本です。最近翻訳されて日本で発売されました。
この本も、ただUIのコンポーネントの説明に終わるだけでなく、デザインとどう向き合うかや、ユーザーテストのやり方や、Androidプラットフォームの課題など、スマートフォンエンジニアにとって重要なデザインのことが学べる数少ない良書だと思います。</p>

<hr />

<p>ここから先はAndroidのさらに高度なプログラムを書きたい人向けです。</p>

<h2>Java言語で学ぶデザインパターン入門【マルチスレッド編】</h2>

<p>通信などの非同期処理、並列処理を書くときに、パフォーマンスの悪いプログラムを書いてしまったり、最悪デッドロックを起こしてしまったりしてしまわないために、特にこれからライブラリを書く人はこの本を読んだ方がいいです。
またライブラリを書かない人でもこの本を読んでおくと「ああ、あのパターンで実装されているのか！」みたいに、理解の助けになったりします。</p>

<h2>サクサク動く！Androidアプリ高速化プログラミング</h2>

<p>アプリの規模が大きくなってきてパフォーマンスに問題を感じるようになったり、局所的にプログラムを速くしたいというときにはこの本がおすすめです。デバッグ手法やレイアウトの最適化の話から、アセンブラやメモリアクセスやGCの話もあるので、読み物としても面白かったです。</p>

<hr />

<p>その他、本以外に参考にしているもの</p>

<h2><a href="https://twitter.com/androidniceties">@androidniceties</a></h2>

<p>Android Nicetiesのtumblrの更新をツイートしてくれます。
デザインを専門に学んでいなかった僕は、とにかく多くのパターンに触れなければと思っています。デザインは0から生まれるものではなく、過去の事例であったり、自然界に存在する美しいものの模倣から生まれるみたいな話がありますし、なにより実績のあるアプリのデザインは僕が考えだしたUIより質が高いです。</p>

<h2><a href="http://www.androidviews.net/">ANDROIDVIEWS</a></h2>

<p>あのアプリの実装オシャレだなとか思ったら、ここに載っていたりします。
自分で実装するときの助けになったりとか、ライブラリを使うことで簡単に実装できたりします。見てるだけでも楽しいです。</p>

<h2><a href="https://github.com/square">Square</a></h2>

<p>決済サービスのあのスクエアのGitHubアカウントです。dagger、otto、picasso、fest-androidなど、これらの有名なライブラリも実はこのスクエア製で、インタフェースの素晴らしさも去ることながら、プログラムがとても綺麗で、ある意味書籍よりも勉強になると思います。</p>

<hr />

<h2>まとめ</h2>

<p>こんなに一度に紹介されても読むのはたいへん…ですが、まずは調べてみて興味を持ったところから読んでみるといいと思います。
スマートフォンエンジニアはデザインから低レイヤまで幅広い知識を要求されます(といってもエンジニアリングってどの分野もそうなのですが)が、まずは自分の好きを伸ばして、それからもっと良いアプリを作るために、足りないところを補っていくというやり方がいいのかなと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[きんモザのアリスのgif画像を取得するAPIを使ったAndroidアプリを作った]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/26/alice-api/"/>
    <updated>2013-09-26T01:09:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/26/alice-api</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takiguchi0817/KinMoza/tree/master">
<img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/alice_github.png">
</a></p>

<p>See also</p>

<ul>
<li><a href="http://mogashi.hateblo.jp/entry/2013/09/24/000619">きんモザのアリスのgif画像を取得するAPIを作った</a></li>
<li><a href="http://pastak.hatenablog.com/entry/2013/09/25/004437">きんモザのアリスのgif画像を取得するAPIを利用したGoogle Chrome拡張を作った</a></li>
<li><a href="http://moroya.hatenablog.jp/entry/2013/09/25/224446">きんモザのアリスAPIを使って、好きなアリスを無限ループ視聴出来るWebアプリを作った</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::ASIA 2013 感想]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/22/yapcasia-2013/"/>
    <updated>2013-09-22T11:14:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/22/yapcasia-2013</id>
    <content type="html"><![CDATA[<p>感想を書こうと思ったけどスライドを並べたらかなり長くなってしまったので別のところで書きます。</p>

<h1>まとめ</h1>

<ul>
<li><a href="http://gihyo.jp/news/report/01/yapcasia2013/0000">YAPC::Asia Tokyo 2013 前夜祭レポート</a></li>
<li><a href="http://gihyo.jp/news/report/01/yapcasia2013/0001">YAPC::Asia Tokyo 2013 1日目レポート</a></li>
<li><a href="http://gihyo.jp/news/report/01/yapcasia2013/0002">YAPC::Asia Tokyo 2013 2日目レポート</a></li>
</ul>


<h1>一日目</h1>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26368940" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/kazeburo/yapc2013psgi-plack" title="How to build a High Performance PSGI/Plack Server " target="_blank">How to build a High Performance PSGI/Plack Server </a> </strong> from <strong><a href="http://www.slideshare.net/kazeburo" target="_blank">Masahiro Nagano</a></strong> </div></p>

<p><a href="http://songmu.github.io/slides/yapc-asia2013/">今時のカジュアルなデータベース関連開発</a></p>

<div style="width: 60%">
<script async class="speakerdeck-embed" data-id="552f7d1003e60131954556f7ac4f018a" data-ratio="1.2994923857868" src="http://takiguchi0817.github.com//speakerdeck.com/assets/embed.js"></script>
</div>




<iframe src="http://www.slideshare.net/slideshow/embed_code/26371335" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/DaisukeTamada/perl-26371335" title="大規模Perl初心者研修を支える技術" target="_blank">大規模Perl初心者研修を支える技術</a> </strong> from <strong><a href="http://www.slideshare.net/DaisukeTamada" target="_blank">Daisuke Tamada</a></strong> </div></p>

<p><a href="http://kazuph.github.io/presentation/yapc_vim_2013_github/#/">Vim実践入門 Perl編</a></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26371230" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/egopro/yapc2013talk" title="「アレ」と Perl で AWS を - YAPC::Asia Tokyo 2013" target="_blank">「アレ」と Perl で AWS を - YAPC::Asia Tokyo 2013</a> </strong> from <strong><a href="http://www.slideshare.net/egopro" target="_blank">Eikichi Gotoh</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26371154" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/xtetsuji/apachemodperl-yapcasia" title="Apacheの展望とmod_perlの超絶技巧 #yapcasia" target="_blank">Apacheの展望とmod_perlの超絶技巧 #yapcasia</a> </strong> from <strong><a href="http://www.slideshare.net/xtetsuji" target="_blank">Tetsuji Ogata</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26371482" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/TasukuSuenaga/yapc2013" title="0から学んだポストモダンPerl @ YAPC::Asia Tokyo 2013" target="_blank">0から学んだポストモダンPerl @ YAPC::Asia Tokyo 2013</a> </strong> from <strong><a href="http://www.slideshare.net/TasukuSuenaga" target="_blank">Tasuku Suenaga</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26398925" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/hiratara/types-andperl-language" title="Types and perl language" target="_blank">Types and perl language</a> </strong> from <strong><a href="http://www.slideshare.net/hiratara" target="_blank">Masahiro Honma</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26371522" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/moznion/yapc2013-26371522" title="YAPC::Asia 2013 - CPAN Testers Reports の情報を上手に使う" target="_blank">YAPC::Asia 2013 - CPAN Testers Reports の情報を上手に使う</a> </strong> from <strong><a href="http://www.slideshare.net/moznion" target="_blank">moznion</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26386299" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/DQNEO/git-yapcasia2013" title="やさしいGitの内部構造 - yapcasia2013" target="_blank">やさしいGitの内部構造 - yapcasia2013</a> </strong> from <strong><a href="http://www.slideshare.net/DQNEO" target="_blank">DQNEO</a></strong> </div></p>

<div style="width: 60%">
<script async class="speakerdeck-embed" data-id="192c25d003f30131e2af62034c419aee" data-ratio="1.33333333333333" src="http://takiguchi0817.github.com//speakerdeck.com/assets/embed.js"></script>
</div>




<div style="width: 60%">
<script async class="speakerdeck-embed" data-id="fe0568a0047501310e2442095ef5c3d5" data-ratio="1.77777777777778" src="http://takiguchi0817.github.com//speakerdeck.com/assets/embed.js"></script>
</div>




<div style="width: 60%">
<script async class="speakerdeck-embed" data-id="512b43d0044201319a7e5a401ba27687" data-ratio="1.33333333333333" src="http://takiguchi0817.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<h1>二日目</h1>

<div style="width: 60%">
<script async class="speakerdeck-embed" data-id="51b4379004a301319a7f5a401ba27687" data-ratio="1.33333333333333" src="http://takiguchi0817.github.com//speakerdeck.com/assets/embed.js"></script>
</div>


<h2><a href="http://dl.dropboxusercontent.com/u/224433/YAPC2013/index.html">社内ISUCONのつくりかた</a></h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26401694" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/horiyasu/programming-aws-with-perl-at" title="Programming AWS with Perl at YAPC::Asia 2013" target="_blank">Programming AWS with Perl at YAPC::Asia 2013</a> </strong> from <strong><a href="http://www.slideshare.net/horiyasu" target="_blank">Yasuhiro Horiuchi</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26403213" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/goccy/yapc2013-26403213" title="これからのPerlプロダクトのかたち(YAPC::Asia 2013)" target="_blank">これからのPerlプロダクトのかたち(YAPC::Asia 2013)</a> </strong> from <strong><a href="http://www.slideshare.net/goccy" target="_blank">goccy</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26401998" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/hidek/perl-26401998" title="Perl で作るメディアストリーミングサーバー" target="_blank">Perl で作るメディアストリーミングサーバー</a> </strong> from <strong><a href="http://www.slideshare.net/hidek" target="_blank">Hideo Kimura</a></strong> </div></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26399483" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/mishikawa55/2013-yapc" title="フロントエンド制作向けビルド ツールGruntがバックエンド 開発でも意外と使える！ @M_Ishikawa #yapcasia" target="_blank">フロントエンド制作向けビルド ツールGruntがバックエンド 開発でも意外と使える！ @M_Ishikawa #yapcasia</a> </strong> from <strong><a href="http://www.slideshare.net/mishikawa55" target="_blank">Masayuki Ishikawa</a></strong> </div></p>

<h2>YAPC::Asia Tokyo 2013 特別座談会 「Rubyの良いところ語ってください 〜そんなPerlで大丈夫か？〜」</h2>

<blockquote class="twitter-tweet"><p>Perlのカンファレンスの様子です <a href="http://t.co/okpblHNgLO">pic.twitter.com/okpblHNgLO</a></p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/381277626326728704">September 21, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>




<div style="width: 60%">
<script async class="speakerdeck-embed" data-id="b1ccfdd004eb0131dc105aad22485907" data-ratio="1.2896725440806" src="http://takiguchi0817.github.com//speakerdeck.com/assets/embed.js"></script>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モヒートはモッキングフレームワークで味はとても美味しい]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/19/android-test/"/>
    <updated>2013-09-19T22:40:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/19/android-test</id>
    <content type="html"><![CDATA[<h1>mojito (モヒート)</h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mojito.jpg" alt="" /></p>

<p>モヒートは、キューバ・ハバナ発祥のカクテルの一つ。<br/>
由来は、新大陸として注目されていたアメリカ諸国から得られる富をコントロールする名目で、英国女王エリザベス1世が、スペイン領の都市を略奪する海賊達の手助けをしていた16世紀後半、海賊フランシス・ドレイクの部下であるリチャード・ドレイクが、1586年にモヒートの前身となる飲み物「ドラケ(draque)」をキューバの人々へ伝えた、という説が有力。<br/>
ラムをベースにソーダ、ライム、砂糖、ミントを加えたもの。ミントとソーダの清涼感が暑い夏にぴったりな「夏と言えば」の定番カクテル。</p>

<p>アーネスト・ヘミングウェイが好んで飲んでいた話は有名である。</p>

<h1><a href="http://code.google.com/p/mockito/">mockito</a> (モヒート)</h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mockito.jpg" alt="" /></p>

<p>モヒートは、Javaのモックライブラリ。<br/>
モックライブラリは他にもいろいろあるけど <a href="http://code.google.com/p/mockito/wiki/MockitoVSEasyMock">EasyMockと比べても</a> mockitoの方が簡潔に書ける。<br/>
導入するとモヒートを飲んだあとのようにスカッとする。</p>

<p><strong>&#8220;Mockito is a mocking framework that tastes really good!&#8221;</strong> とのこと。(公式)</p>

<h1>mockitoナシ</h1>

<p>今までのやり方。まずモッククラスを定義して、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.Network</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.NetworkResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.Request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.android.volley.VolleyError</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockNetwork</span> <span class="kd">implements</span> <span class="n">Network</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">mFakeResponseData</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFakeResponseData</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mFakeResponseData</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">NetworkResponse</span> <span class="nf">performRequest</span><span class="o">(</span><span class="n">Request</span><span class="o">&lt;?&gt;</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">VolleyError</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">NetworkResponse</span><span class="o">(</span><span class="n">mFakeResponseData</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>テストするときに返したいデータをセットする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">MockNetwork</span> <span class="n">mockNetwork</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MockNetwork</span><span class="o">();</span>
</span><span class='line'><span class="n">mockNetwork</span><span class="o">.</span><span class="na">setFakeResponseData</span><span class="o">(</span><span class="s">&quot;{\&quot;code\&quot;:200}&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h1>mockitoアリ</h1>

<p>このメソッドが呼ばれたときにこれを返す、とするだけ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Network</span> <span class="n">mockNetwork</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Network</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="n">mockNetwork</span><span class="o">.</span><span class="na">performRequest</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Request</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span>
</span><span class='line'>        <span class="n">thenReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">NetworkResponse</span><span class="o">(</span><span class="s">&quot;{\&quot;code\&quot;:200}&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>インタフェースが統一されることによって、次にテストを書く人が「MockNetworkというクラスがあるらしい、ふむふむ、setFakeResponseDataに渡したbyte列がperformRequestで返ってくるのか」と調べる時間を省くことができる。</p>

<p>特定のオブジェクトの一部のメソッドの振る舞いを変えるときもカンタン。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">doReturn</span><span class="o">(</span><span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span> <span class="o">{</span> <span class="n">put</span><span class="o">(</span><span class="s2">&quot;fake&quot;</span><span class="o">,</span> <span class="s2">&quot;foo&quot;</span><span class="o">);</span> <span class="o">}</span> <span class="o">}).</span><span class="na">when</span><span class="o">(</span><span class="n">spyRequest</span><span class="o">).</span><span class="na">getHeaders</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみにdependencyを解決できなかったので、jarを落として ./src/instrumentTest/libs/ に配置して以下のようにした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">instrumentTestCompile</span> <span class="nf">fileTree</span><span class="o">(</span><span class="nl">dir:</span> <span class="s1">&#39;./src/instrumentTest/libs&#39;</span><span class="o">,</span> <span class="nl">include:</span> <span class="s1">&#39;*.jar&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>モヒートにギョームでもプライベートでもお世話になってる。</p>

<hr />

<p>↑ここまでモヒートの話↑<br/>
↓ここまで他のフレームワークの紹介↓</p>

<h1><a href="http://square.github.io/fest-android/">Fest Android</a></h1>

<p>安心と信頼の <a href="https://github.com/square">Square</a> 製テストフレームワーク。(Squareが公開してるライブラリは本当にどれもレベルが高い)<br/>
元ネタは <a href="http://fest.easytesting.org/">Fixtures for Easy Software Testing</a> のAndroid拡張となっている。</p>

<h3>REGULAR JUNIT</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="n">View</span><span class="o">.</span><span class="na">VISIBLE</span><span class="o">,</span> <span class="n">layout</span><span class="o">.</span><span class="na">getVisibility</span><span class="o">());</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="n">VERTICAL</span><span class="o">,</span> <span class="n">layout</span><span class="o">.</span><span class="na">getOrientation</span><span class="o">());</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="n">layout</span><span class="o">.</span><span class="na">getChildCount</span><span class="o">());</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="n">SHOW_DIVIDERS_MIDDLE</span><span class="o">,</span> <span class="n">layout</span><span class="o">.</span><span class="na">getShowDividers</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>FEST ANDROID</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">layout</span><span class="o">).</span><span class="na">isVisible</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">isVertical</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">hasChildCount</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">hasShowDividers</span><span class="o">(</span><span class="n">SHOW_DIVIDERS_MIDDLE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1><a href="https://github.com/mttkay/calculon">calculon</a></h1>

<p><img src="https://raw.github.com/mttkay/calculon/master/assets/calculon.png" alt="" /></p>

<p>こちらも便利メソッドを提供している。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// direct assertion on current activity</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">().</span><span class="na">inPortraitMode</span><span class="o">();</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">().</span><span class="na">viewExists</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">launch_bar_button</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// assert specific condition on current activity</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">().</span><span class="na">satisfies</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Activity</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="n">Activity</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">target</span><span class="o">.</span><span class="na">isTaskRoot</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fest Androidとの違いは、calculonはStoryTestを提供しており、画面遷移を伴うストーリーをテストとして実行することができる。</p>

<h1>Robolectric + Spock</h1>

<p>この動画で紹介されているGroovyの元祖PowerAssert系テストフレームワーク <a href="https://code.google.com/p/spock/">Spock</a> を頑張ってAndroidで動かすというもの。</p>

<iframe width="420" height="315" src="http://takiguchi0817.github.com//www.youtube.com/embed/aDoQxqO_6rI" frameborder="0" allowfullscreen></iframe>


<p>RobolectricはAndroidのテストをJVM上で実行するためのフレームワークで、AndroidのクラスをJavaのShadowクラスに変換して実行するしくみになっている。
JVMでテストが実行できるようになるということは、Groovyでもテストが書けるということなので、Robolectricを導入すればSpockも使えるようになる。</p>

<h3>Robolectric</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDialogContent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">MainActivity</span> <span class="n">mainActivity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MainActivity</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">mainActivity</span><span class="o">.</span><span class="na">button</span><span class="o">.</span><span class="na">performClick</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ShadowAlertDialog</span> <span class="n">dialog</span> <span class="o">=</span> <span class="o">(</span><span class="n">ShadowAlertDialog</span><span class="o">)</span> <span class="n">Robolectric</span><span class="o">.</span><span class="na">shadowOf</span><span class="o">(</span><span class="n">ShadowDialog</span><span class="o">.</span><span class="na">getLatestDialog</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;title&quot;</span><span class="o">,</span> <span class="n">dialog</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Ok&quot;</span><span class="o">,</span> <span class="n">dialog</span><span class="o">.</span><span class="na">getButton</span><span class="o">(</span><span class="n">AlertDialog</span><span class="o">.</span><span class="na">BUTTON_POSITIVE</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Cancel&quot;</span><span class="o">,</span> <span class="n">dialog</span><span class="o">.</span><span class="na">getButton</span><span class="o">(</span><span class="n">AlertDialog</span><span class="o">.</span><span class="na">BUTTON_NEGATIVE</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Dismiss&quot;</span><span class="o">,</span> <span class="n">dialog</span><span class="o">.</span><span class="na">getButton</span><span class="o">(</span><span class="n">AlertDialog</span><span class="o">.</span><span class="na">BUTTON_NEUTRAL</span><span class="o">).</span><span class="na">getText</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">&quot;Dialog Content&quot;</span><span class="o">,</span> <span class="n">dialog</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Robolectric + Spock</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="s2">&quot;should displayed dialog&#39;s button has good text&quot;</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nl">given:</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">mainActivity</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MainActivity</span><span class="o">()</span>
</span><span class='line'>    <span class="n">mainActivity</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="kc">null</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">when:</span>
</span><span class='line'>    <span class="n">mainActivity</span><span class="o">.</span><span class="na">button</span><span class="o">.</span><span class="na">performClick</span><span class="o">()</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">dialog</span> <span class="o">=</span> <span class="o">(</span><span class="n">ShadowAlertDialog</span><span class="o">)</span> <span class="n">Robolectric</span><span class="o">.</span><span class="na">shadowOf</span><span class="o">(</span><span class="n">ShadowDialog</span><span class="o">.</span><span class="na">getLatestDialog</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">then:</span>
</span><span class='line'>    <span class="n">dialog</span><span class="o">.</span><span class="na">getButton</span><span class="o">(</span><span class="n">number</span><span class="o">).</span><span class="na">text</span> <span class="o">==</span> <span class="n">value</span>
</span><span class='line'>
</span><span class='line'>    <span class="nl">where:</span>
</span><span class='line'>    <span class="n">number</span>                      <span class="o">|</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">AlertDialog</span><span class="o">.</span><span class="na">BUTTON_POSITIVE</span> <span class="o">|</span> <span class="s2">&quot;Ok&quot;</span>
</span><span class='line'>    <span class="n">AlertDialog</span><span class="o">.</span><span class="na">BUTTON_NEGATIVE</span> <span class="o">|</span> <span class="s2">&quot;Cancel&quot;</span>
</span><span class='line'>    <span class="n">AlertDialog</span><span class="o">.</span><span class="na">BUTTON_NEUTRAL</span>  <span class="o">|</span> <span class="s2">&quot;Dismiss&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>導入コスト、学習コスト、効果を鑑みつつ、引き続きテスティングフレームワークをテイスティングしていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[デザインリサーチをするにあたって]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/17/interaction-design/"/>
    <updated>2013-09-17T23:52:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/17/interaction-design</id>
    <content type="html"><![CDATA[<p>今まではいかに綺麗なプログラムを書くかっていうことに時間に割いてきたのだけど、最近デザインの重要性をひしひしと感じるようになり、本当にユーザーが求めるものって何なのか知りたくて、デザインリサーチをすることになりました。
そこで、本を読むなどして調べたことをまとめました。</p>

<h1>デザインリサーチとは</h1>

<p>様々な方法論を用いて、製品やサービスの現在、または将来のユーザーや環境を詳しく調査し、分析を行うことである。</p>

<h2>わざわざデザインリサーチをする理由</h2>

<p>&#8220;エンジニア、デザイナー、営業担当部の人たちが、自分たちは客にとって役立つことを知っていると思い込んでいる。特別な観察力と経験のあるデザイナーならこれは本当かもしれないが、そんな人たちは非常にまれで、しかも成功した人々は、注意深い観察と、特定の文化や環境にいる人々の理解とによって、自分たちの感を「訓練してきた」だけなのです。&#8221;</p>

<p>デザインって才能がある人しか出来ないものだと思っていたけど、逆に訓練である程度できるようになるものみたいです。
で、デザインリサーチをする理由としては、</p>

<ul>
<li>潜在的な仮説を見つけるため</li>
<li>調査した結果を注意深く分析し、いろんな方向を考え、パターンを探すこと</li>
<li>デザイナーが「共感」を持つことで、ユーザーがいらいらしたり、困惑したり、混乱したりするような困った状況を避ける</li>
</ul>


<p>ということらしい。</p>

<h1>デザインリサーチの実施</h1>

<h2>デザインリサーチ3つの規則</h2>

<ul>
<li>自分で現場に行く</li>
<li>自分で人と話す</li>
<li>自分で記録に残す</li>
</ul>


<h2>してはいけないこと</h2>

<ul>
<li>フォーカスグループを作る</li>
<li>主張の強いユーザーによって、自然な結果が狂わされてしまうがある</li>
<li>他の人が行った調査結果に頼る</li>
<li>無意識のバイアスがかかっていたり、自分の欲しい視点と違うところに焦点が当たっているころがある</li>
<li>ビデオテープや口述筆記に頼る</li>
<li>音声やビデオを見聞きし直すのは面倒な作業であり、めったに行われない</li>
</ul>


<h2>倫理的な調査</h2>

<ul>
<li>調査対象者の同意書をとる</li>
<li>調査のリスクとメリットを説明する</li>
<li>調査対象者のプライバシーを尊重する</li>
<li>調査対象者の時間に報いる</li>
<li>調査対象者に求められたら、データや結果を提供する</li>
</ul>


<p>ってあるのだけど、実際会社でやるとしたら法務を通した方がいいですね。</p>

<h2>何に注目し、どのようにそれを記録するか</h2>

<p>実際にデザインリサーチをすると多くの情報を受けるのだけど、その中でも本当に不可欠なことを観察しなければならない。観察するときにある軸みたいなものがあると良くて、たとえば、ハントステートメント。ハントステートメントは、デザイナーの調査範囲を狭めるためのツールで、Yを可能にするためにXを調査する、という形式を取ることが多い。Xにはアクティビティが記述され、Yにはプロジェクトのゴールか調査対象者の範囲が記述される。ハントステートメントが具体的であればあるほどよいとされている。
ということでデザインリサーチの前にハントステートメントを決めておこう。</p>

<h3>パターンと現象</h3>

<p>なにはともあれ、現場で一番探すべきものは「パターン」である。これは、振る舞いのパターン、話のパターン、質問に対する返答のパターンなど、なんども　繰り返される行為や考え方のことである。以下のルールに基づいて観察するとよいとのこと。</p>

<ul>
<li>一度見聞きしたものは、現象である。記録すること。</li>
<li>二度見聞きしたものは、偶然か、もしくはパターンの始まりである。記録すること。</li>
<li>三度見聞きしたものは、パターンである。記録すること。</li>
</ul>


<h3>フィールドノート</h3>

<p>現場で観察結果やキーフレーズを書き留めることは不可欠である。紙のノートはノートPCとかよりも気が散らず一番よい。フィールドノートではすべて、書き出しに、調査担当者、日時、場所を書くべきである。こうした事項は、後に細部を思い出す手がかりとなるので、とても大切である。
ノートに記録すべき事柄は以下に挙げる。</p>

<ul>
<li>声の強調部分やトーンを正格に記した言葉の抜粋。</li>
<li>コメントや詳細を記した現場のスケッチ。</li>
<li>あらゆるアクティビティの履歴、順番、状況。</li>
</ul>


<h2>調査手法</h2>

<p>何に注目し、どのように記録するかを見たので、次に、調査の手法についていくつか挙げる。ケースによって効果的な手法を選ぶのがよい。</p>

<h3>観察</h3>

<p>デザインリサーチの調査手法で一番簡単で実のあるものといえば、人々が行っている様子を観察することだろう。デザイナーは、密かに観察したり、人々と対話したり、調査対象者について回って彼らが行っていることのやり方や理由を尋ねたりするとよい。</p>

<ul>
<li>静観</li>
<li>尾行</li>
<li>文脈的調査</li>
<li>覆面調査</li>
</ul>


<p>観察をするときは、おしゃれをしないほうがよい。観察者は環境に溶け込んで、周囲から観察されることがないようにするのが大切だからである。観察者は環境に合った、中立的な、特徴のない服を着るべきだ。観察者が溶け込めば溶け込むほど、その他大勢の一部となる。</p>

<h3>インタビュー</h3>

<p>人に話しかけて話を聞くのは、その人の姿勢や経験を知るのによい方法である。しかし、人間が口で行っていることと実際にしていることには、たいてい大きな違いがあるので、注意すべきである。ユーザーに話しかける方法を、以下にいくつか挙げる。</p>

<ul>
<li>本人による口述</li>
<li>非フォーカスグループ</li>
<li>ロールプレイ</li>
<li>極端なユーザーへのインタビュー</li>
<li>仕事机、ポーチ、鞄の観察</li>
</ul>


<p>デザイナーは、偏見なく中立的であるべきで、話を聞く前から答えが分かっていると思い込んではいけない。「はい」か「いいえ」で答えられる質問をなるべく避けて、なぜ、何が、どのように、というような質問をして、話や答えを引き出すことに焦点を当てるべきである。</p>

<h3>アクティビティ</h3>

<p>このプロセスをつかえば、人々の感情を引き出し、主題についての人々の考えを理解することができる。</p>

<ul>
<li>コラージュの作成</li>
<li>モデルの作成</li>
<li>自己経験のスエッチ</li>
<li>自己報告</li>
</ul>


<h2>調査結果が示唆するデザインの意味</h2>

<p>調査が終わると、メモ、写真、考えなどの、ばらばらのデータのかたまりが手元に残る訳なのだけど、こうしたデータは、使える情報の形に蒸留されなければ無駄である。
まず、必要な作業は、全データをスプレットシート、表、大きなホワイトボードの上に貼った付箋など、何らかの順番で並べてみることだ。そのあとでデータを意味のあるクラスタにまとめ、形にして、考察できるようにする。
1つのアプローチとして、データを概念的なモデルにするやり方がある。これをリサーチモデルというのだけど、これにも様々な種類があって、</p>

<ul>
<li>直線型フロー</li>
<li>循環型フロー</li>
<li>蜘蛛状ダイアグラム</li>
<li>ベン図</li>
<li>2x2のマトリックス</li>
<li>マップ</li>
</ul>


<p>具体的にインタラクションデザインをする際には他にもペルソナ、シナリオ、スケッチとモデル、タスク分析、タスクフロー、ユースケース、ムードボード、ワイヤーフレーム、プロトタイプ、テストなどありますが、あまり一度に詰め込んでも覚えられる気がしないので、一旦これくらいにします。
何事もやってみるのが大切だと思うので、とりあえずインタビュりますが一回やってみて、良かったこと、良くなかったことなどを考えようと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genymotion速かった]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/06/genymotion/"/>
    <updated>2013-09-06T23:31:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/06/genymotion</id>
    <content type="html"><![CDATA[<p>AndroVMがいつの間にかGenymotionに名前変わってました。</p>

<h3><a href="http://www.genymotion.com/">Genymotion</a> - BOOST YOUR APP TESTING! Simple, practical and effective.</h3>

<p><img src="http://www.genymotion.com/assets/genymotion-fits-in-your-developping-environment-.png" alt="" /></p>

<p>「x86エミュレータとそんなに変わらないんでしょ」と思っていましたが、これを機にインストールして動かしてみたらサックサクのヌルヌルで驚きました。<br/>
もしかして、実機より速いのでは？と思って2、3000行の比較的小規模なライブラリでconnectedInstrumentTestを実行して、その実行時間を比較してみました。
結果は環境によって結構変わると思うので、あくまで目安で。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/genybench.png" alt="" /></p>

<h3>実機よりも速かった</h3>

<p>しかもエミュレータだとGoogle Playのアプリが落とせなかったりするのですが、Googleアカウントを登録して同期することもできるし、アプリを落として実機より軽快な環境で遊ぶこともできます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/download.png" alt="" /></p>

<p>ポチポチ押すだけで5分くらいあればインストールできるので、面倒くさがりな僕でもインストールできました。</p>

<p>今回のケースだとそんなにですが、1回のテストで20分かかる環境だとテストが速く終わると相当嬉しみがあるので、
しばらく使ってみて良さそうだったら、本番環境のJenkinsのAndroidエミュレータをGenymotionに置き換えるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Casual Talks #1]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/08/31/android-casual-talks-1/"/>
    <updated>2013-08-31T17:44:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/08/31/android-casual-talks-1</id>
    <content type="html"><![CDATA[<h1>はじめに</h1>

<p>Androidの開発をしていて、</p>

<ul>
<li>WebとiOSとAndroidで足並み揃えるのどうするんだろう</li>
<li>プラットフォーム間のUIの統一についてはどう考えたらいいんだろう</li>
<li>他のアプリではA/Bテストとかやってるのかな</li>
<li>PCからスマホウェブでは全機能を移植するけど、その流れでアプリでも全機能使えるようにって会社やユーザから言われるけどどうしたらいいのか</li>
<li>PCからネイティブアプリでは機能を削ってシンプルにってアプリ開発者は言うけど、削られた機能はどこにいくのか</li>
<li>多くのサービスでスマホやタブレットのUUが伸びてその分PCのPVが下がってると思うけど、スマホ時代の広告のうまい組み込み方とか売り方について話を聞きたい</li>
<li>WebViewでアプリを組むとステートが複雑になったり標準的なユーザ体験を提供するのが難しい</li>
<li>ブランチ管理でgit-flowを導入しようかと思ったけど、管理するコストと考えるとあれかなと思ったのでGitHub Flowでやっているけど、他社ではどうしてるのか</li>
<li>大規模でも破綻しない設計とは(「MVCを意識して書く」だと個人の技量に左右されるしスケールしない感じがする)</li>
<li>効果的なテストとメトリクス計測(取るだけじゃなくて改善するところも含めて)ってどうするのがいいんだろう</li>
<li>継続的にパフォーマンス計測をしたいけど、Jenkinsでどう実現したらいいのだろう</li>
<li>レビューで叩かれるとへこむ</li>
<li>デザイナーがみんなiPhoneユーザだ</li>
<li>むしろエンジニアもMacとiPhoneを使っている人が多くて、Androidは現代のIEって言われる</li>
</ul>


<p>など、悩むことが多いです。</p>

<p>こういう技術書にのっていない話は人に聞くのが一番早いかなと思っていますが、今までAndroid界隈では集まってこういう話をする場がなかったように思います。(僕が知らないだけであったのかもしれませんが)<br/>
それでこの度、カジュアルに情報交換をしたいなと思って、<a href="http://atnd.org/events/41600">Android Casual Talks #1</a>を開きました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual0.png" width="600px"></p>

<p>内容については「ぶっちゃけ過ぎてるんであんまりツイートしないでください」っていうのもあったので、さらっと概要だけまとめました。</p>

<h1>1. クックパッドの開発環境について</h1>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual4.jpg" width="600px"></p>

<p>僕はAndroid Studio + Gradleの導入とか、リポジトリ管理とか、ビルドの設定とか、人が増えてもスケールしそうな開発の話をしました。</p>

<h1>2. 品質を保つための組織的な取り組みと人に依存しないテスト</h1>

<p>メーカーの開発の品質は高いと伺っていたので、品質への取り組みについてお話いただきました。<br/>
いわゆるウォーターフォールモデルだけど、1週間のイテレーションを回して目標値への達成度の確認と是正を行っていて、さすがにしっかり管理をしているなと思いました。<br/>
メトリクスを細かく取っていたのも印象的でした。</p>

<h1>3. グリーにJenkinsを導入して2年半でおこった事</h1>

<p>Jenkinsの運用の話＆エモ枠としてお話いただきました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25716362" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/okazaki/2013-0829-jenkins-for-cookpad-android" title="2013 08-29 jenkins for cookpad android" target="_blank">2013 08-29 jenkins for cookpad android</a> </strong> from <strong><a href="http://www.slideshare.net/okazaki" target="_blank">Takayuki Okazaki</a></strong> </div></p>

<ul>
<li><p>変えないことは大きなリスク</p>

<ul>
<li>変えないと、技術的負債激増</li>
<li>ある時点から技術的負債のために働くことになる</li>
</ul>
</li>
<li><p>変えるのはツールではなくワークフロー</p>

<ul>
<li>ツールの導入で解決 -> 仕組みの改善で解決</li>
<li>あるべき論、精神論 -> しくみ、制度化</li>
</ul>
</li>
</ul>


<p>いい話でした。詳しくはスライドを御覧ください。</p>

<h1>4. injectionの基礎（android編）</h1>

<p>イベント開催を知った師匠が話してくれました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual2.png" width="600px"></p>

<p>DIフレームワークの基礎ということで、依存性の注入や制御の反転について、あるチャットアプリの例を通して、仕様が変わっていく中でプログラムを綺麗な状態に保ちながらテストをしやすくする方法について話していただきました。</p>

<p>社内ではひっそりと<a href="https://github.com/roboguice/roboguice">RoboGuice</a>を使っていたのですが、パフォーマンスとかで<a href="http://square.github.io/dagger/">Dagger</a>の方が良いみたいな流れが最近あるので、そっちに移行したいなと思いました。</p>

<h1>5. 意外と役立つ？Android Open Source Projectのすすめ</h1>

<p>Androidアプリのデバッグ手法について話していただきました。</p>

<ul>
<li><p>アプリ開発で悩んだときはどうしますか？</p>

<ul>
<li>ググる</li>
<li>Android Developersで調べる</li>
<li>色々試す</li>
</ul>
</li>
<li><p>上の方法で解決できないときはどうしますか？</p>

<ul>
<li>他のアプリを逆コンパイル</li>
<li>明日考える</li>
<li>仕様をドロップ</li>
</ul>
</li>
</ul>


<p>でも仕様を諦めるのはエンジニアとして負けた気分になる。そこで、<a href="https://sites.google.com/site/devcollaboration/codesearch">{OpenGrok</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual3.png" width="600px"></p>

<p>OpenGrokは、Androidのソースコードを簡単に見るために作られた検索エンジンで、Full Search、Definition、Symbol、File Path、Historyなど絞り込んで検索をすることができるみたいです。<br/>
ちょっと調べ物をするのに便利そうでした。</p>

<h1>6. アプリのリニューアルとその効果測定について</h1>

<p>Android2系のデザインで作られた黒背景に白文字の「葬式UI」だったPixivアプリをリニューアルしたときの反響と効果測定についてお話いただきました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual5.png" width="600px"></p>

<p>リニューアルをしたときにはGoogle Playで☆1の嵐が吹き荒れて…</p>

<ul>
<li>「最悪。アップデート前の方がいいです。」</li>
<li>「凄まじいまでの改悪、なぜこれでゴーが出たのか」</li>
</ul>


<p><strong>開発者「もう許してくださいって思いました。」</strong></p>

<p>ただ定性的な意見だけではなく、定量的なデータからこのリニューアルはどうだったのかというと、操作性の向上を図ったことにより、</p>

<ul>
<li>ブックマークのイベント数：4.7倍</li>
<li>評価ボタンのイベント数：9.5倍</li>
</ul>


<p>となり、順調にユーザ数も増加しているそうです。<br/>
レビューと合わせて計測することの大切さを言っていました。</p>

<h1>おわりに</h1>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual1.png" width="600px"></p>

<p>タイ料理が美味しかったのと、各社のいい話が聞けたのと、イベントを通して多くのAndroidエンジニアと知り合えたのはとても良かったです。
一方で、一通りトークが終わったあと時間が押してて「すいません、あと12分で交流してください」となってしまったのが残念でした。</p>

<p>このイベントの定員50人だったんですけど、150人以上の登録があって、思っていたより人が集まって驚きました。
それなりに需要があれば#2, #3&#8230;とやるかもしれないので、やりたいとか、会場を提供できるよとか、そういうのがあればまたやりたいですね。
次やるのなら交流をメインにしたいので、20分くらいのトークは2本にして、あとは5分のLTを募集してたくさんの人に発表してもらったあとに、さっき◯◯の話をしていたあの人と話そう、みたいにすると良いかなと思いました。</p>

<p>Androidエンジニアに幸あれ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[どうすると気持ち良く感じるのか]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/08/21/ui-animations/"/>
    <updated>2013-08-21T21:56:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/08/21/ui-animations</id>
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/t3u9Ucc.gif" alt="" /></p>

<p><img src="http://i.imgur.com/IoWbato.gif" alt="" /></p>

<p><img src="http://i.imgur.com/aUsHSCo.gif" alt="" /></p>

<p><img src="http://i.imgur.com/mQp4sYq.gif" alt="" /></p>

<p><img src="http://hyper-text.org/img/post/css_tumblr_mobile_app_ui_01.gif" alt="" /></p>

<p>アプリにアニメーションを取り入れるのってどうだろう。
って友人と話していたのだけど、過度なアニメーション？開発者がやりたくやったみたいなのは使う側からするとあんまり嬉しくなくて、
でも気持ちいいアニメーションはついアクションをしたくなるし、それによってコミュニケーションが活発になったりするんじゃないかなってなった。</p>

<p>アニメーションって結構意味が広いからむずかしいのだけど。</p>

<p><a href="http://gihyo.jp/design/serial/01/ui-ux/0001">気持ち良さはどこからくるのか～身体に近づくUIへ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aar dependency]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/27/aar-dependency/"/>
    <updated>2013-07-27T15:47:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/27/aar-dependency</id>
    <content type="html"><![CDATA[<p>Android StudioでLibrary Projectを参照するのにソースコードを修正するたびにjarで固めてlibsにポンしてもいいいのですが、
面倒だしバージョン管理もしたいので調べてたらGitHubをmavenrepoにしてbuild.gradleにdependencyを書いてaarを読み込めることが分かった。</p>

<p><a href="http://u1aryz.blogspot.jp/2013/06/githubmavenandroidaar.html">githubをMavenリポジトリとしてAndroidライブラリプロジェクト(aar)をデプロイして使用する</a></p>

<p>Library Projectの対象moduleのbuild.gradleを以下のように変更。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildscript {
</span><span class='line'>    repositories {
</span><span class='line'>        mavenCentral()
</span><span class='line'>    }
</span><span class='line'>    dependencies {
</span><span class='line'>        classpath 'com.android.tools.build:gradle:0.5.+'
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>apply plugin: 'android-library'
</span><span class='line'>
</span><span class='line'>repositories {
</span><span class='line'>    mavenCentral()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile 'com.android.support:support-v4:13.0.+'
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>android {
</span><span class='line'>    compileSdkVersion 17
</span><span class='line'>    buildToolsVersion "17.0.0"
</span><span class='line'>
</span><span class='line'>    defaultConfig {
</span><span class='line'>        minSdkVersion 9
</span><span class='line'>        targetSdkVersion 16
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>apply plugin: 'maven'
</span><span class='line'>
</span><span class='line'>uploadArchives {
</span><span class='line'>    repositories {
</span><span class='line'>        mavenDeployer {
</span><span class='line'>            repository url: "file://${projectDir}/repository"
</span><span class='line'>            pom.groupId = 'com.rejasupotaro'
</span><span class='line'>            pom.artifactId = 'rejasupo-commons'
</span><span class='line'>            pom.version = '0.0.1'
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>参照するプロジェクトのbuild.gradleにdependencyを追加。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>    maven { url 'https://raw.github.com/takiguchi0817/rejasupo-commons/master/rejasupo-commons/repository' }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    compile 'com.rejasupotaro:rejasupo-commons:0.0.1'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Android Design?]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/26/modern-android-design/"/>
    <updated>2013-07-26T00:37:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/26/modern-android-design</id>
    <content type="html"><![CDATA[<h1>What&#8217;s Modern Android Design?</h1>

<h3>GitHub</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/github.png" alt="" /></p>

<h3>Ted</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/ted.png" alt="" /></p>

<h3>Twitter</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/twitter.png" alt="" /></p>

<h3>Evernote Food</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/evernotefood.png" alt="" /></p>

<h3>Flipboard</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/flipboard.png" alt="" /></p>

<h3>Gmail</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/gmail.png" alt="" /></p>

<h3>Google Music</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/googlemusic.png" alt="" /></p>

<h3>Google+</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/googleplus.png" alt="" /></p>

<h3>pixiv</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/pixiv.png" alt="" /></p>

<h3>recipes</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/recipes.png" alt="" /></p>

<h3>Trulia</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/trulia.png" alt="" /></p>

<h3>umano</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/umano.png" alt="" /></p>

<h3>YouTube</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/youtube.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Casual Talksやります]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/22/android-casual-talks/"/>
    <updated>2013-07-22T21:18:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/22/android-casual-talks</id>
    <content type="html"><![CDATA[<p>ワイワイしているルビーストの様子です。</p>

<p><img src="http://d3lrup5e12lrut.cloudfront.net/media/BAhbCVsHOgZmSSIzMjAxMy8wNi8xNi8wOS8wMy8xNC82MjUvaGlnaHJlc18yNDgyMjkzMTIuanBlZwY6BkVUWwg6BnA6DGNvbnZlcnRJIhEtYXV0by1vcmllbnQGOwZUWwg7BzoKdGh1bWJJIg04MjB4NDAwIwY7BlRbCDoGZToIanBnSSIXLXN0cmlwIC1xdWFsaXR5IDgwBjsGVA.jpg" alt="" />
<img src="http://d3lrup5e12lrut.cloudfront.net/media/BAhbCVsHOgZmSSIzMjAxMi8xMi8wNy8xNS8wMS8yNC8yOTUvaGlnaHJlc18xODU3MDc1MjIuanBlZwY6BkVUWwg6BnA6DGNvbnZlcnRJIhEtYXV0by1vcmllbnQGOwZUWwg7BzoKdGh1bWJJIg04MjB4NDAwIwY7BlRbCDoGZToIanBnSSIXLXN0cmlwIC1xdWFsaXR5IDgwBjsGVA.jpg" alt="" />
<img src="http://d3lrup5e12lrut.cloudfront.net/media/BAhbCVsHOgZmSSIzMjAxMy8wNS8wOS8xNy8wMS80Ni83MDUvaGlnaHJlc18yMzQxNzQ1MjIuanBlZwY6BkVUWwg6BnA6DGNvbnZlcnRJIhEtYXV0by1vcmllbnQGOwZUWwg7BzoKdGh1bWJJIg04MjB4NDAwIwY7BlRbCDoGZToIanBnSSIXLXN0cmlwIC1xdWFsaXR5IDgwBjsGVA.jpg" alt="" /></p>

<p>画像は<a href="http://www.tokyorails.org/ja">TOKYO RAILS</a>より。</p>

<p>ルビーストはいつもワイワイしてて楽しそうだなと思ってた。</p>

<p>開発の話するの基本好きなんだけど、Android開発者ってウェッブ系ほど人口がいないし、
エンタープライズの人らにはあれ(Android)はJavaではないと後ろ指をさされ、社内ではエンタープライズｗｗｗと煽られてつらたんだった。</p>

<blockquote class="twitter-tweet"><p>「さすがの包丁さばきだね！ジャバ書いてるもんね！エンタープライズだもんね！」ってmrknさんに煽られていた</p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/358065012734050307">July 19, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>なのでイベントを立てました -> <a href="http://atnd.org/events/41600">Android Casual Talks</a></p>

<p>Android Studio移行した？とかレビューどうしてる？とかテストちゃんと書いてる？とか効果測定どうしてる？とか、そういう話をカジュアルに出来ればなと思っています。</p>

<p>人が集まるか不安だったけど、イベントページを立ててその日のうちに定員になったし、トーク内容も幅広くいい内容が集まって良かったです。</p>

<p>この夏は勉強会ドリブンディベロップメントで開発環境の整備を頑張ります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Android Design]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/18/google-mobile-sessions/"/>
    <updated>2013-07-18T23:01:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/18/google-mobile-sessions</id>
    <content type="html"><![CDATA[<p>Google Mobile Sessionsにいってきた。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/gms1.jpg" alt="" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/gms2.jpg" alt="" /></p>

<p>色んなセッションがあったけど、Mobile Android Designが特に良かった。
たとえば、スマートフォンブラウザ、Androidアプリ、iPhoneアプリなど、マルチデバイスでサービスを出す場合のアプリのデザインについて、どこを統一すべきで、どこをカスタマイズすべきかなど。</p>

<p>Designについて意識が高まって、他のアプリではどんなパターンを適用しているのか眺めてみたりしていた。</p>

<h3>Google公式のデザインガイド</h3>

<ul>
<li><a href="http://developer.android.com/design/index.html">Android Design</a></li>
<li><a href="http://www.youtube.com/playlist?list=PLWz5rJ2EKKc8j2B95zGMb8muZvrIy-wcF">Android Design in Action</a></li>
</ul>


<h3>Googleが美しいと紹介していたアプリ</h3>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.thefancy.app&amp;hl=ja">Fancy</a>
: Cardsベースでさまざまな解像度に対応していて、コンテンツを綺麗に見せることに成功している。</li>
<li><a href="https://play.google.com/store/apps/details?id=com.expedia.bookings&amp;hl=ja">Expedia</a>
: 解像度別にデザインを細かく調整していて、どのデバイスからも快適に見ることができる。</li>
<li><a href="https://play.google.com/store/apps/details?id=com.ted.android&amp;hl=ja">Ted</a>
: コンテンツ中心にうまく見せている。プライマリーに赤、セカンダリーに白を使っていてとても見やすい。</li>
</ul>


<h3>美しいデザインを紹介しているサイト</h3>

<ul>
<li><a href="http://androidniceties.tumblr.com/">Android niceties</a></li>
<li><a href="http://www.slideshare.net/theresaneil/best-android-app-designs">The Best Android Apps 2012: A Designers Collection</a></li>
<li><a href="http://www.creativebloq.com/app-design/15-beautiful-android-app-ui-designs-11121271">15 beautiful Android app designs</a></li>
<li><a href="http://www.android-app-patterns.com/">Design inspiration for your Android app</a></li>
<li><a href="http://www.hongkiat.com/blog/android-apps-designer/">65 Useful Android Apps For Designers</a></li>
<li><a href="http://www.hongkiat.com/blog/cool-android-homescreens/">40 Really Cool Android Home Screens For Your Inspiration</a></li>
</ul>


<h3>Androidのテーマに従うということ</h3>

<blockquote><p>なぜAndroidのテーマでアプリを作らなければいけないのか？独自テーマはダメなのか？
たとえば、アプリを使っていて設定画面がバラバラに導線が置かれていたらイライラする。
Androidのガイドラインに従うということは、
ユーザー体験を統一するということであり、
そうすることでユーザーはストレスなく、
インストールした瞬間からそのアプリを使いこなすことができるようになる。
ユーザーはガイドラインに沿ったアプリを求めているし、
Androidのガイドラインに従うことでデベロッパーは時間と努力を節約することができる。</p></blockquote>

<p>これを聞いて、僕のアプリはちゃんと出来ているだろうかと考えさせられた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[altria-connected_instrument_test]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/07/11/altria-connected-instrument-test/"/>
    <updated>2013-07-11T22:03:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/07/11/altria-connected-instrument-test</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet"><p>何も作ってないけどLLでJenkins cloneつくってYAPCとかで発表したい</p>&mdash; 中村氏 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/340815292131311619">June 1, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins clone実験中に暴走して凍結とかが良い</p>&mdash; 片s (@hotchemi) <a href="https://twitter.com/hotchemi/statuses/346598875328557059">June 17, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins clone、最終的には独立して一人暮らしとか始めたらいい</p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/347316439113400320">June 19, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins cloneの名前どうするかという話してて、それより上の抽象概念を考えられないからプロダクトにクラス名のような名前を付けてしまう、初音ミクのような個の概念を与えよ、Jenkins同士が会話してるの見ておっさんがLike付けるという結論になりました</p>&mdash; 中村氏 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/347336070427451394">June 19, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote class="twitter-tweet"><p>Jenkins clone clone作って中村氏のaltriaと聖杯戦争したい</p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/352936007068422144">July 4, 2013</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ということで手始めに中村氏のAltriaことJenkins Cloneのプラグインを書きました。</p>

<p>AndroidのConnected Instrument Testの結果を表示します。</p>

<p><a href="https://github.com/takiguchi0817/altria-connected_instrument_test">altria-connected_instrument_test</a>
<img src="https://dl.dropboxusercontent.com/u/54255753/blog/201307/altria-connected_instrument_test.png" alt="" /></p>

<p>エミュレータのプラグインも欲しいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouteActivityを作ろう]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/06/18/route-activity/"/>
    <updated>2013-06-18T22:16:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/06/18/route-activity</id>
    <content type="html"><![CDATA[<h2>理由1. LauncherのActivityは太りやすい</h2>

<p>Androidのプロジェクトを作ると最初にMainActivityが作られます。
そのMainActivityを中心にアプリを作っていくと、認証の確認を行うロジックを入れたり、思わぬ初期化処理が必要になったりして、規模が大きくなるごとにどんどんActivityが太ってしまいます。
ユーザーから最初に見える画面は出来るだけ速く表示したいですし、分岐がたくさん入ると見通しが悪くなって変更がしづらくなる、という状態は避けたいです。</p>

<h2>理由2. アプリの起動の口が複数あるとコピペが発生しやすい</h2>

<p>Androidはショートカットや通知など、画面を起動するパスがたくさんあります。
素直な実装をすると、すべてのActivityのonCreateの中で、isAuthenticatedみたいなメソッドを生やしてログインしてなかったらログイン画面に飛ばしたり、どの経路からアプリが起動されたかログを取る処理などを書いたりして、コピペが発生してActivityの見通しが悪くなってしまいます。</p>

<p>かといって共通の親クラスを作るという方法は、あまりやりたくありません。</p>

<h2>RouteActivityを作ろう</h2>

<p>プロジェクトを作成したらまず最初にMainActivityをRouteActivityにリネームします。
そして、ショートカットやIntentFilterなどはすべてRouteActivityを起動するようにして、パラメータで遷移先を変えるようにします。
RouteActivityに認証の確認の処理や、初期化処理などを置いて、各Activityはそれぞれの責務を真っ当させたら、コードが綺麗になるのではないかと思いました。</p>

<p>RouteActivityという名前はRailsのconfig/routes.rbから来ています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テンプレートアプリ "katanuki" を作った]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/04/28/android-katanuki/"/>
    <updated>2013-04-28T16:47:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/04/28/android-katanuki</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/takiguchi0817/katanuki">Android Katanuki</a></h1>

<p>A template application that includes tons of great open source tools and frameworks.</p>

<p><img src="https://raw.github.com/takiguchi0817/katanuki/master/katanuki.png" width="640" height="480"></p>

<h1>経緯</h1>

<p>この前、<a href="http://androidkickstartr.com/">AndroidKickstartR</a>というプロジェクトを見つけました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201304/androidkickstartr.png" width="640" height="480"></p>

<p>これは自分が使いたいライブラリを選んでポチポチ選んで &#8220;Download it!&#8221; を押したらAndroidアプリのテンプレートが落とせるというものです。
ハッカソンとかで便利そう。
雛形を提供するプロジェクトは他にも
<a href="android%20katanuk://github.com/donnfelker/android-bootstrap">Android Bootstrap</a>
などもあります。</p>

<p>で、各々がサポートしているライブラリが以下になります。</p>

<h3>AndroidKickstartR</h3>

<ul>
<li>android-maven-plugin</li>
<li>AndroidAnnotations</li>
<li>ActionBarSherlock</li>
<li>Spring RESTTemplate</li>
<li>Android support v4</li>
<li>NineOldAndroid</li>
<li>ACRA</li>
<li>RoboGuice</li>
</ul>


<h3>Android Bootstrap</h3>

<ul>
<li>ActionBarSherlock</li>
<li>Dagger</li>
<li>Butterknife</li>
<li>Otto</li>
<li>Robotium</li>
<li>android-maven-plugin</li>
<li>http-request</li>
<li>google-gson</li>
</ul>


<p>新しいアプリを作るときのセットアップってほぼ作業だし、
毎回同じことをしてる気がしたので、自分用のアプリのテンプレートを作りました。
作ったというより設定を書いた、の方が近いですが。
（なぜわざわざ作ったかというと自分の使いたいライブラリや書き方が、上のテンプレートと微妙に合わなかったからです。）</p>

<h1>katanukiについて</h1>

<p>このテンプレートは、プロトタイプ作成や一日でアプリを組むハッカソンを想定して作りました。
今から数時間でそれっぽいアプリを作るぞ！と思ったときに、何をすれば良いか考えて、</p>

<ol>
<li>APIを叩く</li>
<li>データを保存する</li>
<li>かっこいいUIを作る</li>
</ol>


<p>と作業を分解して、APIを叩くのにhttp-request、レスポンスのjsonをオブジェクトに変換するのにgson、それらをAsyncTaskLoaderで呼び出すようにしました。</p>

<p>次にデータの保存はActiveAndroidを使いました。エンタープライズでは使わないと思いますが、面倒なDB周りのコードを書く時間をバッサリカットできるので便利です。</p>

<p>UIについては、入れようか迷ったのですが、中のロジックは一緒でも見せ方はケースバイケースかなと思ったので入れませんでした。
プロジェクトには含めてませんが、このあたりが便利そうです。</p>

<ul>
<li><a href="https://github.com/JakeWharton/ActionBarSherlock">ActionBarSherlock</a> : ActionBarのcompatibility library</li>
<li><a href="https://github.com/chrisbanes/Android-PullToRefresh">PullToRefresh</a> : 引っ張り更新</li>
<li><a href="https://github.com/Prototik/HoloEverywhere">HoloEverywhere</a> : Holoを2系でも使えるようにする</li>
<li><a href="https://github.com/SimonVT/android-menudrawer">MenuDrawer</a> : 横から出るメニューの実装</li>
</ul>


<p>OpenSource便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Otto 使ってみた]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/04/15/using-otto/"/>
    <updated>2013-04-15T21:25:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/04/15/using-otto</id>
    <content type="html"><![CDATA[<h1><a href="http://square.github.io/otto/">Otto - An event bus by Square</a></h1>

<p>画像のアップロード処理が終わったらActivityに通知するとか、
DBからデータを消したらViewに反映させるとかしたくなることってよくあると思います。</p>

<p>Interfaceでなんとかしようとするとコードが汚くなってやだなと思ってたので、前から気になってたevent busのライブラリ、Ottoを使ってみました。</p>

<h2>バッググラウンドで画像のアップロードが終わったらトーストを出す</h2>

<p>Busですが、インスタンスごとにregisterとunregisterが出来るのですが、通常はSingletonで良いでしょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">BusProvider</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Bus</span> <span class="n">BUS</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bus</span><span class="o">(</span><span class="n">ThreadEnforcer</span><span class="o">.</span><span class="na">ANY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Bus</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BUS</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">BusProvider</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// No instances.</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Busのインスタンスの生成のときに実行するスレッドのチェックが出来るのですが、
event busを使うときってバックグラウンドスレッドからメインスレッドに通知するパターンが多そうなので、
ThreadEnforcer.ANYを指定しています。</p>

<p>イベントの発火。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImageUploaderService</span> <span class="kd">extends</span> <span class="n">ProtonIntentService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">ImageUploaderService</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">EXTRA_UPLOAD_ENTITY</span> <span class="o">=</span> <span class="s">&quot;extra_animation_entity&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Inject</span> <span class="n">MyNotificationManager</span> <span class="n">mNotificationManager</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ImageUploaderService</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">TAG</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ImageUploaderService</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onHandleIntent</span><span class="o">(</span><span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mNotificationManager</span><span class="o">.</span><span class="na">sendNotification</span><span class="o">();</span>
</span><span class='line'>        <span class="n">UploadEntity</span> <span class="n">uploadEntity</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="n">EXTRA_UPLOAD_ENTITY</span><span class="o">);</span>
</span><span class='line'>        <span class="n">MyApiClient</span> <span class="n">apiClient</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyApiClient</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">uploadEntity</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="n">apiClient</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;upload result: &quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mNotificationManager</span><span class="o">.</span><span class="na">cancelNotification</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">UploadFinishedEvent</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>bus#postに定義したイベントのインスタンスを渡します。</p>

<p>イベントはなんでもいいです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadFinishedEvent</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は特になにも渡すものがないので空です。</p>

<p>メソッドに@Subscribeを付けて定義したイベントを引数にすると受け取ることが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">unregister</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Subscribe</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onUploadFinished</span><span class="o">(</span><span class="n">UploadFinishedEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ToastUtils</span><span class="o">.</span><span class="na">show</span><span class="o">(</span><span class="n">AnimationComposeActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">string</span><span class="o">.</span><span class="na">upload_finished</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActivityではonResumeとonPauseでそれぞれregisterとunregisterをしてやる必要があります。</p>

<p>これだけでイベント通知のしくみが使えてとても便利。</p>

<blockquote class="twitter-tweet" lang="ja"><p>Otto、シンプルだしコード綺麗だしパフォーマンスを考慮してtraverseしないのもいい / An enhanced Guava-based event bus with emphasis on Android support. <a href="http://t.co/2yHWQkejEd" title="http://square.github.io/otto/">square.github.io/otto/</a></p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/323451917235789824">2013年4月14日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クックパッド株式会社に入社しました]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/04/02/nyusya-entry/"/>
    <updated>2013-04-02T01:50:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/04/02/nyusya-entry</id>
    <content type="html"><![CDATA[<h3>はじめまして</h3>

<blockquote class="twitter-tweet" lang="ja"><p>新卒です</p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/318505403476488193">2013年3月31日</a></blockquote>


<script async src="http://takiguchi0817.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>新卒としてクックパッド株式会社に入社しました。
僕は今日初めて同期と顔を合わせたのですが、新卒入社なのに社歴がすでに4年目という人や、博士後期課程までがっつり研究をして「新卒ですがもうすぐ30です」という人がいたり、「前職では〜」「転職のきっかけは〜」と始まる自己紹介をする人(僕もですが)もいて、
新卒のみなさんとてもフレッシュで戦々恐々としていました。</p>

<p>全社員が集まる場での自己紹介で「なぜクックパッドに入ったか」と「クックパッドで実現したいこと」の二点について、話してくださいと言われたので話しました。</p>

<h4>なぜクックパッドに入ったか</h4>

<p>思い返すと、年末にコードが綺麗な<a href="http://r7kamura.hatenablog.com/entry/2012/11/30/223412">中村クン</a>と話したことがきっかけだったのかなと思います。
Androidアプリ開発どう？みたいな話をして、あまりリソースが割けていないという話を聞きました。良いサービスなのにもったいないと思ったのがとても記憶に残っています。
(気になってその日はうちに帰ってapkを逆コンパイルしてた気がします)</p>

<h4>クックパッドで実現したいこと</h4>

<p>「マーケットのレーティングで星4つ以上を目指します」と言いました。
スマートフォンアプリというのは単純に「PCのページのデザインを崩れないように表示できるようにしたもの」にとどまらず、そもそも使われるシーンが違う(たとえば献立を考えるときにはPCで検索して、買い物をするときにはスマートフォンでレシピの材料を見て、実際に料理をするときにはタブレットで閲覧するみたいな)ので、シーンに応じた求められる機能とは何か、最適な見せ方とは何かを突き詰めていきたいです。</p>

<p>という話をしました。</p>

<h3>その他</h3>

<p>クックパッドは2008年(2007年だったかも)というかなり早い時期からHadoopを導入したり、同じく2008年にColdFusionで書かれたサービスをRailsでフルリニューアルしたりして、導入後は最新のバージョンに追随するようにしてきました。
なぜ最新にこだわっているかというと、新しいバージョンでしか使えないものが使えないなんてディスアドバンテージを背負いたくないというのと、実は常にバージョンアップしていくのが一番コストが低いからだと言っていました。</p>

<p>そういう姿勢がクックパッドをテクノロジーカンパニーとして世間に認知させ、多くのエンジニアを引き寄せ、今のようなレールズモヒカンの巣窟の形成に至ったのだと思います。</p>

<p>僕はそれと同じことをスマートフォンでもやりたい、
クックパッドをレールズ以外にもスマートフォンアプリ開発も凄いって言われるようにしたいと思っています。</p>

<p>もちろんすべてはユーザーの問題解決のため。
新鮮な野菜とジャバと顧客に届け続けるオアダイという言葉を胸に頑張ります。</p>

<p>これからどうぞよろしくお願いします。</p>
]]></content>
  </entry>
  
</feed>
