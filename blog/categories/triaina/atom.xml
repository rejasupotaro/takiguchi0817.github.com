<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Triaina | Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/blog/categories/triaina/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-08-31T23:07:57+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[トリアイナってなに？]]></title>
    <link href="http://takiguchi0817.github.com/blog/2012/12/24/triaina/"/>
    <updated>2012-12-24T21:55:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2012/12/24/triaina</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p><a href="http://alpha.mixi.co.jp/2012/11576/">Titanium? いいえ、Triainaです。</a></p>

<p>トリアイナは、先端が三つに分かれた漁具あるいは武器の一種。ギリシア神話の海神ポセイドンが持つ三叉の矛として知られる。 <a href="http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%AA%E3%82%A2%E3%82%A4%E3%83%8A">wikipediaより</a></p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Angelo_Bronzino_048.jpg/220px-Angelo_Bronzino_048.jpg" alt="ポセイドーンの肖像画" /></p>

<p>ギリシャ神話詳しく知らないけど、ポセイドンがトライデント(Triaina)でタイタン(Titanium)を倒した話に掛けてるのかも。<br/>
　<br/>
　</p>

<h2>トリアイナ概要</h2>

<p>Triainaはhnakagawa氏が中心になって作ったスマートフォンアプリ開発のフレームワークです。<br/>
ハイブリッドアプリ開発のフレームワークの中でもネイティブ寄りかなって思います。</p>

<p>Androidが提供するネイティブとWebViewの連携のしくみは、以前に<a href="http://takiguchi0817.github.com/blog/2012/11/29/about-android-webview/">ブログに書いた</a>通りです。</p>

<p>Androidが提供するしくみでハイブリッドアプリを作ろうと思うと、</p>

<ul>
<li>プロトコルを考えて</li>
<li>プロトコルに従ったのパーサーを書いて</li>
<li>コールバックのしくみを作る</li>
</ul>


<p>必要があります。</p>

<p>公式ブログの画像を引用すると、<br/>
<img src="http://alpha.mixi.co.jp/images/triaina3.png" alt="Triaina概要" /><br/>
このように、メソッド名を指定することでコールバックまで含めてよろしくやってくれるみたいです。<br/>
　<br/>
　<br/>
<a href="https://github.com/mixi-inc/triaina">mixi-inc / triaina</a>
　<br/>
　</p>

<h2>JavaScriptの実装</h2>

<p>サンプルにあるとおりですが、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">WebBridge</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s1">&#39;form.media.click&#39;</span><span class="p">,</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">filter</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;jpeg&quot;</span><span class="p">,</span> <span class="s2">&quot;png&quot;</span><span class="p">],</span>
</span><span class='line'><span class="nx">max</span><span class="o">:</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// response data</span>
</span><span class='line'><span class="c1">// {</span>
</span><span class='line'><span class="c1">//     bridge: &quot;1.1&quot;,</span>
</span><span class='line'><span class="c1">//     dest: &quot;form.media.click&quot;,</span>
</span><span class='line'><span class="c1">//     result: [{</span>
</span><span class='line'><span class="c1">//         id: &quot;xxxxxxx&quot;,</span>
</span><span class='line'><span class="c1">//         filename: &quot;&quot;,</span>
</span><span class='line'><span class="c1">//     }]</span>
</span><span class='line'><span class="c1">// }</span>
</span><span class='line'><span class="c1">// create input data &amp;amp; added input value</span>
</span><span class='line'><span class="nx">fileStoreElement</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>destとjsonとcallbackを引数にWebBridgeのcallを呼ぶみたいですね。callの実装は、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>triaina/javascript/bridge.js  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">call</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dest</span><span class="p">,</span> <span class="nx">params</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">bridge</span><span class="o">:</span> <span class="nx">BRIDGE_VERSION</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">dest</span><span class="o">:</span> <span class="nx">dest</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">params</span><span class="o">:</span> <span class="nx">params</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">getId</span><span class="p">()</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">execute</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">execute</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">requestJSON</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">request</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">callback</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">request</span><span class="p">.</span><span class="nx">id</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_callbackTable</span><span class="p">[</span><span class="nx">request</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">callback</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">existsDeviceBridge</span><span class="p">()){</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">DeviceBridge</span><span class="p">.</span><span class="nx">notifyToDevice</span><span class="p">(</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">requestJSON</span><span class="p">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">onStart</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nx">DeviceBridge</span><span class="p">.</span><span class="nx">notifyToDevice</span><span class="p">(</span><span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">requestJSON</span><span class="p">));</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_isEnableBridge</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">_buildBridge</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;not found DeviceBridge JavaScriptInterface&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;stack DeviceBridge notity&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">requestJSON</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>こんな感じになってます。callbackはJSONRPCでいうところのIDをキーにハッシュで管理されているようです。<br/>
JavaScriptが実行できるタイミングになったらネイティブ側に通知したり、逆にネイティブ側が実行できるようになったタイミングでメソッドを遅延呼び出ししたり、そういう細かい制御をしてくれてるようです。<br/>
　<br/>
　</p>

<h2>Javaの実装</h2>

<p>前にも書きましたが、Java側には、</p>

<ul>
<li>インジェクト</li>
<li>バイナリのダイナミックローディング</li>
<li>ネイティブ・ブラウザ間のメソッドの相互呼び出し</li>
</ul>


<p>の3つの機能があります(って聞きました)。</p>

<p>インジェクトは2012年12月24日現在は、RoboGuiceをベースに作ってあります。(DIコンテナは、RoboGuice自体がGuiceのラップしたもので重いので、<a href="https://github.com/square/Dagger">Dagger</a>をベースに書き直したいと聞きました)。<br/>
なので、トリアイナはハイブリッドアプリ開発のフレームワークとして公開されてますが、トリアイナのjarを入れればインジェクトでアプリが書けるようになります。</p>

<p>それはそれで、ネイティブ・ブラウザ間のメソッド呼び出しのしくみです。<br/>
まず、Activityです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Layout</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">mywebview</span><span class="o">)</span>    <span class="c1">// 使用するlayoutのリソース</span>
</span><span class='line'><span class="nd">@WebViewBridge</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">mywebview</span><span class="o">)</span> <span class="c1">// 使用するWebViewBridgeのリソース</span>
</span><span class='line'><span class="nd">@Domain</span><span class="o">({</span> <span class="s">&quot;rejasupotaro.com&quot;</span><span class="o">,</span> <span class="s">&quot;rejamotion.com&quot;</span> <span class="o">})</span> <span class="c1">// 許可するドメイン</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyWebViewActivity</span> <span class="kd">extends</span> <span class="n">AbstractWebViewBridgeActivity</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>DomainアノテーションでJavaScriptを実行するドメインを指定します。じゃないとWebViewはJavaのクラスローダーが呼べたりJNIが使えたりして危険だからです。</p>

<p>ブラウザから呼び出すメソッドは、Bridgeアノテーションを付けて宣言します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Bridge</span><span class="o">(</span><span class="s">&quot;hoge.action.method&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">hogeActionMethod</span><span class="o">(</span><span class="n">HogeActionParams</span> <span class="n">params</span><span class="o">,</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">HogeActionResult</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Parcerableなtriaina.webview.entity.Paramsを継承したクラスと、Parcerableなtriaina.webview.entity.Resultを継承したクラスをジェネリクス型に持つtriaina.webview.Callbackを引数に取ります。<br/>
JavaScript側からJSON形式で値が渡せば、自動的に値がエンティティにバインドされます。</p>

<p>呼び出される仕組みを見てみます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>triaina/android/WebViewBridge/src/triaina/webview/WebViewBridge.java   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">(</span><span class="n">String</span> <span class="n">dest</span><span class="o">,</span> <span class="n">Params</span> <span class="n">params</span><span class="o">,</span> <span class="n">Callback</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">isDestroyed</span><span class="o">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">id</span> <span class="o">=</span> <span class="n">mSeq</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">String</span> <span class="n">js</span> <span class="o">=</span> <span class="n">notifyToWebInternal</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">dest</span><span class="o">,</span> <span class="s">&quot;params&quot;</span><span class="o">,</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">js</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>    <span class="n">callbacks</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">js</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="n">String</span> <span class="n">notifyToWebInternal</span><span class="o">(</span><span class="n">String</span> <span class="n">id</span><span class="o">,</span> <span class="n">String</span> <span class="n">dest</span><span class="o">,</span> <span class="n">String</span> <span class="n">container</span><span class="o">,</span> <span class="n">Object</span> <span class="n">data</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">JSONObject</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">();</span>
</span><span class='line'>    <span class="n">JSONObjectUtils</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="s">&quot;bridge&quot;</span><span class="o">,</span> <span class="n">VERSION</span> <span class="o">+</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">JSONObjectUtils</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="s">&quot;id&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">dest</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="n">JSONObjectUtils</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="s">&quot;dest&quot;</span><span class="o">,</span> <span class="n">dest</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">JSONObject</span> <span class="n">jsonData</span> <span class="o">=</span> <span class="n">JSONConverter</span><span class="o">.</span><span class="na">toJSON</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="n">JSONObjectUtils</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">container</span><span class="o">,</span> <span class="n">jsonData</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Notify to Web with &quot;</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">js</span> <span class="o">=</span> <span class="n">mHelper</span><span class="o">.</span><span class="na">makeJavaScript</span><span class="o">(</span><span class="s">&quot;WebBridge.notifyToWeb&quot;</span><span class="o">,</span> <span class="n">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">loadUrl</span><span class="o">(</span><span class="n">js</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">js</span><span class="o">;</span><span class="c1">// for test</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">exp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">exp</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&quot;</span><span class="o">,</span> <span class="n">exp</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="https://github.com/mixi-inc/triaina/blob/master/android/Commons/src/triaina/commons/json/JSONConverter.java">triaina.commons.json.JSONConverter</a>でParamsオブジェクトをJSONに変換しているみたいです。</p>

<p>どのようにJSONに変換しているかというと、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">JSONObject</span> <span class="nf">toJSON</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">bundle</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">JSONConvertException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="o">(</span><span class="n">bundle</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">JSONObject</span> <span class="n">json</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JSONObject</span><span class="o">();</span>
</span><span class='line'><span class="n">Set</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">keySet</span> <span class="o">=</span> <span class="n">bundle</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
</span><span class='line'><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">key</span> <span class="o">:</span> <span class="n">keySet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">put</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">bundle</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">json</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>こんな感じで、Bundleとして処理して変換していますね。<br/>
逆にブラウザから受け取ったJSONは、JSONConverter内で再帰的にリフレクションを使ったりして、Javaのオブジェクトに変換しているようです。<br/>
　<br/>
　</p>

<h2>iOSの実装</h2>

<p>わからん。<br/>
　<br/>
　</p>

<h2>まとめ</h2>

<p>今時のアプリはハイブリッド！みたいな声を良く聞きますが、ハイブリッドって言ってもいろんなタイプがあるし、どういうのが最適なのか僕も分かりません。<br/>
いろんな実装を見ながら僕だけのハイブリッドを見つけていきたいです。</p>
]]></content>
  </entry>
  
</feed>
