<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-09-30T22:58:43+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[S3でmavenリポジトリをホストしてGradleでアップロードする]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/30/upload-to-s3/"/>
    <updated>2013-09-30T22:52:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/30/upload-to-s3</id>
    <content type="html"><![CDATA[<p>bucket, key, secretは外部ファイルに定義しておきます。</p>

<p>```groovy
configurations {</p>

<pre><code>deployerJars
</code></pre>

<p>}
repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}
dependencies {</p>

<pre><code>deployerJars 'org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE'
</code></pre>

<p>}</p>

<p>uploadArchives {</p>

<pre><code>repositories {
    mavenDeployer {
        configuration = configurations.deployerJars

        repository(url: "s3://${project.s3Bucket}/release") {
            authentication(userName: project.s3Key, passphrase: project.s3Secret)
        }

        pom.groupId = 'com.rejasupotaro'
        pom.artifactId = 'mylibrary'
        pom.version = '1.0.0'
    }
}
</code></pre>

<p>}
```</p>

<p>これで gradle uploadArchives すればアップロードすることができます。</p>

<p>ライブラリを使う側は以下のようにします。</p>

<p>```groovy
repositories {</p>

<pre><code>maven {
    url "https://${project.s3Bucket}.s3.amazonaws.com/release"
    credentials {
        username project.s3Key
        password project.s3Secret
    }
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>compile 'com.rejasupotaro:mylibrary:1.0.0'
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android開発を始めたばかりの僕が読みたかった本]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/28/android-books/"/>
    <updated>2013-09-28T00:42:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/28/android-books</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/reading.png" alt="" /></p>

<p>最近、スマートフォンアプリ開発をやる人増えてきてオススメの本ある？って聞かれること多くなってきたのですが、その人のバックグラウンドによるところも大きいと思うので、自分がAndroidアプリ開発を始めたときに読んでて役に立った、あるいは読んでおきたかったという目線で、良かった本をいくつか挙げようと思います。</p>

<h2>Effective Java</h2>

<p>Java界隈では多くの人が読んでいると思いますが、AndroidからJavaに入った人だと読んだことがない人もいると思います。
Javaを書く上でのエッセンスが詰め込まれているので、まだ読んでいない方は読むことをおすすめします。</p>

<h2>JUnit実践入門</h2>

<p>Androidだとテストが書かれないことが多いです。しかし、書いた方がデバッグの時間が短くなる上に保守もしやすくなりますし、テストを書きやすい構造を意識するようになって、上達が早くなりますし、設計も綺麗になります。(と思います)
僕も最初はテストを書かなかったのですが、もっと早くからテストを書いていればなと思っています。</p>

<h2>現場で使える[逆引き+実践]Androidプログラミングテクニック</h2>

<p>逆引き系の本なのですが、それだけでなく <strong>SQLiteの処理を高速化したい</strong> であったり、<strong>OutMemoryErrorをなんとか回避したいとか</strong> や、<strong>複数のアクティビティで共通の処理を、Template Methodパターンで実装したい/移譲で実装したい/Strategyパターンで実装したい</strong> など、デザインパターンや実践的なノウハウが詰まっている良い本でした。</p>

<h2>SMASHING Android UI</h2>

<p><a href="http://www.androiduipatterns.com/">Android // UI PATTERNS</a> というブログで有名なJuhani Lehtimakiさんの本です。最近翻訳されて日本で発売されました。
この本も、ただUIのコンポーネントの説明に終わるだけでなく、デザインとどう向き合うかや、ユーザーテストのやり方や、Androidプラットフォームの課題など、スマートフォンエンジニアにとって重要なデザインのことが学べる数少ない良書だと思います。</p>

<hr />

<p>ここから先はAndroidのさらに高度なプログラムを書きたい人向けです。</p>

<h2>Java言語で学ぶデザインパターン入門【マルチスレッド編】</h2>

<p>通信などの非同期処理、並列処理を書くときに、パフォーマンスの悪いプログラムを書いてしまったり、最悪デッドロックを起こしてしまったりしてしまわないために、特にこれからライブラリを書く人はこの本を読んだ方がいいです。
またライブラリを書かない人でもこの本を読んでおくと「ああ、あのパターンで実装されているのか！」みたいに、理解の助けになったりします。</p>

<h2>サクサク動く！Androidアプリ高速化プログラミング</h2>

<p>アプリの規模が大きくなってきてパフォーマンスに問題を感じるようになったり、局所的にプログラムを速くしたいというときにはこの本がおすすめです。デバッグ手法やレイアウトの最適化の話から、アセンブラやメモリアクセスやGCの話もあるので、読み物としても面白かったです。</p>

<hr />

<p>その他、本以外に参考にしているもの</p>

<h2><a href="https://twitter.com/androidniceties">@androidniceties</a></h2>

<p>Android Nicetiesのtumblrの更新をツイートしてくれます。
デザインを専門に学んでいなかった僕は、とにかく多くのパターンに触れなければと思っています。デザインは0から生まれるものではなく、過去の事例であったり、自然界に存在する美しいものの模倣から生まれるみたいな話がありますし、なにより実績のあるアプリのデザインは僕が考えだしたUIより質が高いです。</p>

<h2><a href="http://www.androidviews.net/">ANDROIDVIEWS</a></h2>

<p>あのアプリの実装オシャレだなとか思ったら、ここに載っていたりします。
自分で実装するときの助けになったりとか、ライブラリを使うことで簡単に実装できたりします。見てるだけでも楽しいです。</p>

<h2><a href="https://github.com/square">Square</a></h2>

<p>決済サービスのあのスクエアのGitHubアカウントです。dagger、otto、picasso、fest-androidなど、これらの有名なライブラリも実はこのスクエア製で、インタフェースの素晴らしさも去ることながら、プログラムがとても綺麗で、ある意味書籍よりも勉強になると思います。</p>

<hr />

<h2>まとめ</h2>

<p>こんなに一度に紹介されても読むのはたいへん…ですが、まずは調べてみて興味を持ったところから読んでみるといいと思います。
スマートフォンエンジニアはデザインから低レイヤまで幅広い知識を要求されます(といってもエンジニアリングってどの分野もそうなのですが)が、まずは自分の好きを伸ばして、それからもっと良いアプリを作るために、足りないところを補っていくというやり方がいいのかなと思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[きんモザのアリスのgif画像を取得するAPIを使ったAndroidアプリを作った]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/26/alice-api/"/>
    <updated>2013-09-26T01:09:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/26/alice-api</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takiguchi0817/KinMoza/tree/master">
<img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/alice_github.png">
</a></p>

<p>See also</p>

<ul>
<li><a href="http://mogashi.hateblo.jp/entry/2013/09/24/000619">きんモザのアリスのgif画像を取得するAPIを作った</a></li>
<li><a href="http://pastak.hatenablog.com/entry/2013/09/25/004437">きんモザのアリスのgif画像を取得するAPIを利用したGoogle Chrome拡張を作った</a></li>
<li><a href="http://moroya.hatenablog.jp/entry/2013/09/25/224446">きんモザのアリスAPIを使って、好きなアリスを無限ループ視聴出来るWebアプリを作った</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モヒートはモッキングフレームワークで味はとても美味しい]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/19/android-test/"/>
    <updated>2013-09-19T22:40:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/19/android-test</id>
    <content type="html"><![CDATA[<h1>mojito (モヒート)</h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mojito.jpg" alt="" /></p>

<p>モヒートは、キューバ・ハバナ発祥のカクテルの一つ。<br/>
由来は、新大陸として注目されていたアメリカ諸国から得られる富をコントロールする名目で、英国女王エリザベス1世が、スペイン領の都市を略奪する海賊達の手助けをしていた16世紀後半、海賊フランシス・ドレイクの部下であるリチャード・ドレイクが、1586年にモヒートの前身となる飲み物「ドラケ(draque)」をキューバの人々へ伝えた、という説が有力。<br/>
ラムをベースにソーダ、ライム、砂糖、ミントを加えたもの。ミントとソーダの清涼感が暑い夏にぴったりな「夏と言えば」の定番カクテル。</p>

<p>アーネスト・ヘミングウェイが好んで飲んでいた話は有名である。</p>

<h1><a href="http://code.google.com/p/mockito/">mockito</a> (モヒート)</h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mockito.jpg" alt="" /></p>

<p>モヒートは、Javaのモックライブラリ。<br/>
モックライブラリは他にもいろいろあるけど <a href="http://code.google.com/p/mockito/wiki/MockitoVSEasyMock">EasyMockと比べても</a> mockitoの方が簡潔に書ける。<br/>
導入するとモヒートを飲んだあとのようにスカッとする。</p>

<p><strong>"Mockito is a mocking framework that tastes really good!"</strong> とのこと。(公式)</p>

<h1>mockitoナシ</h1>

<p>今までのやり方。まずモッククラスを定義して、</p>

<p>```java
import com.android.volley.Network;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.VolleyError;</p>

<p>public class MockNetwork implements Network {</p>

<pre><code>private byte[] mFakeResponseData = null;

public void setFakeResponseData(byte[] data) {
    mFakeResponseData = data;
}

@Override
public NetworkResponse performRequest(Request&lt;?&gt; request) throws VolleyError {
    return new NetworkResponse(mFakeResponseData);
}
</code></pre>

<p>}
```</p>

<p>テストするときに返したいデータをセットする。</p>

<p><code>java
MockNetwork mockNetwork = new MockNetwork();
mockNetwork.setFakeResponseData("{\"code\":200}".getBytes());
</code></p>

<h1>mockitoアリ</h1>

<p>このメソッドが呼ばれたときにこれを返す、とするだけ。</p>

<p>```java
Network mockNetwork = mock(Network.class);
when(mockNetwork.performRequest(any(Request.class))).</p>

<pre><code>    thenReturn(new NetworkResponse("{\"code\":200}".getBytes()));
</code></pre>

<p>```</p>

<p>インタフェースが統一されることによって、次にテストを書く人が「MockNetworkというクラスがあるらしい、ふむふむ、setFakeResponseDataに渡したbyte列がperformRequestで返ってくるのか」と調べる時間を省くことができる。</p>

<p>特定のオブジェクトの一部のメソッドの振る舞いを変えるときもカンタン。</p>

<p><code>groovy
doReturn(new HashMap&lt;String, String&gt;() { { put("fake", "foo"); } }).when(spyRequest).getHeaders();
</code></p>

<p>ちなみにdependencyを解決できなかったので、jarを落として ./src/instrumentTest/libs/ に配置して以下のようにした。</p>

<p><code>groovy
instrumentTestCompile fileTree(dir: './src/instrumentTest/libs', include: '*.jar')
</code></p>

<p>モヒートにギョームでもプライベートでもお世話になってる。</p>

<hr />

<p>↑ここまでモヒートの話↑<br/>
↓ここまで他のフレームワークの紹介↓</p>

<h1><a href="http://square.github.io/fest-android/">Fest Android</a></h1>

<p>安心と信頼の <a href="https://github.com/square">Square</a> 製テストフレームワーク。(Squareが公開してるライブラリは本当にどれもレベルが高い)<br/>
元ネタは <a href="http://fest.easytesting.org/">Fixtures for Easy Software Testing</a> のAndroid拡張となっている。</p>

<h3>REGULAR JUNIT</h3>

<p><code>java
assertEquals(View.VISIBLE, layout.getVisibility());
assertEquals(VERTICAL, layout.getOrientation());
assertEquals(4, layout.getChildCount());
assertEquals(SHOW_DIVIDERS_MIDDLE, layout.getShowDividers());
</code></p>

<h3>FEST ANDROID</h3>

<p>```java
assertThat(layout).isVisible()</p>

<pre><code>.isVertical()
.hasChildCount(4)
.hasShowDividers(SHOW_DIVIDERS_MIDDLE);
</code></pre>

<p>```</p>

<h1><a href="https://github.com/mttkay/calculon">calculon</a></h1>

<p><img src="https://raw.github.com/mttkay/calculon/master/assets/calculon.png" alt="" /></p>

<p>こちらも便利メソッドを提供している。</p>

<p>```java
// direct assertion on current activity
assertThat().inPortraitMode();
assertThat().viewExists(R.id.launch_bar_button);</p>

<p>// assert specific condition on current activity</p>

<pre><code>assertThat().satisfies(new Predicate&lt;Activity&gt;() {
public boolean check(Activity target) {
    return target.isTaskRoot();
}
</code></pre>

<p>});
```</p>

<p>Fest Androidとの違いは、calculonはStoryTestを提供しており、画面遷移を伴うストーリーをテストとして実行することができる。</p>

<h1>Robolectric + Spock</h1>

<p>この動画で紹介されているGroovyの元祖PowerAssert系テストフレームワーク <a href="https://code.google.com/p/spock/">Spock</a> を頑張ってAndroidで動かすというもの。</p>

<iframe width="420" height="315" src="http://takiguchi0817.github.com//www.youtube.com/embed/aDoQxqO_6rI" frameborder="0" allowfullscreen></iframe>


<p>RobolectricはAndroidのテストをJVM上で実行するためのフレームワークで、AndroidのクラスをJavaのShadowクラスに変換して実行するしくみになっている。
JVMでテストが実行できるようになるということは、Groovyでもテストが書けるということなので、Robolectricを導入すればSpockも使えるようになる。</p>

<h3>Robolectric</h3>

<p>```java
@Test
public void testDialogContent() {</p>

<pre><code>// given
final MainActivity mainActivity = new MainActivity();
mainActivity.onCreate(null);

// when
mainActivity.button.performClick();

// then
final ShadowAlertDialog dialog = (ShadowAlertDialog) Robolectric.shadowOf(ShadowDialog.getLatestDialog());
Assert.assertEquals("title", dialog.getTitle());
Assert.assertEquals("Ok", dialog.getButton(AlertDialog.BUTTON_POSITIVE).getText());
Assert.assertEquals("Cancel", dialog.getButton(AlertDialog.BUTTON_NEGATIVE).getText());
Assert.assertEquals("Dismiss", dialog.getButton(AlertDialog.BUTTON_NEUTRAL).getText());
Assert.assertEquals("Dialog Content", dialog.getMessage());
</code></pre>

<p>}
```</p>

<h3>Robolectric + Spock</h3>

<p>```groovy
def "should displayed dialog's button has good text"() {</p>

<pre><code>given:
def mainActivity = new MainActivity()
mainActivity.onCreate(null)

when:
mainActivity.button.performClick()
def dialog = (ShadowAlertDialog) Robolectric.shadowOf(ShadowDialog.getLatestDialog());

then:
dialog.getButton(number).text == value

where:
number                      | value
AlertDialog.BUTTON_POSITIVE | "Ok"
AlertDialog.BUTTON_NEGATIVE | "Cancel"
AlertDialog.BUTTON_NEUTRAL  | "Dismiss"
</code></pre>

<p>}
```</p>

<p>導入コスト、学習コスト、効果を鑑みつつ、引き続きテスティングフレームワークをテイスティングしていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genymotion速かった]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/06/genymotion/"/>
    <updated>2013-09-06T23:31:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/06/genymotion</id>
    <content type="html"><![CDATA[<p>AndroVMがいつの間にかGenymotionに名前変わってました。</p>

<h3><a href="http://www.genymotion.com/">Genymotion</a> - BOOST YOUR APP TESTING! Simple, practical and effective.</h3>

<p><img src="http://www.genymotion.com/assets/genymotion-fits-in-your-developping-environment-.png" alt="" /></p>

<p>「x86エミュレータとそんなに変わらないんでしょ」と思っていましたが、これを機にインストールして動かしてみたらサックサクのヌルヌルで驚きました。<br/>
もしかして、実機より速いのでは？と思って2、3000行の比較的小規模なライブラリでconnectedInstrumentTestを実行して、その実行時間を比較してみました。
結果は環境によって結構変わると思うので、あくまで目安で。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/genybench.png" alt="" /></p>

<h3>実機よりも速かった</h3>

<p>しかもエミュレータだとGoogle Playのアプリが落とせなかったりするのですが、Googleアカウントを登録して同期することもできるし、アプリを落として実機より軽快な環境で遊ぶこともできます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/download.png" alt="" /></p>

<p>ポチポチ押すだけで5分くらいあればインストールできるので、面倒くさがりな僕でもインストールできました。</p>

<p>今回のケースだとそんなにですが、1回のテストで20分かかる環境だとテストが速く終わると相当嬉しみがあるので、
しばらく使ってみて良さそうだったら、本番環境のJenkinsのAndroidエミュレータをGenymotionに置き換えるかもしれません。</p>
]]></content>
  </entry>
  
</feed>
