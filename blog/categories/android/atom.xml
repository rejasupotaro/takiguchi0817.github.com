<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-10-20T22:05:11+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ローカルのaarの参照を参照する]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/10/20/reference-of-local-aar/"/>
    <updated>2013-10-20T21:59:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/10/20/reference-of-local-aar</id>
    <content type="html"><![CDATA[<p>ローカルのaarはjarのように参照することはできない。</p>

<p>```java
dependencies {</p>

<pre><code>compile fileTree(dir: 'libs', include: '*.jar')
compile fileTree(dir: 'libs', include: '*.aar')
</code></pre>

<p>}
```</p>

<p>ので、リポジトリにローカルのlibsディレクトリを登録する。</p>

<p>```java
repositories {</p>

<pre><code>mavenCentral()
flatDir {
    dirs 'libs'
}
</code></pre>

<p>}
...
dependencies {</p>

<pre><code>compile 'com.rejasupotaro:mylibrary:0.0.1@aar'
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intentの生成パターン]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/10/17/create-intent/"/>
    <updated>2013-10-17T00:02:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/10/17/create-intent</id>
    <content type="html"><![CDATA[<p>Androidの設計思想上、Activityはどこからも呼び出されるものなので、Intentを呼び出し元で生成してExtraを付けるっていうのは、どこでgetExtraされるかとか、そもそもどんなパラメータが必要かが分かりにくくて、後から追加されたActivityでExtraが足りなくて落ちるということが起こりうると思っていました。</p>

<h2>僕のパターン</h2>

<p>そこで僕は、IntentHubというクラスを作って、画面の呼び出しなどのIntent処理をまとめてそこに書くようにしています。</p>

<h3>例.</h3>

<p>```java
@InjectView(R.id.button) Button mButton;
@Inject IntentHub mIntentHub;</p>

<p>@Override
public void onCreate(Bundle savedInstanceState) {</p>

<pre><code>super.onCreate(savedInstanceState);
mButton.setOnClickListener((view) -&gt;
        mIntentHub.openCommentViewActivity(commentId);
});
</code></pre>

<p>}
```</p>

<h2>GitHubのパターン</h2>

<p>他のアプリはどうしてるのかなと思ってGitHubのAndroidアプリを見てみたら、IntentsというIntentを作るためのヘルパークラスがいて、BuilderでIntentを作って、IntentFilterで対象の画面の呼び出しをしていました。つまり…コードを見た方が早いと思います。</p>

<h3>呼び出し先(CommitViewActivity)</h3>

<p>```java
public static Intent createIntent(final Repository repository, final int position, final String... ids) {</p>

<pre><code>Builder builder = new Builder("commits.VIEW");
builder.add(EXTRA_POSITION, position);
builder.add(EXTRA_BASES, ids);
builder.repo(repository);
return builder.toIntent();
</code></pre>

<p>}
```</p>

<h3>呼び出し元Activity(NewsFragment)</h3>

<p><code>java
startActivity(CommitViewActivity.createIntent(repo, sha));
</code></p>

<h3>IntentFilterの定義(AndroidManifest)</h3>

<p>```xml
&lt;activity</p>

<pre><code>android:name=".ui.commit.CommitViewActivity"
android:configChanges="orientation|keyboardHidden|screenSize" &gt;
&lt;intent-filter&gt;
    &lt;action android:name="com.github.mobile.commits.VIEW" /&gt;

    &lt;category android:name="android.intent.category.DEFAULT" /&gt;
&lt;/intent-filter&gt;
</code></pre>

<p></activity>
```</p>

<p>いずれにせよ、呼び出し元のActivityで直接Intentを生成するのは良くなさそうという話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidのデータ保存パターン]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/10/13/saving-data/"/>
    <updated>2013-10-13T22:36:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/10/13/saving-data</id>
    <content type="html"><![CDATA[<p>新しくアプリを作るときにAndroid内でのデータの持ち方や、アクセスの仕方、モデルの扱い方には色々あってどうしようってなると思うので、僕の少ない経験から考えたことをまとめます。</p>

<h1>ファイルに保存</h1>

<p>DBは注意して使わないとデータがアップデートしたら全部消えましたとか、あるカラムだけデータが入ってませんでしたとかあるので、データの簡易保存、たとえばレスポンスのjsonをそのままキャッシュするとか、検索する必要がなかったりあまり更新しないモデルをシリアライズして保存するときにはファイル保存が向いていると思います。</p>

<p>なお、JavaのSerializableは柔軟性が低く、バージョンアップでデータを壊してアプリが落ちるということが分かっていてもハンドリングできなくて防ぐのが難しかったりするので、シリアライズするときはgsonとかmessagepackを使うことをオススメします。</p>

<p>ただこのやり方でもキャッシュを管理するためのFileManager的なクラスは必要になってくると思うので、あまり複雑なことをやるのであればDBを使った方が楽になってくると思います。
独自のFileManagerクラスを作り込んでしまうと新しく入ってきた人がつらいですしね。</p>

<h1>DBに保存(素SQL)</h1>

<p>手でSQLを書くのはつらいです。人間はミスをするのでORMを使った方がいいと思います。</p>

<h1>ORM(ActiveAndroid)を利用してDBに保存</h1>

<p><a href="http://d.hatena.ne.jp/nattou_curry_2/20090102/1230903865">ActiveRecordパターン</a>のORMです。</p>

<h2>モデル定義</h2>

<p>```java
@Table(name = "Items")
public class Item extends Model {
  @Column(name = "Name", notNull = true, unique = true) // カラム名と制約を付けることができる　
  public String name; // ModelのFieldはpublicにしなければならない</p>

<p>  @Column(name = "Category") // リレーションが持てる
  public Category category;
}</p>

<p>@Table(name = "Categories")
public class Category extends Model {
  @Column(name = "Name")
  public String name;</p>

<p>  public List<Item> items() {</p>

<pre><code>return getMany(Item.class, "Category");
</code></pre>

<p>  }
}
```</p>

<h3>補足</h3>

<p>MedelのFieldに<a href="https://github.com/pardom/ActiveAndroid/blob/91bca4983a7da882b6585f124288f1aac7b299ef/src/com/activeandroid/Model.java#LC40">Idが定義</a>されていて、テーブルを作るときに<a href="https://github.com/pardom/ActiveAndroid/blob/91bca4983a7da882b6585f124288f1aac7b299ef/src/com/activeandroid/util/SQLiteUtils.java#LC161">Primary Keyになります。</a>
とはいえ内部的なIdだけでなく、サーバーからのレスポンスにIdも入っていると思うので、</p>

<p>```java
@Table(name = "Items")
public class Item extends Model {</p>

<pre><code>@Column(name = "ItemId")
public String id;

@Column(name = "Name", notNull = true, unique = true) // カラム名と制約を付けることができる　
public String name; // ModelのFieldはpublicにしなければならない

@Column(name = "Category") // リレーションが持てる
public Category category;
</code></pre>

<p>}
```</p>

<p>このように親クラスのIdとカラム名が被らないように定義して <code>item.id</code> でアクセスするのはどうだろうかと考えています。ここでうっかり <code>item.getId()</code> とすると思っていたのと違う値が返ってくるとかあるので注意が必要です。</p>

<p>リリース後にモデルのフィールドを変更した際にはmigrationをする必要があります。詳しくはmigrationのところで書きますが、モデルの変更は注意が必要です。</p>

<h2>Query</h2>

<h3>Save</h3>

<p><code>java
item = new Item();
item.category = restaurants;
item.name = "Red Robin";
item.save();
</code></p>

<h3>Delete</h3>

<p><code>java
Item item = Item.load(Item.class, 1);
item.delete();
// or
new Delete().from(Item.class).where("Id = ?", 1).execute();
</code></p>

<h3>Bulk insert</h3>

<p>```java
ActiveAndroid.beginTransaction();
try {</p>

<pre><code>    for (int i = 0; i &lt; 100; i++) {
        Item item = new Item();
        item.name = "Example " + i;
        item.save();
    }
    ActiveAndroid.setTransactionSuccessful();
</code></pre>

<p>}
finally {</p>

<pre><code>    ActiveAndroid.endTransaction();
</code></pre>

<p>}
```</p>

<p>トランザクションでラップすると40msで、使わないと4secかかるとのことです。</p>

<h3>補足</h3>

<p><a href="https://github.com/pardom/ActiveAndroid/blob/91bca4983a7da882b6585f124288f1aac7b299ef/src/com/activeandroid/query/From.java#LC54">join、leftJoin、outerJoin、innerJoin、crossJoinもできます。</a></p>

<h2>Migration</h2>

<p><code>/assets/migraions/2.sql</code> のようにsqlを置いておくとonUpgradeで実行されます。
カラムを追加するだけなら以下の書けます。</p>

<p><code>sql
ALTER TABLE Items ADD COLUMN price INTEGER;
</code></p>

<p>migrationはバージョンアップ後にユーザーの手元で<a href="https://github.com/pardom/ActiveAndroid/blob/791652b3fbf130448a5b152d12764a451e421b47/src/com/activeandroid/DatabaseHelper.java#LC137">順番に実行される</a>ので、アプリをインストールしてからしばらく期間をおいてからそのユーザーがアプリのバージョンアップをしたとすると、空いた期間分のマイグレーションが走って初回起動にやや時間がかかるかと思います。(そこまで大きな影響があるとは思いませんが)
起動時間より、migrationファイルを作り忘れたとかそっちの方がこわいので、モデルを変更するとき・レビューするときには気をつけて見たほうがよさそうです。</p>

<h2>その他ORMとの比較</h2>

<p>```java
// GreenDAO
List<Todo> ended = daoSession.getTodoDao().queryBuilder()</p>

<pre><code>    .where(new StringCondition(
        TodoDao.Properties.Status.columnName + "=?",
        Integer.toString(TodoDaoHelper.STATUS_END))).list();
</code></pre>

<p>// ActiveAndroid
new Select().from(Todo.class).where("Status=?", STATUS_END).execute();
```</p>

<p>greenDAOも見てみたのですが、daoSessionを引き回さないといけないのと、全体的に冗長だなという印象です。その分DAOの方がバグが入りにくそうなので、用途によって選択すればいいと思います。</p>

<p>See also:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/13680954/green-dao-vs-orm-lite-vs-active-android">Green DAO vs ORM lite vs Active Android</a></li>
<li><a href="http://software-workshop.eu/content/comparing-android-orm-libraries-greendao-vs-ormlite">Comparing android ORM libraries - GreenDAO vs Ormlite</a></li>
</ul>


<h1>まとめ</h1>

<p>キャッシュはファイルに保存して、モデルは要件に応じてORMを使ってDBに保存するのがいいと思います。
もしActiveAndroidを使うならAPIレスポンスをgsonとかで直接モデルに変換するとカオスになるのでentityを作るのがいいです、みたいにデータ保存はアプリの全体設計に関わってくるので、もし新しくアプリを作る場合はなるべく早い段階から検討をするといいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Narive UI]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/10/07/native-ui/"/>
    <updated>2013-10-07T23:55:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/10/07/native-ui</id>
    <content type="html"><![CDATA[<p>人は何を見てアプリっぽいと感じるのだろうか。</p>

<div>
<img src="http://gifzo.net/jTEl4YmZqD.gif" style="float:left">
<img src="http://gifzo.net/BHFQmyIfFHF.gif" style="float:left">
</div>




<div style="clear:both">
<img src="http://gifzo.net/BWvNCrQFYfF.gif" style="float:left">
<img src="http://gifzo.net/BGth4C1Ok64.gif" style="float:left">
</div>




<div style="clear:both">
<img src="http://gifzo.net/lSwyh4fg6P.gif" style="float:left">
<img src="http://gifzo.net/68NrYQW2tB.gif" style="float:left">
</div>




<div style="clear:both">
<img src="http://gifzo.net/OKyqq1D9yD.gif" style="float:left">
<img src="http://gifzo.net/mtHN4UIAMZ.gif" style="float:left">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feed UI Patterns]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/10/06/feed-ui-patterns/"/>
    <updated>2013-10-06T17:50:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/10/06/feed-ui-patterns</id>
    <content type="html"><![CDATA[<p>タイムラインとかフィードを見る系でいい感じのアプリない？と聞かれたのでアプリのUIを眺めていました。</p>

<h3>Feedly</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201310/feedly.png" width="300px"></p>

<h3>foursquare</h3>

<p><img src="http://img1.mobile-patterns.com/img/full/1363118152348-2013-03-03%2020.23.25.png" width="300px"></p>

<h3>YouTube</h3>

<p><img src="http://img3.mobile-patterns.com/img/full/1363118191519-2013-03-03%2022.46.46.png" width="300px"></p>

<h3>SocialCam</h3>

<p><img src="http://25.media.tumblr.com/tumblr_lyr31slYLr1r750h1o1_500.png" width="300px"></p>

<h3>Path</h3>

<p><img src="http://31.media.tumblr.com/tumblr_lvifhic1MU1r750h1o1_500.jpg" width="300px"></p>

<h3>Pinterest</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201310/pinterest.png" width="300px"></p>

<h3>Gunosy</h3>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201310/gunosy.png" width="300px"></p>

<p>見比べてみて、誰が投稿したか、誰が投稿に対して反応したか、何時に投稿されたか、何を最初に知らせたいのか、写真を良く見せたい、などそのサービスにとって何が重要なのかによって "いい感じ" の意味が変わってくるなあと思いました。</p>

<p>ちなみに僕はデザインの引き出しが少ないので、まとめサイト的なものを見て探しています。</p>

<ul>
<li><a href="http://www.mobile-patterns.com/">Mobile UI Patterns</a></li>
<li><a href="http://www.mobiledesignpatterngallery.com/mobile-patterns.php">Mobile Design Pattern Gallery</a></li>
<li><a href="">Android Interaction Design Patterns</a></li>
<li><a href="http://www.androidviews.net/">AndroidViews</a></li>
<li><a href="http://www.androiduipatterns.com/">Android // UI Patterns</a></li>
<li><a href="http://www.lovelyui.com/">lovely ui</a></li>
<li><a href="http://androidpttrns.com/">android pttrns</a></li>
<li><a href="http://androidniceties.tumblr.com/">Android Niceties</a></li>
<li><a href="http://www.uxarchive.com/">UX Archive</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
