<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-09-28T01:10:39+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android開発を始めたばかりの僕が読みたかった本]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/28/android-books/"/>
    <updated>2013-09-28T00:42:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/28/android-books</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/reading.png" alt="" /></p>

<p>最近、スマートフォンアプリ開発をやる人増えてきてオススメの本ある？って聞かれること多くなってきたのですが、その人のバックグラウンドによるところも大きいなと思うので、自分がAndroidアプリ開発を始めたときに読んでて役に立った、あるいは読んでおきたかったという目線で、良かった本をいくつか挙げようと思います。</p>

<h2>Effective Java</h2>

<p>Java界隈では多くの人が読んでいると思いますが、AndroidからJavaに入った人だと読んだことがない人もいると思います。
Javaを書く上でのエッセンスが詰め込まれているので、今でも十分に読む価値はあります。</p>

<h2>JUnit実践入門</h2>

<p>Androidだとテストが書かれないことが多いです。しかし、書いた方がデバッグの時間が短くなる上に保守もしやすくなりますし、テストを書きやすい構造を意識するようになって、上達が早くなりますし、設計も綺麗になります。(と思います)
僕も最初はテストを書かなかったのですが、もっと早くからテストを書いていればなと思っています。</p>

<h2>現場で使える[逆引き+実践]Androidプログラミングテクニック</h2>

<p>逆引き系の本なのですが、それだけでなく <strong>SQLiteの処理を高速化したい</strong> であったり、<strong>OutMemoryErrorをなんとか回避したいとか</strong> や、<strong>複数のアクティビティで共通の処理を、Template Methodパターンで実装したい/移譲で実装したい/Strategyパターンで実装したい</strong> など、デザインパターンや実践的なノウハウが詰まっている良い本でした。</p>

<h2>SMASHING Android UI</h2>

<p><a href="http://www.androiduipatterns.com/">Android // UI PATTERNS</a> というブログを書いていることで(僕の中で)有名なJuhani Lehtimakiさんの本です。最近翻訳されて日本で発売されました。
この本も、ただUIのコンポーネントの説明に終わるだけでなく、デザインとどう向き合うかや、ユーザーテストのやり方や、Androidプラットフォームの課題など、エンジニアにとっても大事なデザインのことが学べる数少ない良書だと思います。</p>

<hr />

<p>ここから先はAndroidの理解が進んだらというか、さらに高度なテクニックを知りたい人向けです。</p>

<h2>Java言語で学ぶデザインパターン入門【マルチスレッド編】</h2>

<p>通信などの非同期処理、並列処理を書くときに、パフォーマンスの悪いプログラムを書いてしまったり、最悪デッドロックを起こしてしまったりしてしまわないために、特にこれからライブラリを書く人はこの本を読んだ方がいいです。
またライブラリを書かない人でもこの本を読んでおくと「ああ、あのパターンで実装されているのか！」となって、理解の助けになったりします。</p>

<h2>サクサク動く！Androidアプリ高速化プログラミング</h2>

<p>アプリの規模が大きくなってきたり、局所的にプログラムを速くしたいというときにはこの本がおすすめです。デバッグ手法やレイアウトの最適化の話もあり、アセンブラやメモリアクセスやGCの話もあるので、プラットフォームがどのように動いているか知ることで、さらに良いアプリが書けるようになると思います。</p>

<hr />

<p>その他、本以外に参考にしているもの</p>

<h2><a href="https://twitter.com/androidniceties">@androidniceties</a></h2>

<p>Android Nicetiesのtumblrの更新をツイートしてくれます。
デザインを専門に学んでいなかった僕は、とにかく多くのパターンに触れなければと思っています。デザインは0から生まれるものではなく、過去の事例であったり、自然界に存在する美しいものの模倣から生まれるみたいな話がありますし、なにより実績のあるアプリのパターンは僕が考えだしたUIより質が高いです。</p>

<h2><a href="http://www.androidviews.net/">ANDROIDVIEWS</a></h2>

<p>あのアプリの実装オシャレだなとか思ったら、ここに載っていたりします。
自分で実装するときの助けになったりとか、ライブラリを使うことで簡単に実装できたりします。見てるだけでも楽しいです。</p>

<h2><a href="https://github.com/square">Square</a></h2>

<p>決済サービスのあのスクエアのGitHubアカウントです。dagger、otto、picasso、fest-androidなど、これらの有名なライブラリも実はこのスクエア製で、インタフェースの素晴らしさも去ることながら、プログラムがとても綺麗で、ある意味書籍よりも勉強になると思います。</p>

<hr />

<h2>まとめ</h2>

<p>こんなに一度に紹介されても読むのはたいへん…ですが、まずは調べてみて興味を持ったところから読んでみるといいと思います。
スマートフォンエンジニアはデザインから低レイヤまで幅広い知識を要求されます(といってもエンジニアリングってどの分野もそうなのですが)が、まずは自分の好きを伸ばして、それからもっと良いアプリを作るために、足りないところを補っていくというやり方がいいのかなと思いました。</p>

<p>このエントリをデプロイする前に読み返してみましたが、なんかすごい上から目線に見えますね。
僕もこれらを理解してるかというと全然そんなことなくて、何回も読み直したりしていますし、分からないこともたくさんあります。
しかし、開発から得られた経験やノウハウはどんどん共有して、技術とAndroidコミュニティを成熟させていきたい、という姿勢でやっていきたいと思っています。</p>

<p><blockquote class="twitter-tweet"><p>20数年間生きてきたけど、どこに行っても真面目だねって言われるし今日は「真面目で報われない感じがうちの弟と似ている…」と言われました(おわり)</p>&mdash; レジャスポ太郎 (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/statuses/383593487544754176">September 27, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[きんモザのアリスのgif画像を取得するAPIを使ったAndroidアプリを作った]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/26/alice-api/"/>
    <updated>2013-09-26T01:09:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/26/alice-api</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takiguchi0817/KinMoza/tree/master">
<img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/alice_github.png">
</a></p>

<p>See also</p>

<ul>
<li><a href="http://mogashi.hateblo.jp/entry/2013/09/24/000619">きんモザのアリスのgif画像を取得するAPIを作った</a></li>
<li><a href="http://pastak.hatenablog.com/entry/2013/09/25/004437">きんモザのアリスのgif画像を取得するAPIを利用したGoogle Chrome拡張を作った</a></li>
<li><a href="http://moroya.hatenablog.jp/entry/2013/09/25/224446">きんモザのアリスAPIを使って、好きなアリスを無限ループ視聴出来るWebアプリを作った</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[モヒートはモッキングフレームワークで味はとても美味しい]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/19/android-test/"/>
    <updated>2013-09-19T22:40:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/19/android-test</id>
    <content type="html"><![CDATA[<h1>mojito (モヒート)</h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mojito.jpg" alt="" /></p>

<p>モヒートは、キューバ・ハバナ発祥のカクテルの一つ。<br/>
由来は、新大陸として注目されていたアメリカ諸国から得られる富をコントロールする名目で、英国女王エリザベス1世が、スペイン領の都市を略奪する海賊達の手助けをしていた16世紀後半、海賊フランシス・ドレイクの部下であるリチャード・ドレイクが、1586年にモヒートの前身となる飲み物「ドラケ(draque)」をキューバの人々へ伝えた、という説が有力。<br/>
ラムをベースにソーダ、ライム、砂糖、ミントを加えたもの。ミントとソーダの清涼感が暑い夏にぴったりな「夏と言えば」の定番カクテル。</p>

<p>アーネスト・ヘミングウェイが好んで飲んでいた話は有名である。</p>

<h1><a href="http://code.google.com/p/mockito/">mockito</a> (モヒート)</h1>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201301/mockito.jpg" alt="" /></p>

<p>モヒートは、Javaのモックライブラリ。<br/>
モックライブラリは他にもいろいろあるけど <a href="http://code.google.com/p/mockito/wiki/MockitoVSEasyMock">EasyMockと比べても</a> mockitoの方が簡潔に書ける。<br/>
導入するとモヒートを飲んだあとのようにスカッとする。</p>

<p><strong>"Mockito is a mocking framework that tastes really good!"</strong> とのこと。(公式)</p>

<h1>mockitoナシ</h1>

<p>今までのやり方。まずモッククラスを定義して、</p>

<p>```java
import com.android.volley.Network;
import com.android.volley.NetworkResponse;
import com.android.volley.Request;
import com.android.volley.VolleyError;</p>

<p>public class MockNetwork implements Network {</p>

<pre><code>private byte[] mFakeResponseData = null;

public void setFakeResponseData(byte[] data) {
    mFakeResponseData = data;
}

@Override
public NetworkResponse performRequest(Request&lt;?&gt; request) throws VolleyError {
    return new NetworkResponse(mFakeResponseData);
}
</code></pre>

<p>}
```</p>

<p>テストするときに返したいデータをセットする。</p>

<p><code>java
MockNetwork mockNetwork = new MockNetwork();
mockNetwork.setFakeResponseData("{\"code\":200}".getBytes());
</code></p>

<h1>mockitoアリ</h1>

<p>このメソッドが呼ばれたときにこれを返す、とするだけ。</p>

<p>```java
Network mockNetwork = mock(Network.class);
when(mockNetwork.performRequest(any(Request.class))).</p>

<pre><code>    thenReturn(new NetworkResponse("{\"code\":200}".getBytes()));
</code></pre>

<p>```</p>

<p>インタフェースが統一されることによって、次にテストを書く人が「MockNetworkというクラスがあるらしい、ふむふむ、setFakeResponseDataに渡したbyte列がperformRequestで返ってくるのか」と調べる時間を省くことができる。</p>

<p>特定のオブジェクトの一部のメソッドの振る舞いを変えるときもカンタン。</p>

<p><code>groovy
doReturn(new HashMap&lt;String, String&gt;() { { put("fake", "foo"); } }).when(spyRequest).getHeaders();
</code></p>

<p>ちなみにdependencyを解決できなかったので、jarを落として ./src/instrumentTest/libs/ に配置して以下のようにした。</p>

<p><code>groovy
instrumentTestCompile fileTree(dir: './src/instrumentTest/libs', include: '*.jar')
</code></p>

<p>モヒートにギョームでもプライベートでもお世話になってる。</p>

<hr />

<p>↑ここまでモヒートの話↑<br/>
↓ここまで他のフレームワークの紹介↓</p>

<h1><a href="http://square.github.io/fest-android/">Fest Android</a></h1>

<p>安心と信頼の <a href="https://github.com/square">Square</a> 製テストフレームワーク。(Squareが公開してるライブラリは本当にどれもレベルが高い)<br/>
元ネタは <a href="http://fest.easytesting.org/">Fixtures for Easy Software Testing</a> のAndroid拡張となっている。</p>

<h3>REGULAR JUNIT</h3>

<p><code>java
assertEquals(View.VISIBLE, layout.getVisibility());
assertEquals(VERTICAL, layout.getOrientation());
assertEquals(4, layout.getChildCount());
assertEquals(SHOW_DIVIDERS_MIDDLE, layout.getShowDividers());
</code></p>

<h3>FEST ANDROID</h3>

<p>```java
assertThat(layout).isVisible()</p>

<pre><code>.isVertical()
.hasChildCount(4)
.hasShowDividers(SHOW_DIVIDERS_MIDDLE);
</code></pre>

<p>```</p>

<h1><a href="https://github.com/mttkay/calculon">calculon</a></h1>

<p><img src="https://raw.github.com/mttkay/calculon/master/assets/calculon.png" alt="" /></p>

<p>こちらも便利メソッドを提供している。</p>

<p>```java
// direct assertion on current activity
assertThat().inPortraitMode();
assertThat().viewExists(R.id.launch_bar_button);</p>

<p>// assert specific condition on current activity</p>

<pre><code>assertThat().satisfies(new Predicate&lt;Activity&gt;() {
public boolean check(Activity target) {
    return target.isTaskRoot();
}
</code></pre>

<p>});
```</p>

<p>Fest Androidとの違いは、calculonはStoryTestを提供しており、画面遷移を伴うストーリーをテストとして実行することができる。</p>

<h1>Robolectric + Spock</h1>

<p>この動画で紹介されているGroovyの元祖PowerAssert系テストフレームワーク <a href="https://code.google.com/p/spock/">Spock</a> を頑張ってAndroidで動かすというもの。</p>

<iframe width="420" height="315" src="http://takiguchi0817.github.com//www.youtube.com/embed/aDoQxqO_6rI" frameborder="0" allowfullscreen></iframe>


<p>RobolectricはAndroidのテストをJVM上で実行するためのフレームワークで、AndroidのクラスをJavaのShadowクラスに変換して実行するしくみになっている。
JVMでテストが実行できるようになるということは、Groovyでもテストが書けるということなので、Robolectricを導入すればSpockも使えるようになる。</p>

<h3>Robolectric</h3>

<p>```java
@Test
public void testDialogContent() {</p>

<pre><code>// given
final MainActivity mainActivity = new MainActivity();
mainActivity.onCreate(null);

// when
mainActivity.button.performClick();

// then
final ShadowAlertDialog dialog = (ShadowAlertDialog) Robolectric.shadowOf(ShadowDialog.getLatestDialog());
Assert.assertEquals("title", dialog.getTitle());
Assert.assertEquals("Ok", dialog.getButton(AlertDialog.BUTTON_POSITIVE).getText());
Assert.assertEquals("Cancel", dialog.getButton(AlertDialog.BUTTON_NEGATIVE).getText());
Assert.assertEquals("Dismiss", dialog.getButton(AlertDialog.BUTTON_NEUTRAL).getText());
Assert.assertEquals("Dialog Content", dialog.getMessage());
</code></pre>

<p>}
```</p>

<h3>Robolectric + Spock</h3>

<p>```groovy
def "should displayed dialog's button has good text"() {</p>

<pre><code>given:
def mainActivity = new MainActivity()
mainActivity.onCreate(null)

when:
mainActivity.button.performClick()
def dialog = (ShadowAlertDialog) Robolectric.shadowOf(ShadowDialog.getLatestDialog());

then:
dialog.getButton(number).text == value

where:
number                      | value
AlertDialog.BUTTON_POSITIVE | "Ok"
AlertDialog.BUTTON_NEGATIVE | "Cancel"
AlertDialog.BUTTON_NEUTRAL  | "Dismiss"
</code></pre>

<p>}
```</p>

<p>導入コスト、学習コスト、効果を鑑みつつ、引き続きテスティングフレームワークをテイスティングしていきます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Genymotion速かった]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/09/06/genymotion/"/>
    <updated>2013-09-06T23:31:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/09/06/genymotion</id>
    <content type="html"><![CDATA[<p>AndroVMがいつの間にかGenymotionに名前変わってました。</p>

<h3><a href="http://www.genymotion.com/">Genymotion</a> - BOOST YOUR APP TESTING! Simple, practical and effective.</h3>

<p><img src="http://www.genymotion.com/assets/genymotion-fits-in-your-developping-environment-.png" alt="" /></p>

<p>「x86エミュレータとそんなに変わらないんでしょ」と思っていましたが、これを機にインストールして動かしてみたらサックサクのヌルヌルで驚きました。<br/>
もしかして、実機より速いのでは？と思って2、3000行の比較的小規模なライブラリでconnectedInstrumentTestを実行して、その実行時間を比較してみました。
結果は環境によって結構変わると思うので、あくまで目安で。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/genybench.png" alt="" /></p>

<h3>実機よりも速かった</h3>

<p>しかもエミュレータだとGoogle Playのアプリが落とせなかったりするのですが、Googleアカウントを登録して同期することもできるし、アプリを落として実機より軽快な環境で遊ぶこともできます。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/download.png" alt="" /></p>

<p>ポチポチ押すだけで5分くらいあればインストールできるので、面倒くさがりな僕でもインストールできました。</p>

<p>今回のケースだとそんなにですが、1回のテストで20分かかる環境だとテストが速く終わると相当嬉しみがあるので、
しばらく使ってみて良さそうだったら、本番環境のJenkinsのAndroidエミュレータをGenymotionに置き換えるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Casual Talks #1]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/08/31/android-casual-talks-1/"/>
    <updated>2013-08-31T17:44:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/08/31/android-casual-talks-1</id>
    <content type="html"><![CDATA[<h1>はじめに</h1>

<p>Androidの開発をしていて、</p>

<ul>
<li>WebとiOSとAndroidで足並み揃えるのどうするんだろう</li>
<li>プラットフォーム間のUIの統一についてはどう考えたらいいんだろう</li>
<li>他のアプリではA/Bテストとかやってるのかな</li>
<li>PCからスマホウェブでは全機能を移植するけど、その流れでアプリでも全機能使えるようにって会社やユーザから言われるけどどうしたらいいのか</li>
<li>PCからネイティブアプリでは機能を削ってシンプルにってアプリ開発者は言うけど、削られた機能はどこにいくのか</li>
<li>多くのサービスでスマホやタブレットのUUが伸びてその分PCのPVが下がってると思うけど、スマホ時代の広告のうまい組み込み方とか売り方について話を聞きたい</li>
<li>WebViewでアプリを組むとステートが複雑になったり標準的なユーザ体験を提供するのが難しい</li>
<li>ブランチ管理でgit-flowを導入しようかと思ったけど、管理するコストと考えるとあれかなと思ったのでGitHub Flowでやっているけど、他社ではどうしてるのか</li>
<li>大規模でも破綻しない設計とは(「MVCを意識して書く」だと個人の技量に左右されるしスケールしない感じがする)</li>
<li>効果的なテストとメトリクス計測(取るだけじゃなくて改善するところも含めて)ってどうするのがいいんだろう</li>
<li>継続的にパフォーマンス計測をしたいけど、Jenkinsでどう実現したらいいのだろう</li>
<li>レビューで叩かれるとへこむ</li>
<li>デザイナーがみんなiPhoneユーザだ</li>
<li>むしろエンジニアもMacとiPhoneを使っている人が多くて、Androidは現代のIEって言われる</li>
</ul>


<p>など、悩むことが多いです。</p>

<p>こういう技術書にのっていない話は人に聞くのが一番早いかなと思っていますが、今までAndroid界隈では集まってこういう話をする場がなかったように思います。(僕が知らないだけであったのかもしれませんが)<br/>
それでこの度、カジュアルに情報交換をしたいなと思って、<a href="http://atnd.org/events/41600">Android Casual Talks #1</a>を開きました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual0.png" width="600px"></p>

<p>内容については「ぶっちゃけ過ぎてるんであんまりツイートしないでください」っていうのもあったので、さらっと概要だけまとめました。</p>

<h1>1. クックパッドの開発環境について</h1>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual4.jpg" width="600px"></p>

<p>僕はAndroid Studio + Gradleの導入とか、リポジトリ管理とか、ビルドの設定とか、人が増えてもスケールしそうな開発の話をしました。</p>

<h1>2. 品質を保つための組織的な取り組みと人に依存しないテスト</h1>

<p>メーカーの開発の品質は高いと伺っていたので、品質への取り組みについてお話いただきました。<br/>
いわゆるウォーターフォールモデルだけど、1週間のイテレーションを回して目標値への達成度の確認と是正を行っていて、さすがにしっかり管理をしているなと思いました。<br/>
メトリクスを細かく取っていたのも印象的でした。</p>

<h1>3. グリーにJenkinsを導入して2年半でおこった事</h1>

<p>Jenkinsの運用の話＆エモ枠としてお話いただきました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/25716362" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/okazaki/2013-0829-jenkins-for-cookpad-android" title="2013 08-29 jenkins for cookpad android" target="_blank">2013 08-29 jenkins for cookpad android</a> </strong> from <strong><a href="http://www.slideshare.net/okazaki" target="_blank">Takayuki Okazaki</a></strong> </div></p>

<ul>
<li><p>変えないことは大きなリスク</p>

<ul>
<li>変えないと、技術的負債激増</li>
<li>ある時点から技術的負債のために働くことになる</li>
</ul>
</li>
<li><p>変えるのはツールではなくワークフロー</p>

<ul>
<li>ツールの導入で解決 -> 仕組みの改善で解決</li>
<li>あるべき論、精神論 -> しくみ、制度化</li>
</ul>
</li>
</ul>


<p>いい話でした。詳しくはスライドを御覧ください。</p>

<h1>4. injectionの基礎（android編）</h1>

<p>イベント開催を知った師匠が話してくれました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual2.png" width="600px"></p>

<p>DIフレームワークの基礎ということで、依存性の注入や制御の反転について、あるチャットアプリの例を通して、仕様が変わっていく中でプログラムを綺麗な状態に保ちながらテストをしやすくする方法について話していただきました。</p>

<p>社内ではひっそりと<a href="https://github.com/roboguice/roboguice">RoboGuice</a>を使っていたのですが、パフォーマンスとかで<a href="http://square.github.io/dagger/">Dagger</a>の方が良いみたいな流れが最近あるので、そっちに移行したいなと思いました。</p>

<h1>5. 意外と役立つ？Android Open Source Projectのすすめ</h1>

<p>Androidアプリのデバッグ手法について話していただきました。</p>

<ul>
<li><p>アプリ開発で悩んだときはどうしますか？</p>

<ul>
<li>ググる</li>
<li>Android Developersで調べる</li>
<li>色々試す</li>
</ul>
</li>
<li><p>上の方法で解決できないときはどうしますか？</p>

<ul>
<li>他のアプリを逆コンパイル</li>
<li>明日考える</li>
<li>仕様をドロップ</li>
</ul>
</li>
</ul>


<p>でも仕様を諦めるのはエンジニアとして負けた気分になる。そこで、<a href="https://sites.google.com/site/devcollaboration/codesearch">{OpenGrok</a></p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual3.png" width="600px"></p>

<p>OpenGrokは、Androidのソースコードを簡単に見るために作られた検索エンジンで、Full Search、Definition、Symbol、File Path、Historyなど絞り込んで検索をすることができるみたいです。<br/>
ちょっと調べ物をするのに便利そうでした。</p>

<h1>6. アプリのリニューアルとその効果測定について</h1>

<p>Android2系のデザインで作られた黒背景に白文字の「葬式UI」だったPixivアプリをリニューアルしたときの反響と効果測定についてお話いただきました。</p>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual5.png" width="600px"></p>

<p>リニューアルをしたときにはGoogle Playで☆1の嵐が吹き荒れて…</p>

<ul>
<li>「最悪。アップデート前の方がいいです。」</li>
<li>「凄まじいまでの改悪、なぜこれでゴーが出たのか」</li>
</ul>


<p><strong>開発者「もう許してくださいって思いました。」</strong></p>

<p>ただ定性的な意見だけではなく、定量的なデータからこのリニューアルはどうだったのかというと、操作性の向上を図ったことにより、</p>

<ul>
<li>ブックマークのイベント数：4.7倍</li>
<li>評価ボタンのイベント数：9.5倍</li>
</ul>


<p>となり、順調にユーザ数も増加しているそうです。<br/>
レビューと合わせて計測することの大切さを言っていました。</p>

<h1>おわりに</h1>

<p><img src="https://dl.dropboxusercontent.com/u/54255753/blog/201309/casual1.png" width="600px"></p>

<p>タイ料理が美味しかったのと、各社のいい話が聞けたのと、イベントを通して多くのAndroidエンジニアと知り合えたのはとても良かったです。
一方で、一通りトークが終わったあと時間が押してて「すいません、あと12分で交流してください」となってしまったのが残念でした。</p>

<p>このイベントの定員50人だったんですけど、150人以上の登録があって、思っていたより人が集まって驚きました。
それなりに需要があれば#2, #3...とやるかもしれないので、やりたいとか、会場を提供できるよとか、そういうのがあればまたやりたいですね。
次やるのなら交流をメインにしたいので、20分くらいのトークは2本にして、あとは5分のLTを募集してたくさんの人に発表してもらったあとに、さっき◯◯の話をしていたあの人と話そう、みたいにすると良いかなと思いました。</p>

<p>Androidエンジニアに幸あれ。</p>
]]></content>
  </entry>
  
</feed>
