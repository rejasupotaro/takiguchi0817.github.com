<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-09-28T09:14:01+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[この前飲み会で話したS式の話]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/03/07/sicp-hanseikai/"/>
    <updated>2013-03-07T22:53:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/03/07/sicp-hanseikai</id>
    <content type="html"><![CDATA[<p><blockquote class="twitter-tweet" lang="ja"><p>三四郎がちゃらい感じになってる件。 <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; Hitoshi ASAIさん (@hito_asa) <a href="https://twitter.com/hito_asa/status/309606049814560769">2013年3月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" lang="ja"><p>チャラいとは... <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; ねこはるさん (@halcat0x15a) <a href="https://twitter.com/halcat0x15a/status/309606266827862018">2013年3月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" lang="ja"><p>どきどきする。 <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; Kanda Taikiさん (@konnyakmannan) <a href="https://twitter.com/konnyakmannan/status/309606337178898432">2013年3月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" lang="ja"><p>これまでの人生の全てを反省します <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; ıɐɯɐu ıɥsoʇɐsさん (@ainame) <a href="https://twitter.com/ainame/status/309607801758560256">2013年3月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" lang="ja"><p>厳かな雰囲気で怖い <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/309606522273558529">2013年3月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" lang="ja"><p>SICPを読むと年収が上がるらしい <a href="https://twitter.com/search/%23sicphansei">#sicphansei</a></p>&mdash; Akihiro Okunoさん (@choplin) <a href="https://twitter.com/choplin/status/309613209743130624">2013年3月7日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<p><a href="http://www.zusaar.com/event/535003">SICP読書会大反省会</a>でした。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/17005410" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/rejasupotaro/s-17005410" title="この前飲み会で話したS式の話" target="_blank">この前飲み会で話したS式の話</a> </strong> from <strong><a href="http://www.slideshare.net/rejasupotaro" target="_blank">rejasupotaro</a></strong> </div></p>

<p>気がついたらLTをすることになってたのでLTをしました。渋谷近辺ではどの会社もだいたいSICP読書会をしているようですが、なかなか人が集まらなくて休止するところが多い中、一年で読み切った弊社はすごいんだなあと思いました。</p>

<p>ちょっと僕はお酒に弱くすでにヘロヘロな状態でこの記事を書くのも限界なのですが、SICP読書会に参加してきた感想としては、世間で思われてるほどLISPは怖くないし、LISPerの方々もみんな優しくていい人ばかりでした。</p>

<p>一年間ありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dislable Java]]></title>
    <link href="http://takiguchi0817.github.com/blog/2013/03/05/dislable-java/"/>
    <updated>2013-03-05T00:32:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2013/03/05/dislable-java</id>
    <content type="html"><![CDATA[<h3>若手なので、<a href="http://www.zusaar.com/event/521003">若手Webエンジニア交流会</a>に行ってきました。</h3>

<p>アプリケーション開発から言語、インフラまで幅広い話が聞けたのは良かったです。意識がちょっぴり高まりました。またWeb系、みんなイケイケなのであれをあれしないといけないなどと思いました。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/16883585" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/rejasupotaro/dislable-java" title="Dislable java" target="_blank">Dislable java</a> </strong> from <strong><a href="http://www.slideshare.net/rejasupotaro" target="_blank">rejasupotaro</a></strong> </div></p>

<p>かくいう僕も若手なので、フレッシュな言語・ジャバについて発表してきました。</p>

<h3>言語のはなし</h3>

<p>ジャバの発表をした当日に、偶然にもdynamicおじさんが記事を公開して、</p>

<h4><a href="http://d.hatena.ne.jp/perlcodesample/20130227/1361928810">変数に型がないということの利点について考える</a></h4>

<p>これが連鎖的に型論争の呼んで、TLが地獄みたいになった。</p>

<ul>
<li><a href="http://bleis-tift.hatenablog.com/entry/2013/02/28/%E3%80%8C%E5%A4%89%E6%95%B0%E3%81%AB%E5%9E%8B%E3%81%8C%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%AE%E5%88%A9%E7%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%80%83%E3%81%88">「変数に型がないということの利点について考える」の問題について考える</a></li>
<li><a href="http://blog.practical-scheme.net/shiro/20130227-equibillium">型付けと変更の時定数</a></li>
<li><a href="http://d.hatena.ne.jp/Nagise/20130228/1362069158">言語機能としての型、概念としての型</a></li>
<li><a href="http://d.hatena.ne.jp/tt_clown/20130302/programming_languages">動的型付き言語と静的型付き言語</a></li>
<li><a href="http://blog.practical-scheme.net/shiro/20130302-why-do-you-wanna-do-it">型論争</a></li>
<li><a href="http://www.gembook.org/benefits_of_dynamic_typing.html">動的型言語の使いどころ</a></li>
<li><a href="http://d.hatena.ne.jp/mizchi/20130303/1362286050">動的型とか静的型の話の前に「作者の気持ち」を考えろ</a></li>
<li><a href="https://gist.github.com/taichi/5079626">「作者の気持ち」以前に、揚げ足とる相手の最新状況くらい調べろ</a></li>
</ul>


<p><blockquote class="twitter-tweet" lang="ja"><p>若手webでプログラミング言語の話をしたのでスライド上げようと思ったけど、同日にdynamicおじさんの記事が公開されて、それ以来みんな型の話してるし、このタイミングで公開するのこわいので様子をみてる</p>&mdash; レジャスポ太郎さん (@rejasupotaro) <a href="https://twitter.com/rejasupotaro/status/307880537324929024">2013年3月2日</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
正直これのおかげで、このスライドもアップするか迷ったけど、だいぶ収まってきた感じするので一応上げておきます。</p>

<p><a href="http://d.hatena.ne.jp/perlcodesample/20130227/1361928810">変数に型がないということの利点について考える</a>についてはまったく共感ができないけど、静的型付けか動的型付けかという問題、具体的にディスろうと思うとソースコードが必要になって、ソースコードを持ち出すともはやstaticかdynamicかに留まらず言語による殴り合いになってしまうし、かと言って具体的な内容に踏み込まないと思想とか宗教の話になってしまうので、穏健派の僕は遠くからその様子を眺めていたいという感じです。</p>

<p>あと言語って、長くやると愛着がわいてきて自分ではディスるわりに他人からディスられるとイラッとするみたいなところもあるので難しいですね、なんてふわっとしたまとめで閉めさせてもらいます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[続・Androidの画像の暗号化]]></title>
    <link href="http://takiguchi0817.github.com/blog/2012/12/31/java-aes/"/>
    <updated>2012-12-31T23:30:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2012/12/31/java-aes</id>
    <content type="html"><![CDATA[<p>前にベンチ取ったときは遅くて使えないって思ったけど、「いやそんなに遅くないでしょう」と言われたので、一からやり直しました。</p>

<h2>AES暗号とは</h2>

<p>AES暗号はアメリカ合衆国の新暗号規格 (Advanced Encryption Standard) として規格化された共通鍵暗号方式である。1977年に発行された暗号規格DESの安全性が技術進歩により低下したため、新たな暗号方式の公募を行い、2001年3月に FIPS PUB 197 として公表され、米軍主導のネットワーク秘匿化オープンソースプロジェクトであるTorなどに採用された。 〜wikipediaより〜</p>

<p>とりあえずAESは、「ブロック暗号」で「ブロック長が128ビット」で「鍵長が128・192・256ビットの3つが利用できる」ということみたいです。</p>

<h2>AESによる暗号化・復号化</h2>

<p><a href="http://www.ne.jp/asahi/hishidama/home/tech/java/aes.html">AESによる暗号化・復号化</a><br/>
今回はAndroidで画像をストレージに保存する際の暗号化について考えます。</p>

<h4>コード</h4>

<p>ENCRYPT_ALGORYTHM_MODE が "AES/CTR/PKCS5Padding" となっていますが、
これはAESをCTRモードで<a href="http://pentan.info/doc/block_cipher.html#anc_padding">PKCS#5</a>というパディング方式で暗号化するということです。</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/d/d3/Cbc_encryption.png" alt="CBC Encryption" /></p>

<ul>
<li>encrypt: 保存先のファイルと画像を引数にして、画像を暗号化して保存する</li>
<li>decrypt: ファイル名を引数にして、復号した画像を返す</li>
</ul>


<p>※追記：このコードはそのまま使えません！パスワードの生成については一番最後をお読みください。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">rejasupotaro</span><span class="o">.</span><span class="na">sampleapp</span><span class="o">.</span><span class="na">encrypt</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.ByteArrayOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.InvalidAlgorithmParameterException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.InvalidKeyException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.Key</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.security.NoSuchAlgorithmException</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">javax.crypto.Cipher</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.CipherInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.CipherOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.NoSuchPaddingException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.spec.IvParameterSpec</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.crypto.spec.SecretKeySpec</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.pm.PackageInfo</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.pm.PackageManager</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.pm.PackageManager.NameNotFoundException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Bitmap</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Bitmap.CompressFormat</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.BitmapFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">com.rejasupotaro.sampleapp.utils.CloseableUtils</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ImageEncryptor</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">ImageEncryptor</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ENCRYPT_ALGORYTHM</span> <span class="o">=</span> <span class="s">&quot;AES&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ENCRYPT_ALGORYTHM_MODE</span> <span class="o">=</span> <span class="n">ENCRYPT_ALGORYTHM</span> <span class="o">+</span> <span class="s">&quot;/CTR/PKCS5Padding&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">DEFAULT_KEY_LENGTH</span> <span class="o">=</span> <span class="mi">16</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">mPassword</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アプリ固有の情報ということでアプリをインストールした時間をもとに、</span>
</span><span class='line'><span class="c1">// getByte()したときにデフォルトの鍵長の128ビットになるStringを返す</span>
</span><span class='line'><span class="c1">// !!!!このやり方には問題があります。追記を参照!!!!</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">mPassword</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">mPassword</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PackageInfo</span> <span class="n">packageInfo</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">packageInfo</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getPackageManager</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">getPackageInfo</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getApplicationInfo</span><span class="o">().</span><span class="na">packageName</span><span class="o">,</span> <span class="n">PackageManager</span><span class="o">.</span><span class="na">GET_META_DATA</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NameNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">long</span> <span class="n">installTime</span> <span class="o">=</span> <span class="n">packageInfo</span><span class="o">.</span><span class="na">firstInstallTime</span><span class="o">;</span>
</span><span class='line'>    <span class="n">mPassword</span> <span class="o">=</span> <span class="n">formatValidPassword</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">installTime</span><span class="o">));</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">mPassword</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">formatValidPassword</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">DEFAULT_KEY_LENGTH</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;0&quot;</span> <span class="o">+</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">encrypt</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">),</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ByteArrayOutputStream</span> <span class="n">baos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>    <span class="n">bitmap</span><span class="o">.</span><span class="na">compress</span><span class="o">(</span><span class="n">CompressFormat</span><span class="o">.</span><span class="na">JPEG</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="n">baos</span><span class="o">);</span>
</span><span class='line'>    <span class="kt">byte</span><span class="o">[]</span> <span class="n">bin</span> <span class="o">=</span> <span class="n">baos</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">encrypt</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">bin</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">iv</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">content</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">encrypt</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">filePath</span><span class="o">),</span> <span class="n">content</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">encrypt</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">content</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span>
</span><span class='line'>        <span class="kd">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">FileOutputStream</span> <span class="n">fos</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">ENCRYPT_ALGORYTHM</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">ENCRYPT_MODE</span><span class="o">,</span> <span class="n">getKey</span><span class="o">(</span><span class="n">password</span><span class="o">),</span> <span class="k">new</span> <span class="n">IvParameterSpec</span><span class="o">(</span><span class="n">iv</span><span class="o">));</span>
</span><span class='line'>        <span class="n">fos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>        <span class="n">fos</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">cipher</span><span class="o">.</span><span class="na">doFinal</span><span class="o">(</span><span class="n">content</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidAlgorithmParameterException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalBlockSizeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">BadPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">CloseableUtils</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Bitmap</span> <span class="nf">decrypt</span><span class="o">(</span><span class="n">String</span> <span class="n">filePath</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">iv</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">CipherInputStream</span> <span class="n">cis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">filePath</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Cipher</span> <span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">ENCRYPT_ALGORYTHM_MODE</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IvParameterSpec</span> <span class="n">ivspec</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IvParameterSpec</span><span class="o">(</span><span class="n">initialVector</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cipher</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="n">Cipher</span><span class="o">.</span><span class="na">DECRYPT_MODE</span><span class="o">,</span> <span class="n">getKey</span><span class="o">(</span><span class="n">password</span><span class="o">),</span> <span class="n">ivspec</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CipherInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">,</span> <span class="n">cipher</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeStream</span><span class="o">(</span><span class="n">cis</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchPaddingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidKeyException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvalidAlgorithmParameterException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">v</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">CloseableUtils</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class='line'>        <span class="n">CloseableUtils</span><span class="o">.</span><span class="na">close</span><span class="o">(</span><span class="n">cis</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Key</span> <span class="nf">getKey</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">SecretKeySpec</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(),</span> <span class="n">ENCRYPT_ALGORYTHM</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>_</p>

<p>動作モードについて補足すると、</p>

<ul>
<li>ECB(Electronic CodeBook)電子符号表モード

<ul>
<li>単純にブロックごとに暗号化する。安全でなく使うべきでない。</li>
</ul>
</li>
<li>CTR(Counter)カウンターモード

<ul>
<li>各ブロックを初期値から1ずつ増加するカウンタの暗号化との排他的論理和で暗号化する。各ブロックを並列に処理できる。</li>
</ul>
</li>
<li>CBC(Cipher Block Chaining)暗号ブロック連鎖モード

<ul>
<li>ブロックを前ブロックの暗号化結果と排他的論理和を取ってから暗号化する。最初のブロックは初期ベクタという乱数と排他的論理和を取る。</li>
</ul>
</li>
<li>CFB(Cipher Feed Back)暗号フィードバックモード

<ul>
<li>前ブロックを暗号化してブロックとの排他的論理和をとって暗号文とする。最初のブロックは初期ベクタの暗号化との排他的論理和で暗号化する。</li>
</ul>
</li>
<li>OFB(Output Feed Back)出力フィードバックモード

<ul>
<li>初期ベクタに繰り返し暗号化処理して乱数ストリームを作り、これと平文との排他的論理和を暗号文とする。</li>
</ul>
</li>
</ul>


<p>ということらしいです。詳しくは<a href="http://akademeia.info/index.php?%A5%D6%A5%ED%A5%C3%A5%AF%B0%C5%B9%E6%A4%CE%CD%F8%CD%D1%A5%E2%A1%BC%A5%C9#pdc05fdd">こちら</a></p>

<h2>ベンチマーク</h2>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201212/madoka.jpg" alt="" />
うちに届いた年賀状の画像の暗号化にどれくらい時間がかかるのか計測してみました。</p>

<ul>
<li>サイズ: 864px * 480px</li>
<li>端末スペック: Xperia arc

<ul>
<li>OS  Google Android 2.3</li>
<li>CPU: Snapdragon 1GHz(MSM8255)</li>
<li>RAM: 512MB</li>
</ul>
</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>検証コード  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'><span class="n">ImageEncryptor</span><span class="o">.</span><span class="na">encrypt</span><span class="o">(</span><span class="n">filePath</span><span class="o">,</span> <span class="n">bitmap</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="n">ImageEncryptor</span><span class="o">.</span><span class="na">decrypt</span><span class="o">(</span><span class="n">filePath</span><span class="o">,</span> <span class="n">password</span><span class="o">);</span>
</span><span class='line'><span class="kt">long</span> <span class="n">stop</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'><span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;DEBUG&quot;</span><span class="o">,</span> <span class="s">&quot;実行にかかった時間は &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">stop</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; ミリ秒です。&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>結果  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">01</span><span class="o">-</span><span class="mi">02</span> <span class="mi">14</span><span class="o">:</span><span class="mi">41</span><span class="o">:</span><span class="mf">02.026</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">DEBUG</span><span class="o">(</span><span class="mi">26043</span><span class="o">):</span> <span class="err">実行にかかった時間は</span> <span class="mi">1177</span> <span class="err">ミリ秒です。</span>
</span><span class='line'><span class="mi">01</span><span class="o">-</span><span class="mi">02</span> <span class="mi">14</span><span class="o">:</span><span class="mi">40</span><span class="o">:</span><span class="mf">17.496</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">DEBUG</span><span class="o">(</span><span class="mi">26043</span><span class="o">):</span> <span class="err">実行にかかった時間は</span> <span class="mi">1149</span> <span class="err">ミリ秒です。</span>
</span><span class='line'><span class="mi">01</span><span class="o">-</span><span class="mi">02</span> <span class="mi">14</span><span class="o">:</span><span class="mi">40</span><span class="o">:</span><span class="mf">38.406</span><span class="o">:</span> <span class="n">D</span><span class="o">/</span><span class="n">DEBUG</span><span class="o">(</span><span class="mi">26043</span><span class="o">):</span> <span class="err">実行にかかった時間は</span> <span class="mi">1233</span> <span class="err">ミリ秒です。</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>traceviewでも確認</p>

<p><img src="http://dl.dropbox.com/u/54255753/blog/201212/trace.png" alt="" /></p>

<p>AESFastEngine.encryptBlockが7割、AESFastEngine.decryptBlockが3割くらいですね。</p>

<h2>まとめ</h2>

<p>暗号化にどれくらい時間かかるのかなと思ったけど、あまりサイズが大きくなければわりと実用的っぽい！</p>

<h2>追記</h2>

<p>パスワードの生成でアプリのインストール時間を見ていましたが、firstInstallTimeがAPI level 9からだったので、Androidバージョン2.1と2.2で使えませんでした。
なので別の方法を考えようと思っていたら、<a href="http://d.hatena.ne.jp/ockeghem/20120213/p1">書籍「Android Security」の暗号鍵生成方法には課題がある</a> という記事を見つけました。
というわけでランダムなbyte列を16個生成して128bitにすることにした。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">16</span><span class="o">];</span>
</span><span class='line'><span class="n">SecureRandom</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecureRandom</span><span class="o">();</span>
</span><span class='line'><span class="n">rand</span><span class="o">.</span><span class="na">nextBytes</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>_</p>

<p>このようにパスワードを生成します。
RandomじゃなくてSecureRandomを使った方が良いです。
またパスワードはStringで持つのではなくbyte[]で持っていた方が良いです。
SQLiteに保存するならBLOBで、SharedPreferenceならbase64にエンコードして書き込むようにします。</p>

<p><link href="http://fonts.googleapis.com/css?family=Cantarell" rel="stylesheet" type="text/css"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ジャバ8のラムダでYコンビネータが書きたかった…]]></title>
    <link href="http://takiguchi0817.github.com/blog/2012/10/30/java-lambda/"/>
    <updated>2012-10-30T04:50:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2012/10/30/java-lambda</id>
    <content type="html"><![CDATA[<p>今日のSICP読書会でLazyKanがちょっとした話題になった。<br/>
<img src="http://dl.dropbox.com/u/54255753/blog/201210/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202012-10-30%205.19.46.png" alt="LazyKan" /><br/>
画像から狂気を感じましたが、しかしYコンビネータ、よく耳にするけどどういうものか分かってなかった。</p>

<p>ジャバ8でラムダ入るらしいので、書いてみたら何か分かるかもしれないと思って、<br/>
amachanさんの<a href="http://d.hatena.ne.jp/amachang/20080124/1201199469">Yコンビネータってなに？</a><br/>
を見ながらまずふつうに実装して、それからラムダで書いてみることにしました。</p>

<p>まだ途中だけど、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="k">new</span> <span class="n">LambdaInterface</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">GInterface</span> <span class="nf">exec</span><span class="o">(</span><span class="n">FInterface</span> <span class="n">f</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">new</span> <span class="n">GInterface</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">exec</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="na">exec</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">fib</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}).</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">FInterface</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">FibInterface</span> <span class="nf">exec</span><span class="o">(</span><span class="n">GInterface</span> <span class="n">g</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="k">new</span> <span class="n">FibInterface</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">fib</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}).</span><span class="na">exec</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>計算は出来ているが、この時点でかなりつらい。<br/>
というか書いてて思ったけどこれ実装してもラムダにしようと思ったら、</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">GInterface</span> <span class="n">g</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="na">exec</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">fib</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ってイコール使っちゃうからだめだし、でももしかしたらと思って</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">return</span> <span class="o">(</span><span class="n">GInterface</span><span class="o">)</span> <span class="o">((</span><span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="na">exec</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">fib</span><span class="o">(</span><span class="n">m</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>って書いたけどやっぱり動かなかったし、無名関数の数だけ関数型インタフェースを用意しないといけないし、ジャバ8のラムダってふつうの糖衣構文だなって思いました(公式にもそう書いてあるのだけど)。</p>

<p>あとジャバ9でプリミティブ型がなくなるのを今日知りました。</p>
]]></content>
  </entry>
  
</feed>
