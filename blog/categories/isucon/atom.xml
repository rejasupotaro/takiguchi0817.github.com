<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Isucon | Just posted a blog]]></title>
  <link href="http://takiguchi0817.github.com/blog/categories/isucon/atom.xml" rel="self"/>
  <link href="http://takiguchi0817.github.com/"/>
  <updated>2013-04-02T02:38:53+09:00</updated>
  <id>http://takiguchi0817.github.com/</id>
  <author>
    <name><![CDATA[rejasupotaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[イスコン各位のパフォーマンスチューニング]]></title>
    <link href="http://takiguchi0817.github.com/blog/2012/11/06/isucon2/"/>
    <updated>2012-11-06T23:59:00+09:00</updated>
    <id>http://takiguchi0817.github.com/blog/2012/11/06/isucon2</id>
    <content type="html"><![CDATA[<p><a href="http://blog.livedoor.jp/techblog/archives/67726806.html">#isucon2</a>、周りでも結構話題になった。<br/>
「同期でもやりたいねー。」みたいな話になって、僕はパフォーマンスチューニングとかよくわからなかったので、各チームが何をしたのか調べた。</p>

<h2>言語</h2>

<ul>
<li>「なんとなくはやそう」みたいな曖昧な理由でnodeは選ばない。</li>
<li>使い慣れた言語(RubyとかPerlとか)でやった方が良い。</li>
</ul>


<h2>デプロイ</h2>

<ul>
<li>コードはGitHubに置いて、Capistranoでデプロイ出来るようにしたら良かった。</li>
</ul>


<h2>データベース</h2>

<ul>
<li>スロークエリのチェックと設定パラメータを見た。</li>
<li>インデックス張ったりクエリを試行錯誤した。</li>
<li>サーバーのメモリサイズが16GBだったのに、innodb_buffer_pool_size 2Gだったので、メモリを増やそうと思ったけど、データサイズが小さかったので、DBサーバーでAPPを動かした。</li>
<li>Redisを使うように書き直した。</li>
</ul>


<h2>アプリケーション</h2>

<ul>
<li>http_loadでベンチ。各リクエストのレスポンスタイムを確認した。</li>
<li>最適なワーカー数を二分探索で調べた。</li>
<li>リバースプロキシ先をHostnameからIPアドレスに変えた(DNSルックアップが遅い罠を警戒)</li>
<li>Rubyのあるパッチを当てたらRailsアプリが20〜30％高速化するらしいと聞いて、Rubyをビルドし直してみたらスコアが上がった。</li>
<li>nginxで静的ファイルを配信した。</li>
<li>VarnishでESIを使った。</li>
<li>リバースプロキシやDBにもAPP入れた。</li>
<li>ページ数が少ないので事前にHTMLを書き出して、1秒以内にすべて更新するようにしたら速くなる。</li>
<li>配信時にgzip圧縮をするのでは遅いので、事前にgzipで圧縮しておくと速くなる。</li>
</ul>


<h2>プロファイリング</h2>

<ul>
<li>PerlならDevel::KYTProfで丸裸にできる。</li>
<li>Text::Xslate->renderを計測したら、テンプレートのレンダリングで50〜100ms程度かかることが分かった。</li>
<li>負荷はテンプレートレンダリングのCPU boundだった。そこでworkerにレンダリング処理を独立した。</li>
</ul>


<h2>まとめ</h2>

<ol>
<li>とりあえず環境を整えて、ベンチマークを取ること。</li>
<li>まずSQLチューニングして、負荷がAPPに移ったらそっちに取りかかる。</li>
<li>キャッシュとかリバースプロキシをいじってみる。</li>
</ol>


<p>これらをうまく分担して行う、みたいな？</p>
]]></content>
  </entry>
  
</feed>
